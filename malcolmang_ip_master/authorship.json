[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"malcolmang"},"content":"# duke project template","lastModifiedDate":"2022-09-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"You will use this as a baseline for the individual project, as well as the team project later in the semester.","lastModifiedDate":"2022-08-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-08-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":18,"author":{"gitId":"malcolmang"},"content":"3. After that, locate the `src/main/java/duke.java` file, right-click it, and choose `Run duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2022-09-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"malcolmang":2,"-":24}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"malcolmang"},"content":"package duke;","lastModifiedDate":"2022-09-03"},{"lineNumber":2,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":3,"author":{"gitId":"malcolmang"},"content":"import duke.error.ErrorHandler;","lastModifiedDate":"2022-09-03"},{"lineNumber":4,"author":{"gitId":"malcolmang"},"content":"import duke.error.exceptions.DukeException;","lastModifiedDate":"2022-09-10"},{"lineNumber":5,"author":{"gitId":"malcolmang"},"content":"import duke.error.exceptions.ItemNotFoundException;","lastModifiedDate":"2022-09-10"},{"lineNumber":6,"author":{"gitId":"malcolmang"},"content":"import duke.error.exceptions.ListEmptyException;","lastModifiedDate":"2022-09-10"},{"lineNumber":7,"author":{"gitId":"malcolmang"},"content":"import duke.error.exceptions.NoStateChangeException;","lastModifiedDate":"2022-09-10"},{"lineNumber":8,"author":{"gitId":"malcolmang"},"content":"import duke.error.exceptions.NotAnIntegerException;","lastModifiedDate":"2022-09-10"},{"lineNumber":9,"author":{"gitId":"malcolmang"},"content":"import duke.error.exceptions.NotRecognizedException;","lastModifiedDate":"2022-09-10"},{"lineNumber":10,"author":{"gitId":"malcolmang"},"content":"import duke.io.Parser;","lastModifiedDate":"2022-09-18"},{"lineNumber":11,"author":{"gitId":"malcolmang"},"content":"import duke.io.Storage;","lastModifiedDate":"2022-09-18"},{"lineNumber":12,"author":{"gitId":"malcolmang"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2022-09-03"},{"lineNumber":13,"author":{"gitId":"malcolmang"},"content":"import duke.tasks.tasktypes.DeadlineTask;","lastModifiedDate":"2022-09-03"},{"lineNumber":14,"author":{"gitId":"malcolmang"},"content":"import duke.tasks.tasktypes.EventTask;","lastModifiedDate":"2022-09-03"},{"lineNumber":15,"author":{"gitId":"malcolmang"},"content":"import duke.tasks.tasktypes.ToDoTask;","lastModifiedDate":"2022-09-03"},{"lineNumber":16,"author":{"gitId":"malcolmang"},"content":"import duke.ui.StringFormatting;","lastModifiedDate":"2022-09-10"},{"lineNumber":17,"author":{"gitId":"malcolmang"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-09-18"},{"lineNumber":18,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":19,"author":{"gitId":"malcolmang"},"content":"public class Duke {","lastModifiedDate":"2022-09-03"},{"lineNumber":20,"author":{"gitId":"malcolmang"},"content":"    /* Command list to check against */","lastModifiedDate":"2022-09-03"},{"lineNumber":21,"author":{"gitId":"malcolmang"},"content":"    public static final String COMMAND_DEADLINE \u003d \"deadline\";","lastModifiedDate":"2022-09-03"},{"lineNumber":22,"author":{"gitId":"malcolmang"},"content":"    public static final String COMMAND_EVENT \u003d \"event\";","lastModifiedDate":"2022-09-03"},{"lineNumber":23,"author":{"gitId":"malcolmang"},"content":"    public static final String COMMAND_TODO \u003d \"todo\";","lastModifiedDate":"2022-09-03"},{"lineNumber":24,"author":{"gitId":"malcolmang"},"content":"    public static final String COMMAND_TERMINATE \u003d \"bye\";","lastModifiedDate":"2022-09-03"},{"lineNumber":25,"author":{"gitId":"malcolmang"},"content":"    public static final String COMMAND_LIST \u003d \"list\";","lastModifiedDate":"2022-09-03"},{"lineNumber":26,"author":{"gitId":"malcolmang"},"content":"    public static final String COMMAND_MARK \u003d \"mark\";","lastModifiedDate":"2022-09-03"},{"lineNumber":27,"author":{"gitId":"malcolmang"},"content":"    public static final String COMMAND_UNMARK \u003d \"unmark\";","lastModifiedDate":"2022-09-03"},{"lineNumber":28,"author":{"gitId":"malcolmang"},"content":"    public static final String COMMAND_DELETE \u003d \"delete\";","lastModifiedDate":"2022-09-10"},{"lineNumber":29,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":30,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":31,"author":{"gitId":"malcolmang"},"content":"     * Delimiter character for string splits","lastModifiedDate":"2022-09-18"},{"lineNumber":32,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":33,"author":{"gitId":"malcolmang"},"content":"    public static final String STRING_DELIMITER \u003d \" \";","lastModifiedDate":"2022-09-18"},{"lineNumber":34,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":35,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":36,"author":{"gitId":"malcolmang"},"content":"     * TaskList class that contains all items","lastModifiedDate":"2022-09-18"},{"lineNumber":37,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":38,"author":{"gitId":"malcolmang"},"content":"    public static TaskList TASK_LIST;","lastModifiedDate":"2022-09-10"},{"lineNumber":39,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":40,"author":{"gitId":"malcolmang"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-09-03"},{"lineNumber":41,"author":{"gitId":"malcolmang"},"content":"        TASK_LIST \u003d Storage.loadTaskList();","lastModifiedDate":"2022-09-18"},{"lineNumber":42,"author":{"gitId":"malcolmang"},"content":"        greet();","lastModifiedDate":"2022-09-03"},{"lineNumber":43,"author":{"gitId":"malcolmang"},"content":"        programBody();","lastModifiedDate":"2022-09-03"},{"lineNumber":44,"author":{"gitId":"malcolmang"},"content":"        exit();","lastModifiedDate":"2022-09-03"},{"lineNumber":45,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":46,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":47,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":48,"author":{"gitId":"malcolmang"},"content":"     * Body of the program. Runs in a loop until terminated.","lastModifiedDate":"2022-09-03"},{"lineNumber":49,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":50,"author":{"gitId":"malcolmang"},"content":"    public static void programBody() {","lastModifiedDate":"2022-09-03"},{"lineNumber":51,"author":{"gitId":"malcolmang"},"content":"        while (true) {","lastModifiedDate":"2022-09-03"},{"lineNumber":52,"author":{"gitId":"malcolmang"},"content":"            String input \u003d Ui.getInput();","lastModifiedDate":"2022-09-18"},{"lineNumber":53,"author":{"gitId":"malcolmang"},"content":"            try {","lastModifiedDate":"2022-09-03"},{"lineNumber":54,"author":{"gitId":"malcolmang"},"content":"                if (Parser.isTerminatingInput(input)) {","lastModifiedDate":"2022-09-18"},{"lineNumber":55,"author":{"gitId":"malcolmang"},"content":"                    break;","lastModifiedDate":"2022-09-03"},{"lineNumber":56,"author":{"gitId":"malcolmang"},"content":"                } else if (Parser.isListInput(input)) {","lastModifiedDate":"2022-09-18"},{"lineNumber":57,"author":{"gitId":"malcolmang"},"content":"                    printList();","lastModifiedDate":"2022-09-03"},{"lineNumber":58,"author":{"gitId":"malcolmang"},"content":"                } else if (Parser.isMarkInput(input)) {","lastModifiedDate":"2022-09-18"},{"lineNumber":59,"author":{"gitId":"malcolmang"},"content":"                    markAndConfirm(input);","lastModifiedDate":"2022-09-03"},{"lineNumber":60,"author":{"gitId":"malcolmang"},"content":"                } else if (Parser.isUnmarkInput(input)) {","lastModifiedDate":"2022-09-18"},{"lineNumber":61,"author":{"gitId":"malcolmang"},"content":"                    unmarkAndConfirm(input);","lastModifiedDate":"2022-09-03"},{"lineNumber":62,"author":{"gitId":"malcolmang"},"content":"                } else if (Parser.isAddInput(input)) {","lastModifiedDate":"2022-09-18"},{"lineNumber":63,"author":{"gitId":"malcolmang"},"content":"                    addAndConfirm(input);","lastModifiedDate":"2022-09-03"},{"lineNumber":64,"author":{"gitId":"malcolmang"},"content":"                } else if (Parser.isDeleteInput(input)) {","lastModifiedDate":"2022-09-18"},{"lineNumber":65,"author":{"gitId":"malcolmang"},"content":"                    deleteAndConfirm(input);","lastModifiedDate":"2022-09-10"},{"lineNumber":66,"author":{"gitId":"malcolmang"},"content":"                } else {","lastModifiedDate":"2022-09-03"},{"lineNumber":67,"author":{"gitId":"malcolmang"},"content":"                    throw new NotRecognizedException(input);","lastModifiedDate":"2022-09-03"},{"lineNumber":68,"author":{"gitId":"malcolmang"},"content":"                }","lastModifiedDate":"2022-09-03"},{"lineNumber":69,"author":{"gitId":"malcolmang"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2022-09-03"},{"lineNumber":70,"author":{"gitId":"malcolmang"},"content":"                ErrorHandler.printErrorMessage(e);","lastModifiedDate":"2022-09-03"},{"lineNumber":71,"author":{"gitId":"malcolmang"},"content":"            }","lastModifiedDate":"2022-09-03"},{"lineNumber":72,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-09-03"},{"lineNumber":73,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":74,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":75,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":76,"author":{"gitId":"malcolmang"},"content":"     * Marks item given in the input string.","lastModifiedDate":"2022-09-03"},{"lineNumber":77,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":78,"author":{"gitId":"malcolmang"},"content":"     * @param input input","lastModifiedDate":"2022-09-03"},{"lineNumber":79,"author":{"gitId":"malcolmang"},"content":"     * @throws NotAnIntegerException  If word after command is not an integer.","lastModifiedDate":"2022-09-03"},{"lineNumber":80,"author":{"gitId":"malcolmang"},"content":"     * @throws ItemNotFoundException  If there is no item at given index.","lastModifiedDate":"2022-09-03"},{"lineNumber":81,"author":{"gitId":"malcolmang"},"content":"     * @throws NoStateChangeException If item is already marked.","lastModifiedDate":"2022-09-03"},{"lineNumber":82,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":83,"author":{"gitId":"malcolmang"},"content":"    private static void markAndConfirm(String input) throws","lastModifiedDate":"2022-09-03"},{"lineNumber":84,"author":{"gitId":"malcolmang"},"content":"            NotAnIntegerException, ItemNotFoundException, NoStateChangeException {","lastModifiedDate":"2022-09-03"},{"lineNumber":85,"author":{"gitId":"malcolmang"},"content":"        Ui.print(StringFormatting.formatMarkOrUnmarkString(","lastModifiedDate":"2022-09-18"},{"lineNumber":86,"author":{"gitId":"malcolmang"},"content":"                TASK_LIST.getTextOfItem(markItem(input) - 1), true));","lastModifiedDate":"2022-09-10"},{"lineNumber":87,"author":{"gitId":"malcolmang"},"content":"        Storage.save();","lastModifiedDate":"2022-09-18"},{"lineNumber":88,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":89,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":90,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":91,"author":{"gitId":"malcolmang"},"content":"     * Unmarks item given in the input string.","lastModifiedDate":"2022-09-03"},{"lineNumber":92,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":93,"author":{"gitId":"malcolmang"},"content":"     * @param input input","lastModifiedDate":"2022-09-03"},{"lineNumber":94,"author":{"gitId":"malcolmang"},"content":"     * @throws NotAnIntegerException  If word after command is not an integer.","lastModifiedDate":"2022-09-03"},{"lineNumber":95,"author":{"gitId":"malcolmang"},"content":"     * @throws ItemNotFoundException  If there is no item at given index.","lastModifiedDate":"2022-09-03"},{"lineNumber":96,"author":{"gitId":"malcolmang"},"content":"     * @throws NoStateChangeException If item is already not marked.","lastModifiedDate":"2022-09-03"},{"lineNumber":97,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":98,"author":{"gitId":"malcolmang"},"content":"    private static void unmarkAndConfirm(String input) throws","lastModifiedDate":"2022-09-03"},{"lineNumber":99,"author":{"gitId":"malcolmang"},"content":"            NotAnIntegerException, ItemNotFoundException, NoStateChangeException {","lastModifiedDate":"2022-09-03"},{"lineNumber":100,"author":{"gitId":"malcolmang"},"content":"        Ui.print(StringFormatting.formatMarkOrUnmarkString(","lastModifiedDate":"2022-09-18"},{"lineNumber":101,"author":{"gitId":"malcolmang"},"content":"                TASK_LIST.getTextOfItem(unmarkItem(input) - 1), false));","lastModifiedDate":"2022-09-10"},{"lineNumber":102,"author":{"gitId":"malcolmang"},"content":"        Storage.save();","lastModifiedDate":"2022-09-18"},{"lineNumber":103,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":104,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":105,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":106,"author":{"gitId":"malcolmang"},"content":"     * Adds item to {@link Duke#TASK_LIST} and prints confirmation.","lastModifiedDate":"2022-09-03"},{"lineNumber":107,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":108,"author":{"gitId":"malcolmang"},"content":"     * @param input input string","lastModifiedDate":"2022-09-03"},{"lineNumber":109,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":110,"author":{"gitId":"malcolmang"},"content":"    private static void addAndConfirm(String input) {","lastModifiedDate":"2022-09-03"},{"lineNumber":111,"author":{"gitId":"malcolmang"},"content":"        Ui.print(StringFormatting.formatAddString(","lastModifiedDate":"2022-09-18"},{"lineNumber":112,"author":{"gitId":"malcolmang"},"content":"                TASK_LIST.getTextOfItem(addItem(input))) + StringFormatting.LINE_BREAK","lastModifiedDate":"2022-09-18"},{"lineNumber":113,"author":{"gitId":"malcolmang"},"content":"                + StringFormatting.formatNumberOfTasksString(","lastModifiedDate":"2022-09-10"},{"lineNumber":114,"author":{"gitId":"malcolmang"},"content":"                TASK_LIST.getItemCount()));","lastModifiedDate":"2022-09-10"},{"lineNumber":115,"author":{"gitId":"malcolmang"},"content":"        Storage.save();","lastModifiedDate":"2022-09-18"},{"lineNumber":116,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":117,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":118,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":119,"author":{"gitId":"malcolmang"},"content":"     * Deletes item and prints confirmation.","lastModifiedDate":"2022-09-10"},{"lineNumber":120,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":121,"author":{"gitId":"malcolmang"},"content":"     * @param input input","lastModifiedDate":"2022-09-10"},{"lineNumber":122,"author":{"gitId":"malcolmang"},"content":"     * @throws NotAnIntegerException If word after command is not an integer.","lastModifiedDate":"2022-09-10"},{"lineNumber":123,"author":{"gitId":"malcolmang"},"content":"     * @throws ItemNotFoundException If there is no item at given index.","lastModifiedDate":"2022-09-10"},{"lineNumber":124,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":125,"author":{"gitId":"malcolmang"},"content":"    private static void deleteAndConfirm(String input) throws","lastModifiedDate":"2022-09-10"},{"lineNumber":126,"author":{"gitId":"malcolmang"},"content":"            NotAnIntegerException, ItemNotFoundException {","lastModifiedDate":"2022-09-10"},{"lineNumber":127,"author":{"gitId":"malcolmang"},"content":"        Ui.print(StringFormatting.formatDeleteString(","lastModifiedDate":"2022-09-18"},{"lineNumber":128,"author":{"gitId":"malcolmang"},"content":"                deleteItem(input)) + StringFormatting.LINE_BREAK","lastModifiedDate":"2022-09-18"},{"lineNumber":129,"author":{"gitId":"malcolmang"},"content":"                + StringFormatting.formatNumberOfTasksString(","lastModifiedDate":"2022-09-10"},{"lineNumber":130,"author":{"gitId":"malcolmang"},"content":"                TASK_LIST.getItemCount()));","lastModifiedDate":"2022-09-10"},{"lineNumber":131,"author":{"gitId":"malcolmang"},"content":"        Storage.save();","lastModifiedDate":"2022-09-18"},{"lineNumber":132,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":133,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":134,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":135,"author":{"gitId":"malcolmang"},"content":"     * Print all tasks stored in {@link Duke#TASK_LIST}","lastModifiedDate":"2022-09-03"},{"lineNumber":136,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":137,"author":{"gitId":"malcolmang"},"content":"     * @throws ListEmptyException Exception thrown if list is empty","lastModifiedDate":"2022-09-03"},{"lineNumber":138,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":139,"author":{"gitId":"malcolmang"},"content":"    private static void printList() throws ListEmptyException {","lastModifiedDate":"2022-09-03"},{"lineNumber":140,"author":{"gitId":"malcolmang"},"content":"        if (TASK_LIST.getItemCount() \u003c\u003d 0) {","lastModifiedDate":"2022-09-03"},{"lineNumber":141,"author":{"gitId":"malcolmang"},"content":"            throw new ListEmptyException();","lastModifiedDate":"2022-09-03"},{"lineNumber":142,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-09-03"},{"lineNumber":143,"author":{"gitId":"malcolmang"},"content":"        Ui.print(TASK_LIST.toString());","lastModifiedDate":"2022-09-18"},{"lineNumber":144,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":145,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":146,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":147,"author":{"gitId":"malcolmang"},"content":"     * Add type of item, depending on command. Defaults to {@link ToDoTask} item type.","lastModifiedDate":"2022-09-03"},{"lineNumber":148,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":149,"author":{"gitId":"malcolmang"},"content":"     * @param input input string to check for command words","lastModifiedDate":"2022-09-03"},{"lineNumber":150,"author":{"gitId":"malcolmang"},"content":"     * @return \u003cb\u003e0-based\u003c/b\u003e index of added item.","lastModifiedDate":"2022-09-03"},{"lineNumber":151,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":152,"author":{"gitId":"malcolmang"},"content":"    private static int addItem(String input) {","lastModifiedDate":"2022-09-03"},{"lineNumber":153,"author":{"gitId":"malcolmang"},"content":"        String task \u003d input.split(STRING_DELIMITER, 2)[1];","lastModifiedDate":"2022-09-18"},{"lineNumber":154,"author":{"gitId":"malcolmang"},"content":"        if (Parser.stringContains(input, COMMAND_DEADLINE)) {","lastModifiedDate":"2022-09-18"},{"lineNumber":155,"author":{"gitId":"malcolmang"},"content":"            return TASK_LIST.addItem(new DeadlineTask(task));","lastModifiedDate":"2022-09-03"},{"lineNumber":156,"author":{"gitId":"malcolmang"},"content":"        } else if (Parser.stringContains(input, COMMAND_EVENT)) {","lastModifiedDate":"2022-09-18"},{"lineNumber":157,"author":{"gitId":"malcolmang"},"content":"            return TASK_LIST.addItem(new EventTask(task));","lastModifiedDate":"2022-09-03"},{"lineNumber":158,"author":{"gitId":"malcolmang"},"content":"        } else {","lastModifiedDate":"2022-09-03"},{"lineNumber":159,"author":{"gitId":"malcolmang"},"content":"            return TASK_LIST.addItem(new ToDoTask(task));","lastModifiedDate":"2022-09-03"},{"lineNumber":160,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-09-03"},{"lineNumber":161,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":162,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":163,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":164,"author":{"gitId":"malcolmang"},"content":"     * Deletes item in list.","lastModifiedDate":"2022-09-10"},{"lineNumber":165,"author":{"gitId":"malcolmang"},"content":"     * \u003cbr\u003e\u003cb\u003eNOTE: Operates on 1-based indexing logic\u003c/b\u003e, but converts it","lastModifiedDate":"2022-09-10"},{"lineNumber":166,"author":{"gitId":"malcolmang"},"content":"     * to 0-based indexing for {@link TaskList} class","lastModifiedDate":"2022-09-10"},{"lineNumber":167,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":168,"author":{"gitId":"malcolmang"},"content":"     * @param input input string to find index","lastModifiedDate":"2022-09-10"},{"lineNumber":169,"author":{"gitId":"malcolmang"},"content":"     * @return String of deleted item","lastModifiedDate":"2022-09-10"},{"lineNumber":170,"author":{"gitId":"malcolmang"},"content":"     * @throws NotAnIntegerException If word after command is not an integer","lastModifiedDate":"2022-09-10"},{"lineNumber":171,"author":{"gitId":"malcolmang"},"content":"     * @throws ItemNotFoundException If item is already marked","lastModifiedDate":"2022-09-10"},{"lineNumber":172,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":173,"author":{"gitId":"malcolmang"},"content":"    private static String deleteItem(String input) throws NotAnIntegerException, ItemNotFoundException {","lastModifiedDate":"2022-09-10"},{"lineNumber":174,"author":{"gitId":"malcolmang"},"content":"        int itemIndex \u003d extractNumber(input) - 1;","lastModifiedDate":"2022-09-10"},{"lineNumber":175,"author":{"gitId":"malcolmang"},"content":"        return TASK_LIST.deleteItem(itemIndex);","lastModifiedDate":"2022-09-10"},{"lineNumber":176,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":177,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":178,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":179,"author":{"gitId":"malcolmang"},"content":"     * Marks item in To-Do list as done.","lastModifiedDate":"2022-09-03"},{"lineNumber":180,"author":{"gitId":"malcolmang"},"content":"     * \u003cbr\u003e\u003cb\u003eNOTE: Operates on 1-based indexing logic\u003c/b\u003e, but converts it","lastModifiedDate":"2022-09-03"},{"lineNumber":181,"author":{"gitId":"malcolmang"},"content":"     * to 0-based indexing for {@link TaskList} class","lastModifiedDate":"2022-09-03"},{"lineNumber":182,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":183,"author":{"gitId":"malcolmang"},"content":"     * @param input input string to find index","lastModifiedDate":"2022-09-03"},{"lineNumber":184,"author":{"gitId":"malcolmang"},"content":"     * @return index of item \u003cb\u003e(1-based index)\u003c/b\u003e","lastModifiedDate":"2022-09-03"},{"lineNumber":185,"author":{"gitId":"malcolmang"},"content":"     * @throws NotAnIntegerException  If word after command is not an integer","lastModifiedDate":"2022-09-03"},{"lineNumber":186,"author":{"gitId":"malcolmang"},"content":"     * @throws ItemNotFoundException  If item is already marked","lastModifiedDate":"2022-09-03"},{"lineNumber":187,"author":{"gitId":"malcolmang"},"content":"     * @throws NoStateChangeException If there\u0027s no state change to be made to the task item","lastModifiedDate":"2022-09-18"},{"lineNumber":188,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":189,"author":{"gitId":"malcolmang"},"content":"    private static int markItem(String input) throws NotAnIntegerException, ItemNotFoundException,","lastModifiedDate":"2022-09-03"},{"lineNumber":190,"author":{"gitId":"malcolmang"},"content":"            NoStateChangeException {","lastModifiedDate":"2022-09-03"},{"lineNumber":191,"author":{"gitId":"malcolmang"},"content":"        int itemIndex \u003d extractNumber(input) - 1;","lastModifiedDate":"2022-09-03"},{"lineNumber":192,"author":{"gitId":"malcolmang"},"content":"        TASK_LIST.markItem(itemIndex);","lastModifiedDate":"2022-09-03"},{"lineNumber":193,"author":{"gitId":"malcolmang"},"content":"        return itemIndex + 1;","lastModifiedDate":"2022-09-03"},{"lineNumber":194,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":195,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":196,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":197,"author":{"gitId":"malcolmang"},"content":"     * Removes mark on item in To-Do list, marking it as undone.","lastModifiedDate":"2022-09-03"},{"lineNumber":198,"author":{"gitId":"malcolmang"},"content":"     * \u003cbr\u003e\u003cb\u003eNOTE: Operates on 1-based indexing logic\u003c/b\u003e, but converts it","lastModifiedDate":"2022-09-03"},{"lineNumber":199,"author":{"gitId":"malcolmang"},"content":"     * to 0-based indexing for {@link TaskList} class","lastModifiedDate":"2022-09-03"},{"lineNumber":200,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":201,"author":{"gitId":"malcolmang"},"content":"     * @param input input string to find index","lastModifiedDate":"2022-09-03"},{"lineNumber":202,"author":{"gitId":"malcolmang"},"content":"     * @return index of item \u003cb\u003e(1-based index)\u003c/b\u003e","lastModifiedDate":"2022-09-03"},{"lineNumber":203,"author":{"gitId":"malcolmang"},"content":"     * @throws NotAnIntegerException  If word after command is not an integer","lastModifiedDate":"2022-09-03"},{"lineNumber":204,"author":{"gitId":"malcolmang"},"content":"     * @throws ItemNotFoundException  If item is already marked","lastModifiedDate":"2022-09-03"},{"lineNumber":205,"author":{"gitId":"malcolmang"},"content":"     * @throws NoStateChangeException If there\u0027s no state change to be made to the task item","lastModifiedDate":"2022-09-18"},{"lineNumber":206,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":207,"author":{"gitId":"malcolmang"},"content":"    private static int unmarkItem(String input) throws NotAnIntegerException, ItemNotFoundException,","lastModifiedDate":"2022-09-03"},{"lineNumber":208,"author":{"gitId":"malcolmang"},"content":"            NoStateChangeException {","lastModifiedDate":"2022-09-03"},{"lineNumber":209,"author":{"gitId":"malcolmang"},"content":"        int itemIndex \u003d extractNumber(input) - 1;","lastModifiedDate":"2022-09-03"},{"lineNumber":210,"author":{"gitId":"malcolmang"},"content":"        TASK_LIST.unmarkItem(itemIndex);","lastModifiedDate":"2022-09-03"},{"lineNumber":211,"author":{"gitId":"malcolmang"},"content":"        return itemIndex + 1;","lastModifiedDate":"2022-09-03"},{"lineNumber":212,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":213,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":214,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":215,"author":{"gitId":"malcolmang"},"content":"     * Extracts a number from a given string.","lastModifiedDate":"2022-09-03"},{"lineNumber":216,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":217,"author":{"gitId":"malcolmang"},"content":"     * @param input input string","lastModifiedDate":"2022-09-03"},{"lineNumber":218,"author":{"gitId":"malcolmang"},"content":"     * @return extracted integer","lastModifiedDate":"2022-09-03"},{"lineNumber":219,"author":{"gitId":"malcolmang"},"content":"     * @throws NotAnIntegerException If word after command is not an integer","lastModifiedDate":"2022-09-03"},{"lineNumber":220,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":221,"author":{"gitId":"malcolmang"},"content":"    private static int extractNumber(String input) throws NotAnIntegerException {","lastModifiedDate":"2022-09-03"},{"lineNumber":222,"author":{"gitId":"malcolmang"},"content":"        String number \u003d input.split(STRING_DELIMITER)[1];","lastModifiedDate":"2022-09-18"},{"lineNumber":223,"author":{"gitId":"malcolmang"},"content":"        String command \u003d input.split(STRING_DELIMITER)[0];","lastModifiedDate":"2022-09-18"},{"lineNumber":224,"author":{"gitId":"malcolmang"},"content":"        if (Parser.isInteger(number)) {","lastModifiedDate":"2022-09-18"},{"lineNumber":225,"author":{"gitId":"malcolmang"},"content":"            return Integer.parseInt(number);","lastModifiedDate":"2022-09-03"},{"lineNumber":226,"author":{"gitId":"malcolmang"},"content":"        } else {","lastModifiedDate":"2022-09-03"},{"lineNumber":227,"author":{"gitId":"malcolmang"},"content":"            throw new NotAnIntegerException(command);","lastModifiedDate":"2022-09-03"},{"lineNumber":228,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-09-03"},{"lineNumber":229,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":230,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":231,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":232,"author":{"gitId":"malcolmang"},"content":"     * Prints a greeting for when the program is run","lastModifiedDate":"2022-09-03"},{"lineNumber":233,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":234,"author":{"gitId":"malcolmang"},"content":"    private static void greet() {","lastModifiedDate":"2022-09-03"},{"lineNumber":235,"author":{"gitId":"malcolmang"},"content":"        Ui.print(StringFormatting.getGreeting());","lastModifiedDate":"2022-09-18"},{"lineNumber":236,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":237,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":238,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":239,"author":{"gitId":"malcolmang"},"content":"     * Prints a goodbye message for when the program is terminated via user commands","lastModifiedDate":"2022-09-03"},{"lineNumber":240,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":241,"author":{"gitId":"malcolmang"},"content":"    private static void exit() {","lastModifiedDate":"2022-09-03"},{"lineNumber":242,"author":{"gitId":"malcolmang"},"content":"        Storage.save();","lastModifiedDate":"2022-09-18"},{"lineNumber":243,"author":{"gitId":"malcolmang"},"content":"        Ui.print(StringFormatting.getGoodbye());","lastModifiedDate":"2022-09-18"},{"lineNumber":244,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":245,"author":{"gitId":"malcolmang"},"content":"}","lastModifiedDate":"2022-09-03"}],"authorContributionMap":{"malcolmang":245}},{"path":"src/main/java/duke/error/ErrorHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"malcolmang"},"content":"package duke.error;","lastModifiedDate":"2022-09-03"},{"lineNumber":2,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":3,"author":{"gitId":"malcolmang"},"content":"import duke.error.exceptions.DukeException;","lastModifiedDate":"2022-09-03"},{"lineNumber":4,"author":{"gitId":"malcolmang"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":6,"author":{"gitId":"malcolmang"},"content":"/**","lastModifiedDate":"2022-09-03"},{"lineNumber":7,"author":{"gitId":"malcolmang"},"content":" * Handles custom exceptions (of type {@link DukeException}) and prints error messages.","lastModifiedDate":"2022-09-03"},{"lineNumber":8,"author":{"gitId":"malcolmang"},"content":" */","lastModifiedDate":"2022-09-03"},{"lineNumber":9,"author":{"gitId":"malcolmang"},"content":"public class ErrorHandler {","lastModifiedDate":"2022-09-03"},{"lineNumber":10,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":11,"author":{"gitId":"malcolmang"},"content":"     * Prints error message","lastModifiedDate":"2022-09-03"},{"lineNumber":12,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":13,"author":{"gitId":"malcolmang"},"content":"     * @param e Exception of type {@link DukeException}","lastModifiedDate":"2022-09-03"},{"lineNumber":14,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":15,"author":{"gitId":"malcolmang"},"content":"    public static void printErrorMessage(DukeException e) {","lastModifiedDate":"2022-09-03"},{"lineNumber":16,"author":{"gitId":"malcolmang"},"content":"        Ui.print(e.getExceptionMessage());","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":18,"author":{"gitId":"malcolmang"},"content":"}","lastModifiedDate":"2022-09-03"}],"authorContributionMap":{"malcolmang":18}},{"path":"src/main/java/duke/error/exceptions/CouldNotSaveException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"malcolmang"},"content":"package duke.error.exceptions;","lastModifiedDate":"2022-09-10"},{"lineNumber":2,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":3,"author":{"gitId":"malcolmang"},"content":"import duke.io.Storage;","lastModifiedDate":"2022-09-18"},{"lineNumber":4,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":5,"author":{"gitId":"malcolmang"},"content":"/**","lastModifiedDate":"2022-09-10"},{"lineNumber":6,"author":{"gitId":"malcolmang"},"content":" * Exception subclass of {@link DukeException} for if there is an issue saving.","lastModifiedDate":"2022-09-10"},{"lineNumber":7,"author":{"gitId":"malcolmang"},"content":" */","lastModifiedDate":"2022-09-10"},{"lineNumber":8,"author":{"gitId":"malcolmang"},"content":"public class CouldNotSaveException extends DukeException {","lastModifiedDate":"2022-09-10"},{"lineNumber":9,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":10,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":11,"author":{"gitId":"malcolmang"},"content":"     * Message to be returned depending on exception.","lastModifiedDate":"2022-09-10"},{"lineNumber":12,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":13,"author":{"gitId":"malcolmang"},"content":"     * @return message string","lastModifiedDate":"2022-09-10"},{"lineNumber":14,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":15,"author":{"gitId":"malcolmang"},"content":"    @Override","lastModifiedDate":"2022-09-10"},{"lineNumber":16,"author":{"gitId":"malcolmang"},"content":"    public String getExceptionMessage() {","lastModifiedDate":"2022-09-10"},{"lineNumber":17,"author":{"gitId":"malcolmang"},"content":"        return \"An error occurred while attempting to save. Please try to clear the path \\\"\"","lastModifiedDate":"2022-09-10"},{"lineNumber":18,"author":{"gitId":"malcolmang"},"content":"                + Storage.getPath() + \"\\\".\";","lastModifiedDate":"2022-09-18"},{"lineNumber":19,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":20,"author":{"gitId":"malcolmang"},"content":"}","lastModifiedDate":"2022-09-10"}],"authorContributionMap":{"malcolmang":20}},{"path":"src/main/java/duke/error/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"malcolmang"},"content":"package duke.error.exceptions;","lastModifiedDate":"2022-09-03"},{"lineNumber":2,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":3,"author":{"gitId":"malcolmang"},"content":"/**","lastModifiedDate":"2022-09-03"},{"lineNumber":4,"author":{"gitId":"malcolmang"},"content":" * Custom Exception that forces implementation of a {@link DukeException#getExceptionMessage} method.","lastModifiedDate":"2022-09-03"},{"lineNumber":5,"author":{"gitId":"malcolmang"},"content":" */","lastModifiedDate":"2022-09-03"},{"lineNumber":6,"author":{"gitId":"malcolmang"},"content":"public abstract class DukeException extends Exception {","lastModifiedDate":"2022-09-03"},{"lineNumber":7,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":8,"author":{"gitId":"malcolmang"},"content":"     * Message to be returned depending on exception.","lastModifiedDate":"2022-09-03"},{"lineNumber":9,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":10,"author":{"gitId":"malcolmang"},"content":"     * @return message string","lastModifiedDate":"2022-09-03"},{"lineNumber":11,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":12,"author":{"gitId":"malcolmang"},"content":"    public abstract String getExceptionMessage();","lastModifiedDate":"2022-09-03"},{"lineNumber":13,"author":{"gitId":"malcolmang"},"content":"}","lastModifiedDate":"2022-09-03"}],"authorContributionMap":{"malcolmang":13}},{"path":"src/main/java/duke/error/exceptions/ItemNotFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"malcolmang"},"content":"package duke.error.exceptions;","lastModifiedDate":"2022-09-03"},{"lineNumber":2,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":3,"author":{"gitId":"malcolmang"},"content":"import duke.Duke;","lastModifiedDate":"2022-09-03"},{"lineNumber":4,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":5,"author":{"gitId":"malcolmang"},"content":"/**","lastModifiedDate":"2022-09-03"},{"lineNumber":6,"author":{"gitId":"malcolmang"},"content":" * Exception subclass of {@link DukeException} for if an item is not found in list at a given index.","lastModifiedDate":"2022-09-03"},{"lineNumber":7,"author":{"gitId":"malcolmang"},"content":" */","lastModifiedDate":"2022-09-03"},{"lineNumber":8,"author":{"gitId":"malcolmang"},"content":"public class ItemNotFoundException extends DukeException {","lastModifiedDate":"2022-09-03"},{"lineNumber":9,"author":{"gitId":"malcolmang"},"content":"    private final int index;","lastModifiedDate":"2022-09-03"},{"lineNumber":10,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":11,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":12,"author":{"gitId":"malcolmang"},"content":"     * Constructor for exception.","lastModifiedDate":"2022-09-03"},{"lineNumber":13,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":14,"author":{"gitId":"malcolmang"},"content":"     * @param index index of item. \u003cb\u003eNote:\u003c/b\u003e input is given as 0-based index","lastModifiedDate":"2022-09-03"},{"lineNumber":15,"author":{"gitId":"malcolmang"},"content":"     *              but error message prints 1-based index","lastModifiedDate":"2022-09-03"},{"lineNumber":16,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":17,"author":{"gitId":"malcolmang"},"content":"    public ItemNotFoundException(int index) {","lastModifiedDate":"2022-09-03"},{"lineNumber":18,"author":{"gitId":"malcolmang"},"content":"        super();","lastModifiedDate":"2022-09-03"},{"lineNumber":19,"author":{"gitId":"malcolmang"},"content":"        this.index \u003d index + 1;","lastModifiedDate":"2022-09-03"},{"lineNumber":20,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":21,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":22,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":23,"author":{"gitId":"malcolmang"},"content":"     * Message to be returned depending on exception.","lastModifiedDate":"2022-09-03"},{"lineNumber":24,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":25,"author":{"gitId":"malcolmang"},"content":"     * @return message string","lastModifiedDate":"2022-09-03"},{"lineNumber":26,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":27,"author":{"gitId":"malcolmang"},"content":"    @Override","lastModifiedDate":"2022-09-03"},{"lineNumber":28,"author":{"gitId":"malcolmang"},"content":"    public String getExceptionMessage() {","lastModifiedDate":"2022-09-03"},{"lineNumber":29,"author":{"gitId":"malcolmang"},"content":"        String tempString \u003d String.format(\"Item at index %s was not found. \", index);","lastModifiedDate":"2022-09-03"},{"lineNumber":30,"author":{"gitId":"malcolmang"},"content":"        if (index \u003d\u003d 0) {","lastModifiedDate":"2022-09-03"},{"lineNumber":31,"author":{"gitId":"malcolmang"},"content":"            tempString +\u003d \"\\nRemember that your to-do list is 1-indexed (0 is not valid).\";","lastModifiedDate":"2022-09-03"},{"lineNumber":32,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-09-03"},{"lineNumber":33,"author":{"gitId":"malcolmang"},"content":"        if (Duke.TASK_LIST.getItemCount() \u003d\u003d 0) {","lastModifiedDate":"2022-09-18"},{"lineNumber":34,"author":{"gitId":"malcolmang"},"content":"            tempString +\u003d \"\\nYour to-do list is currently empty.\";","lastModifiedDate":"2022-09-18"},{"lineNumber":35,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":36,"author":{"gitId":"malcolmang"},"content":"        else {","lastModifiedDate":"2022-09-18"},{"lineNumber":37,"author":{"gitId":"malcolmang"},"content":"            tempString +\u003d String.format(","lastModifiedDate":"2022-09-18"},{"lineNumber":38,"author":{"gitId":"malcolmang"},"content":"                    \"\\nYour to-do list currently has %s item(s).\", Duke.TASK_LIST.getItemCount());","lastModifiedDate":"2022-09-03"},{"lineNumber":39,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":40,"author":{"gitId":"malcolmang"},"content":"        return tempString;","lastModifiedDate":"2022-09-03"},{"lineNumber":41,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":42,"author":{"gitId":"malcolmang"},"content":"}","lastModifiedDate":"2022-09-03"}],"authorContributionMap":{"malcolmang":42}},{"path":"src/main/java/duke/error/exceptions/ListEmptyException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"malcolmang"},"content":"package duke.error.exceptions;","lastModifiedDate":"2022-09-03"},{"lineNumber":2,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":3,"author":{"gitId":"malcolmang"},"content":"import duke.Duke;","lastModifiedDate":"2022-09-03"},{"lineNumber":4,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":5,"author":{"gitId":"malcolmang"},"content":"/**","lastModifiedDate":"2022-09-03"},{"lineNumber":6,"author":{"gitId":"malcolmang"},"content":" * Exception subclass of {@link DukeException} for when the {@link Duke#COMMAND_LIST}","lastModifiedDate":"2022-09-03"},{"lineNumber":7,"author":{"gitId":"malcolmang"},"content":" * command is called but list is empty","lastModifiedDate":"2022-09-03"},{"lineNumber":8,"author":{"gitId":"malcolmang"},"content":" */","lastModifiedDate":"2022-09-03"},{"lineNumber":9,"author":{"gitId":"malcolmang"},"content":"public class ListEmptyException extends DukeException {","lastModifiedDate":"2022-09-03"},{"lineNumber":10,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":11,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":12,"author":{"gitId":"malcolmang"},"content":"     * Message to be returned depending on exception.","lastModifiedDate":"2022-09-03"},{"lineNumber":13,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":14,"author":{"gitId":"malcolmang"},"content":"     * @return message string","lastModifiedDate":"2022-09-03"},{"lineNumber":15,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":16,"author":{"gitId":"malcolmang"},"content":"    @Override","lastModifiedDate":"2022-09-03"},{"lineNumber":17,"author":{"gitId":"malcolmang"},"content":"    public String getExceptionMessage() {","lastModifiedDate":"2022-09-03"},{"lineNumber":18,"author":{"gitId":"malcolmang"},"content":"        return String.format(\"Your to-do list is empty. Please add some items \"","lastModifiedDate":"2022-09-03"},{"lineNumber":19,"author":{"gitId":"malcolmang"},"content":"                + \"to your list to use the \u003c%1$s\u003e command.\", Duke.COMMAND_LIST);","lastModifiedDate":"2022-09-03"},{"lineNumber":20,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":21,"author":{"gitId":"malcolmang"},"content":"}","lastModifiedDate":"2022-09-03"}],"authorContributionMap":{"malcolmang":21}},{"path":"src/main/java/duke/error/exceptions/NoCommandArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"malcolmang"},"content":"package duke.error.exceptions;","lastModifiedDate":"2022-09-03"},{"lineNumber":2,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":3,"author":{"gitId":"malcolmang"},"content":"/**","lastModifiedDate":"2022-09-03"},{"lineNumber":4,"author":{"gitId":"malcolmang"},"content":" * Exception subclass of {@link DukeException} for when an argument is needed after","lastModifiedDate":"2022-09-03"},{"lineNumber":5,"author":{"gitId":"malcolmang"},"content":" * a command but none are given.","lastModifiedDate":"2022-09-03"},{"lineNumber":6,"author":{"gitId":"malcolmang"},"content":" */","lastModifiedDate":"2022-09-03"},{"lineNumber":7,"author":{"gitId":"malcolmang"},"content":"public class NoCommandArgumentException extends DukeException {","lastModifiedDate":"2022-09-03"},{"lineNumber":8,"author":{"gitId":"malcolmang"},"content":"    private final String command;","lastModifiedDate":"2022-09-03"},{"lineNumber":9,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":10,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":11,"author":{"gitId":"malcolmang"},"content":"     * Constructor for exception","lastModifiedDate":"2022-09-03"},{"lineNumber":12,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":13,"author":{"gitId":"malcolmang"},"content":"     * @param command command string","lastModifiedDate":"2022-09-03"},{"lineNumber":14,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":15,"author":{"gitId":"malcolmang"},"content":"    public NoCommandArgumentException(String command) {","lastModifiedDate":"2022-09-03"},{"lineNumber":16,"author":{"gitId":"malcolmang"},"content":"        super();","lastModifiedDate":"2022-09-03"},{"lineNumber":17,"author":{"gitId":"malcolmang"},"content":"        this.command \u003d command;","lastModifiedDate":"2022-09-03"},{"lineNumber":18,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":19,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":20,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":21,"author":{"gitId":"malcolmang"},"content":"     * Message to be returned depending on exception.","lastModifiedDate":"2022-09-03"},{"lineNumber":22,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":23,"author":{"gitId":"malcolmang"},"content":"     * @return message string","lastModifiedDate":"2022-09-03"},{"lineNumber":24,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":25,"author":{"gitId":"malcolmang"},"content":"    @Override","lastModifiedDate":"2022-09-03"},{"lineNumber":26,"author":{"gitId":"malcolmang"},"content":"    public String getExceptionMessage() {","lastModifiedDate":"2022-09-03"},{"lineNumber":27,"author":{"gitId":"malcolmang"},"content":"        return String.format(\"The command \u003c%s\u003e requires an argument after. \"","lastModifiedDate":"2022-09-03"},{"lineNumber":28,"author":{"gitId":"malcolmang"},"content":"                + \"Please try again with an argument after the command.\", command);","lastModifiedDate":"2022-09-03"},{"lineNumber":29,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":30,"author":{"gitId":"malcolmang"},"content":"}","lastModifiedDate":"2022-09-03"}],"authorContributionMap":{"malcolmang":30}},{"path":"src/main/java/duke/error/exceptions/NoStateChangeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"malcolmang"},"content":"package duke.error.exceptions;","lastModifiedDate":"2022-09-03"},{"lineNumber":2,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":3,"author":{"gitId":"malcolmang"},"content":"/**","lastModifiedDate":"2022-09-03"},{"lineNumber":4,"author":{"gitId":"malcolmang"},"content":" * Exception subclass of {@link DukeException} for if an item\u0027s desired state and current state match.","lastModifiedDate":"2022-09-03"},{"lineNumber":5,"author":{"gitId":"malcolmang"},"content":" * E.g. If an item is marked and the user tries to call the","lastModifiedDate":"2022-09-03"},{"lineNumber":6,"author":{"gitId":"malcolmang"},"content":" * {@link duke.Duke#COMMAND_MARK Duke.COMMAND_MARK} command.","lastModifiedDate":"2022-09-03"},{"lineNumber":7,"author":{"gitId":"malcolmang"},"content":" */","lastModifiedDate":"2022-09-03"},{"lineNumber":8,"author":{"gitId":"malcolmang"},"content":"public class NoStateChangeException extends DukeException {","lastModifiedDate":"2022-09-03"},{"lineNumber":9,"author":{"gitId":"malcolmang"},"content":"    private final boolean isDone;","lastModifiedDate":"2022-09-03"},{"lineNumber":10,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":11,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":12,"author":{"gitId":"malcolmang"},"content":"     * Constructor for exception","lastModifiedDate":"2022-09-03"},{"lineNumber":13,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":14,"author":{"gitId":"malcolmang"},"content":"     * @param isDone boolean state of item","lastModifiedDate":"2022-09-03"},{"lineNumber":15,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":16,"author":{"gitId":"malcolmang"},"content":"    public NoStateChangeException(boolean isDone) {","lastModifiedDate":"2022-09-03"},{"lineNumber":17,"author":{"gitId":"malcolmang"},"content":"        super();","lastModifiedDate":"2022-09-03"},{"lineNumber":18,"author":{"gitId":"malcolmang"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2022-09-03"},{"lineNumber":19,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":20,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":21,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":22,"author":{"gitId":"malcolmang"},"content":"     * Message to be returned depending on exception.","lastModifiedDate":"2022-09-03"},{"lineNumber":23,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":24,"author":{"gitId":"malcolmang"},"content":"     * @return message string","lastModifiedDate":"2022-09-03"},{"lineNumber":25,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":26,"author":{"gitId":"malcolmang"},"content":"    @Override","lastModifiedDate":"2022-09-03"},{"lineNumber":27,"author":{"gitId":"malcolmang"},"content":"    public String getExceptionMessage() {","lastModifiedDate":"2022-09-03"},{"lineNumber":28,"author":{"gitId":"malcolmang"},"content":"        return \"Item is already \" + (isDone ? \"marked.\" : \"unmarked.\") + \" Did you mean to type \"","lastModifiedDate":"2022-09-03"},{"lineNumber":29,"author":{"gitId":"malcolmang"},"content":"                + (isDone ? \"\u003cunmark\u003e ?\" : \"\u003cmark\u003e ?\") + \"\\nPlease try again.\";","lastModifiedDate":"2022-09-03"},{"lineNumber":30,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":31,"author":{"gitId":"malcolmang"},"content":"}","lastModifiedDate":"2022-09-03"}],"authorContributionMap":{"malcolmang":31}},{"path":"src/main/java/duke/error/exceptions/NotAnIntegerException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"malcolmang"},"content":"package duke.error.exceptions;","lastModifiedDate":"2022-09-03"},{"lineNumber":2,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":3,"author":{"gitId":"malcolmang"},"content":"/**","lastModifiedDate":"2022-09-03"},{"lineNumber":4,"author":{"gitId":"malcolmang"},"content":" * Exception subclass of {@link DukeException} for if a given string is not an","lastModifiedDate":"2022-09-03"},{"lineNumber":5,"author":{"gitId":"malcolmang"},"content":" * integer but should be.","lastModifiedDate":"2022-09-03"},{"lineNumber":6,"author":{"gitId":"malcolmang"},"content":" */","lastModifiedDate":"2022-09-03"},{"lineNumber":7,"author":{"gitId":"malcolmang"},"content":"public class NotAnIntegerException extends DukeException {","lastModifiedDate":"2022-09-03"},{"lineNumber":8,"author":{"gitId":"malcolmang"},"content":"    private final String command;","lastModifiedDate":"2022-09-03"},{"lineNumber":9,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":10,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":11,"author":{"gitId":"malcolmang"},"content":"     * Constructor for exception","lastModifiedDate":"2022-09-03"},{"lineNumber":12,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":13,"author":{"gitId":"malcolmang"},"content":"     * @param command command string","lastModifiedDate":"2022-09-03"},{"lineNumber":14,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":15,"author":{"gitId":"malcolmang"},"content":"    public NotAnIntegerException(String command) {","lastModifiedDate":"2022-09-03"},{"lineNumber":16,"author":{"gitId":"malcolmang"},"content":"        super();","lastModifiedDate":"2022-09-03"},{"lineNumber":17,"author":{"gitId":"malcolmang"},"content":"        this.command \u003d command;","lastModifiedDate":"2022-09-03"},{"lineNumber":18,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":19,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":20,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":21,"author":{"gitId":"malcolmang"},"content":"     * Message to be returned depending on exception.","lastModifiedDate":"2022-09-03"},{"lineNumber":22,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":23,"author":{"gitId":"malcolmang"},"content":"     * @return message string","lastModifiedDate":"2022-09-03"},{"lineNumber":24,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":25,"author":{"gitId":"malcolmang"},"content":"    @Override","lastModifiedDate":"2022-09-03"},{"lineNumber":26,"author":{"gitId":"malcolmang"},"content":"    public String getExceptionMessage() {","lastModifiedDate":"2022-09-03"},{"lineNumber":27,"author":{"gitId":"malcolmang"},"content":"        return String.format(\"The argument after \u003c%s\u003e was not an integer. \"","lastModifiedDate":"2022-09-03"},{"lineNumber":28,"author":{"gitId":"malcolmang"},"content":"                + \"Please try again.\", command);","lastModifiedDate":"2022-09-03"},{"lineNumber":29,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":30,"author":{"gitId":"malcolmang"},"content":"}","lastModifiedDate":"2022-09-03"}],"authorContributionMap":{"malcolmang":30}},{"path":"src/main/java/duke/error/exceptions/NotRecognizedException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"malcolmang"},"content":"package duke.error.exceptions;","lastModifiedDate":"2022-09-03"},{"lineNumber":2,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":3,"author":{"gitId":"malcolmang"},"content":"/**","lastModifiedDate":"2022-09-03"},{"lineNumber":4,"author":{"gitId":"malcolmang"},"content":" * Exception subclass of {@link DukeException} for if a given string does not have","lastModifiedDate":"2022-09-03"},{"lineNumber":5,"author":{"gitId":"malcolmang"},"content":" * a recognized command.","lastModifiedDate":"2022-09-03"},{"lineNumber":6,"author":{"gitId":"malcolmang"},"content":" */","lastModifiedDate":"2022-09-03"},{"lineNumber":7,"author":{"gitId":"malcolmang"},"content":"public class NotRecognizedException extends DukeException {","lastModifiedDate":"2022-09-03"},{"lineNumber":8,"author":{"gitId":"malcolmang"},"content":"    private final String input;","lastModifiedDate":"2022-09-03"},{"lineNumber":9,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":10,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":11,"author":{"gitId":"malcolmang"},"content":"     * Constructor for exception","lastModifiedDate":"2022-09-03"},{"lineNumber":12,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":13,"author":{"gitId":"malcolmang"},"content":"     * @param input input string","lastModifiedDate":"2022-09-03"},{"lineNumber":14,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":15,"author":{"gitId":"malcolmang"},"content":"    public NotRecognizedException(String input) {","lastModifiedDate":"2022-09-03"},{"lineNumber":16,"author":{"gitId":"malcolmang"},"content":"        super();","lastModifiedDate":"2022-09-03"},{"lineNumber":17,"author":{"gitId":"malcolmang"},"content":"        this.input \u003d input;","lastModifiedDate":"2022-09-03"},{"lineNumber":18,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":19,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":20,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":21,"author":{"gitId":"malcolmang"},"content":"     * Message to be returned depending on exception.","lastModifiedDate":"2022-09-03"},{"lineNumber":22,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":23,"author":{"gitId":"malcolmang"},"content":"     * @return message string","lastModifiedDate":"2022-09-03"},{"lineNumber":24,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":25,"author":{"gitId":"malcolmang"},"content":"    @Override","lastModifiedDate":"2022-09-03"},{"lineNumber":26,"author":{"gitId":"malcolmang"},"content":"    public String getExceptionMessage() {","lastModifiedDate":"2022-09-03"},{"lineNumber":27,"author":{"gitId":"malcolmang"},"content":"        return String.format(\"Sorry! Your input \\\"%1$s\\\" wasn\u0027t a recognised command. \"","lastModifiedDate":"2022-09-03"},{"lineNumber":28,"author":{"gitId":"malcolmang"},"content":"                + \"Please try again.\", input.split(\" \")[0]);","lastModifiedDate":"2022-09-03"},{"lineNumber":29,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":30,"author":{"gitId":"malcolmang"},"content":"}","lastModifiedDate":"2022-09-03"}],"authorContributionMap":{"malcolmang":30}},{"path":"src/main/java/duke/error/exceptions/SaveFileFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"malcolmang"},"content":"package duke.error.exceptions;","lastModifiedDate":"2022-09-10"},{"lineNumber":2,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":3,"author":{"gitId":"malcolmang"},"content":"/**","lastModifiedDate":"2022-09-10"},{"lineNumber":4,"author":{"gitId":"malcolmang"},"content":" * Exception subclass of {@link DukeException} for if an item is not found in list at a given index.","lastModifiedDate":"2022-09-10"},{"lineNumber":5,"author":{"gitId":"malcolmang"},"content":" */","lastModifiedDate":"2022-09-10"},{"lineNumber":6,"author":{"gitId":"malcolmang"},"content":"public class SaveFileFormatException extends DukeException {","lastModifiedDate":"2022-09-10"},{"lineNumber":7,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":8,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":9,"author":{"gitId":"malcolmang"},"content":"     * Message to be returned depending on exception.","lastModifiedDate":"2022-09-10"},{"lineNumber":10,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":11,"author":{"gitId":"malcolmang"},"content":"     * @return message string","lastModifiedDate":"2022-09-10"},{"lineNumber":12,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":13,"author":{"gitId":"malcolmang"},"content":"    @Override","lastModifiedDate":"2022-09-10"},{"lineNumber":14,"author":{"gitId":"malcolmang"},"content":"    public String getExceptionMessage() {","lastModifiedDate":"2022-09-10"},{"lineNumber":15,"author":{"gitId":"malcolmang"},"content":"        return \"The save file appears to be corrupted. The file will be deleted and re-instanced.\";","lastModifiedDate":"2022-09-10"},{"lineNumber":16,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":17,"author":{"gitId":"malcolmang"},"content":"}","lastModifiedDate":"2022-09-10"}],"authorContributionMap":{"malcolmang":17}},{"path":"src/main/java/duke/error/exceptions/TooManyWordsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"malcolmang"},"content":"package duke.error.exceptions;","lastModifiedDate":"2022-09-03"},{"lineNumber":2,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":3,"author":{"gitId":"malcolmang"},"content":"/**","lastModifiedDate":"2022-09-03"},{"lineNumber":4,"author":{"gitId":"malcolmang"},"content":" * Exception subclass of {@link DukeException} for if a given string has","lastModifiedDate":"2022-09-03"},{"lineNumber":5,"author":{"gitId":"malcolmang"},"content":" * more words than it should.   \u003cbr\u003e","lastModifiedDate":"2022-09-03"},{"lineNumber":6,"author":{"gitId":"malcolmang"},"content":" * E.g. {@code mark 1 3} has too many space-separated words (3).","lastModifiedDate":"2022-09-03"},{"lineNumber":7,"author":{"gitId":"malcolmang"},"content":" */","lastModifiedDate":"2022-09-03"},{"lineNumber":8,"author":{"gitId":"malcolmang"},"content":"public class TooManyWordsException extends DukeException {","lastModifiedDate":"2022-09-03"},{"lineNumber":9,"author":{"gitId":"malcolmang"},"content":"    private final String command;","lastModifiedDate":"2022-09-03"},{"lineNumber":10,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":11,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":12,"author":{"gitId":"malcolmang"},"content":"     * Constructor for exception","lastModifiedDate":"2022-09-03"},{"lineNumber":13,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":14,"author":{"gitId":"malcolmang"},"content":"     * @param command command string","lastModifiedDate":"2022-09-03"},{"lineNumber":15,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":16,"author":{"gitId":"malcolmang"},"content":"    public TooManyWordsException(String command) {","lastModifiedDate":"2022-09-03"},{"lineNumber":17,"author":{"gitId":"malcolmang"},"content":"        super();","lastModifiedDate":"2022-09-03"},{"lineNumber":18,"author":{"gitId":"malcolmang"},"content":"        this.command \u003d command;","lastModifiedDate":"2022-09-03"},{"lineNumber":19,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":20,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":21,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":22,"author":{"gitId":"malcolmang"},"content":"     * Message to be returned depending on exception.","lastModifiedDate":"2022-09-03"},{"lineNumber":23,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":24,"author":{"gitId":"malcolmang"},"content":"     * @return message string","lastModifiedDate":"2022-09-03"},{"lineNumber":25,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":26,"author":{"gitId":"malcolmang"},"content":"    @Override","lastModifiedDate":"2022-09-03"},{"lineNumber":27,"author":{"gitId":"malcolmang"},"content":"    public String getExceptionMessage() {","lastModifiedDate":"2022-09-03"},{"lineNumber":28,"author":{"gitId":"malcolmang"},"content":"        return String.format(\"The argument after \u003c%s\u003e must be a \"","lastModifiedDate":"2022-09-03"},{"lineNumber":29,"author":{"gitId":"malcolmang"},"content":"                + \"single integer. Please try again\", command);","lastModifiedDate":"2022-09-03"},{"lineNumber":30,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":31,"author":{"gitId":"malcolmang"},"content":"}","lastModifiedDate":"2022-09-03"}],"authorContributionMap":{"malcolmang":31}},{"path":"src/main/java/duke/error/exceptions/UnneededArgumentsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"malcolmang"},"content":"package duke.error.exceptions;","lastModifiedDate":"2022-09-03"},{"lineNumber":2,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":3,"author":{"gitId":"malcolmang"},"content":"/**","lastModifiedDate":"2022-09-03"},{"lineNumber":4,"author":{"gitId":"malcolmang"},"content":" * Exception subclass of {@link DukeException} for if a given string has arguments after the command","lastModifiedDate":"2022-09-03"},{"lineNumber":5,"author":{"gitId":"malcolmang"},"content":" * that should not be present.","lastModifiedDate":"2022-09-03"},{"lineNumber":6,"author":{"gitId":"malcolmang"},"content":" */","lastModifiedDate":"2022-09-03"},{"lineNumber":7,"author":{"gitId":"malcolmang"},"content":"public class UnneededArgumentsException extends DukeException {","lastModifiedDate":"2022-09-03"},{"lineNumber":8,"author":{"gitId":"malcolmang"},"content":"    private final String command;","lastModifiedDate":"2022-09-03"},{"lineNumber":9,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":10,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":11,"author":{"gitId":"malcolmang"},"content":"     * Constructor for exception","lastModifiedDate":"2022-09-03"},{"lineNumber":12,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":13,"author":{"gitId":"malcolmang"},"content":"     * @param command command string","lastModifiedDate":"2022-09-03"},{"lineNumber":14,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":15,"author":{"gitId":"malcolmang"},"content":"    public UnneededArgumentsException(String command) {","lastModifiedDate":"2022-09-03"},{"lineNumber":16,"author":{"gitId":"malcolmang"},"content":"        super();","lastModifiedDate":"2022-09-03"},{"lineNumber":17,"author":{"gitId":"malcolmang"},"content":"        this.command \u003d command;","lastModifiedDate":"2022-09-03"},{"lineNumber":18,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":19,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":20,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":21,"author":{"gitId":"malcolmang"},"content":"     * Message to be returned depending on exception.","lastModifiedDate":"2022-09-03"},{"lineNumber":22,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":23,"author":{"gitId":"malcolmang"},"content":"     * @return message string","lastModifiedDate":"2022-09-03"},{"lineNumber":24,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":25,"author":{"gitId":"malcolmang"},"content":"    @Override","lastModifiedDate":"2022-09-03"},{"lineNumber":26,"author":{"gitId":"malcolmang"},"content":"    public String getExceptionMessage() {","lastModifiedDate":"2022-09-03"},{"lineNumber":27,"author":{"gitId":"malcolmang"},"content":"        return String.format(\"There were unrecognized arguments after \"","lastModifiedDate":"2022-09-03"},{"lineNumber":28,"author":{"gitId":"malcolmang"},"content":"                + \"the \u003c%1$s\u003e command. Please try the \u003c%1$s\u003e command\"","lastModifiedDate":"2022-09-03"},{"lineNumber":29,"author":{"gitId":"malcolmang"},"content":"                + \" again by itself.\", command);","lastModifiedDate":"2022-09-03"},{"lineNumber":30,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":31,"author":{"gitId":"malcolmang"},"content":"}","lastModifiedDate":"2022-09-03"}],"authorContributionMap":{"malcolmang":31}},{"path":"src/main/java/duke/error/exceptions/subcommand/NoSubCommandArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"malcolmang"},"content":"package duke.error.exceptions.subcommand;","lastModifiedDate":"2022-09-03"},{"lineNumber":2,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":3,"author":{"gitId":"malcolmang"},"content":"/**","lastModifiedDate":"2022-09-03"},{"lineNumber":4,"author":{"gitId":"malcolmang"},"content":" * Exception subclass of {@link SubCommandException} for if there is no argument","lastModifiedDate":"2022-09-03"},{"lineNumber":5,"author":{"gitId":"malcolmang"},"content":" * after a subcommand string.","lastModifiedDate":"2022-09-03"},{"lineNumber":6,"author":{"gitId":"malcolmang"},"content":" */","lastModifiedDate":"2022-09-03"},{"lineNumber":7,"author":{"gitId":"malcolmang"},"content":"public class NoSubCommandArgumentException extends SubCommandException {","lastModifiedDate":"2022-09-03"},{"lineNumber":8,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":9,"author":{"gitId":"malcolmang"},"content":"     * Constructor for exception","lastModifiedDate":"2022-09-03"},{"lineNumber":10,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":11,"author":{"gitId":"malcolmang"},"content":"     * @param command    command string","lastModifiedDate":"2022-09-03"},{"lineNumber":12,"author":{"gitId":"malcolmang"},"content":"     * @param subCommand subcommand string","lastModifiedDate":"2022-09-03"},{"lineNumber":13,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":14,"author":{"gitId":"malcolmang"},"content":"    public NoSubCommandArgumentException(String command, String subCommand) {","lastModifiedDate":"2022-09-03"},{"lineNumber":15,"author":{"gitId":"malcolmang"},"content":"        super(command, subCommand);","lastModifiedDate":"2022-09-03"},{"lineNumber":16,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":17,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":18,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":19,"author":{"gitId":"malcolmang"},"content":"     * Message to be returned depending on exception.","lastModifiedDate":"2022-09-03"},{"lineNumber":20,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":21,"author":{"gitId":"malcolmang"},"content":"     * @return message string","lastModifiedDate":"2022-09-03"},{"lineNumber":22,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":23,"author":{"gitId":"malcolmang"},"content":"    @Override","lastModifiedDate":"2022-09-03"},{"lineNumber":24,"author":{"gitId":"malcolmang"},"content":"    public String getExceptionMessage() {","lastModifiedDate":"2022-09-03"},{"lineNumber":25,"author":{"gitId":"malcolmang"},"content":"        return String.format(\"The subcommand \u003c%2$s\u003e requires an argument after. \"","lastModifiedDate":"2022-09-03"},{"lineNumber":26,"author":{"gitId":"malcolmang"},"content":"                + \"Please try the command \u003c%1$s\u003e again with an argument after \"","lastModifiedDate":"2022-09-03"},{"lineNumber":27,"author":{"gitId":"malcolmang"},"content":"                + \"the subcommand \u003c%2$s\u003e. \", command, subCommand);","lastModifiedDate":"2022-09-03"},{"lineNumber":28,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":29,"author":{"gitId":"malcolmang"},"content":"}","lastModifiedDate":"2022-09-03"}],"authorContributionMap":{"malcolmang":29}},{"path":"src/main/java/duke/error/exceptions/subcommand/NoSubCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"malcolmang"},"content":"package duke.error.exceptions.subcommand;","lastModifiedDate":"2022-09-03"},{"lineNumber":2,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":3,"author":{"gitId":"malcolmang"},"content":"/**","lastModifiedDate":"2022-09-03"},{"lineNumber":4,"author":{"gitId":"malcolmang"},"content":" * Exception subclass of {@link SubCommandException} for if a subcommand","lastModifiedDate":"2022-09-03"},{"lineNumber":5,"author":{"gitId":"malcolmang"},"content":" * is not found.","lastModifiedDate":"2022-09-03"},{"lineNumber":6,"author":{"gitId":"malcolmang"},"content":" */","lastModifiedDate":"2022-09-03"},{"lineNumber":7,"author":{"gitId":"malcolmang"},"content":"public class NoSubCommandException extends SubCommandException {","lastModifiedDate":"2022-09-03"},{"lineNumber":8,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":9,"author":{"gitId":"malcolmang"},"content":"     * Constructor for exception","lastModifiedDate":"2022-09-03"},{"lineNumber":10,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":11,"author":{"gitId":"malcolmang"},"content":"     * @param command    command string","lastModifiedDate":"2022-09-03"},{"lineNumber":12,"author":{"gitId":"malcolmang"},"content":"     * @param subCommand subcommand string","lastModifiedDate":"2022-09-03"},{"lineNumber":13,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":14,"author":{"gitId":"malcolmang"},"content":"    public NoSubCommandException(String command, String subCommand) {","lastModifiedDate":"2022-09-03"},{"lineNumber":15,"author":{"gitId":"malcolmang"},"content":"        super(command, subCommand);","lastModifiedDate":"2022-09-03"},{"lineNumber":16,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":17,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":18,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":19,"author":{"gitId":"malcolmang"},"content":"     * Message to be returned depending on exception.","lastModifiedDate":"2022-09-03"},{"lineNumber":20,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":21,"author":{"gitId":"malcolmang"},"content":"     * @return message string","lastModifiedDate":"2022-09-03"},{"lineNumber":22,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":23,"author":{"gitId":"malcolmang"},"content":"    @Override","lastModifiedDate":"2022-09-03"},{"lineNumber":24,"author":{"gitId":"malcolmang"},"content":"    public String getExceptionMessage() {","lastModifiedDate":"2022-09-03"},{"lineNumber":25,"author":{"gitId":"malcolmang"},"content":"        return String.format(\"No valid subcommand found for command \u003c%1$s\u003e. \"","lastModifiedDate":"2022-09-03"},{"lineNumber":26,"author":{"gitId":"malcolmang"},"content":"                + \"The subcommand \u003c%2$s\u003e is required. \", command, subCommand);","lastModifiedDate":"2022-09-03"},{"lineNumber":27,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":28,"author":{"gitId":"malcolmang"},"content":"}","lastModifiedDate":"2022-09-03"}],"authorContributionMap":{"malcolmang":28}},{"path":"src/main/java/duke/error/exceptions/subcommand/SubCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"malcolmang"},"content":"package duke.error.exceptions.subcommand;","lastModifiedDate":"2022-09-03"},{"lineNumber":2,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":3,"author":{"gitId":"malcolmang"},"content":"import duke.error.exceptions.DukeException;","lastModifiedDate":"2022-09-03"},{"lineNumber":4,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":5,"author":{"gitId":"malcolmang"},"content":"/**","lastModifiedDate":"2022-09-03"},{"lineNumber":6,"author":{"gitId":"malcolmang"},"content":" * Exception subclass of {@link DukeException} that facilitates certain exceptions that have both","lastModifiedDate":"2022-09-03"},{"lineNumber":7,"author":{"gitId":"malcolmang"},"content":" * a command and subcommand string.","lastModifiedDate":"2022-09-03"},{"lineNumber":8,"author":{"gitId":"malcolmang"},"content":" */","lastModifiedDate":"2022-09-03"},{"lineNumber":9,"author":{"gitId":"malcolmang"},"content":"public abstract class SubCommandException extends DukeException {","lastModifiedDate":"2022-09-03"},{"lineNumber":10,"author":{"gitId":"malcolmang"},"content":"    protected final String command;","lastModifiedDate":"2022-09-03"},{"lineNumber":11,"author":{"gitId":"malcolmang"},"content":"    protected final String subCommand;","lastModifiedDate":"2022-09-03"},{"lineNumber":12,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":13,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":14,"author":{"gitId":"malcolmang"},"content":"     * Constructor for exception","lastModifiedDate":"2022-09-03"},{"lineNumber":15,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":16,"author":{"gitId":"malcolmang"},"content":"     * @param command    command string","lastModifiedDate":"2022-09-03"},{"lineNumber":17,"author":{"gitId":"malcolmang"},"content":"     * @param subCommand subcommand string","lastModifiedDate":"2022-09-03"},{"lineNumber":18,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":19,"author":{"gitId":"malcolmang"},"content":"    public SubCommandException(String command, String subCommand) {","lastModifiedDate":"2022-09-03"},{"lineNumber":20,"author":{"gitId":"malcolmang"},"content":"        super();","lastModifiedDate":"2022-09-03"},{"lineNumber":21,"author":{"gitId":"malcolmang"},"content":"        this.command \u003d command;","lastModifiedDate":"2022-09-03"},{"lineNumber":22,"author":{"gitId":"malcolmang"},"content":"        this.subCommand \u003d subCommand;","lastModifiedDate":"2022-09-03"},{"lineNumber":23,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":24,"author":{"gitId":"malcolmang"},"content":"}","lastModifiedDate":"2022-09-03"}],"authorContributionMap":{"malcolmang":24}},{"path":"src/main/java/duke/error/exceptions/subcommand/TooManySubCommandsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"malcolmang"},"content":"package duke.error.exceptions.subcommand;","lastModifiedDate":"2022-09-03"},{"lineNumber":2,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":3,"author":{"gitId":"malcolmang"},"content":"/**","lastModifiedDate":"2022-09-03"},{"lineNumber":4,"author":{"gitId":"malcolmang"},"content":" * Exception subclass of {@link SubCommandException} for if there is more than","lastModifiedDate":"2022-09-03"},{"lineNumber":5,"author":{"gitId":"malcolmang"},"content":" * one subcommand in string.","lastModifiedDate":"2022-09-03"},{"lineNumber":6,"author":{"gitId":"malcolmang"},"content":" */","lastModifiedDate":"2022-09-03"},{"lineNumber":7,"author":{"gitId":"malcolmang"},"content":"public class TooManySubCommandsException extends SubCommandException {","lastModifiedDate":"2022-09-03"},{"lineNumber":8,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":9,"author":{"gitId":"malcolmang"},"content":"     * Constructor for exception","lastModifiedDate":"2022-09-03"},{"lineNumber":10,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":11,"author":{"gitId":"malcolmang"},"content":"     * @param command    command string","lastModifiedDate":"2022-09-03"},{"lineNumber":12,"author":{"gitId":"malcolmang"},"content":"     * @param subCommand subcommand string","lastModifiedDate":"2022-09-03"},{"lineNumber":13,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":14,"author":{"gitId":"malcolmang"},"content":"    public TooManySubCommandsException(String command, String subCommand) {","lastModifiedDate":"2022-09-03"},{"lineNumber":15,"author":{"gitId":"malcolmang"},"content":"        super(command, subCommand);","lastModifiedDate":"2022-09-03"},{"lineNumber":16,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":17,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":18,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":19,"author":{"gitId":"malcolmang"},"content":"     * Message to be returned depending on exception.","lastModifiedDate":"2022-09-03"},{"lineNumber":20,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":21,"author":{"gitId":"malcolmang"},"content":"     * @return message string","lastModifiedDate":"2022-09-03"},{"lineNumber":22,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":23,"author":{"gitId":"malcolmang"},"content":"    @Override","lastModifiedDate":"2022-09-03"},{"lineNumber":24,"author":{"gitId":"malcolmang"},"content":"    public String getExceptionMessage() {","lastModifiedDate":"2022-09-03"},{"lineNumber":25,"author":{"gitId":"malcolmang"},"content":"        return String.format(\"There was more than one of subcommand \u003c%s\u003e \"","lastModifiedDate":"2022-09-03"},{"lineNumber":26,"author":{"gitId":"malcolmang"},"content":"                + \"detected. Command \u003c%s\u003e only takes 1 subcommand.\", subCommand, command);","lastModifiedDate":"2022-09-03"},{"lineNumber":27,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":28,"author":{"gitId":"malcolmang"},"content":"}","lastModifiedDate":"2022-09-03"}],"authorContributionMap":{"malcolmang":28}},{"path":"src/main/java/duke/io/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"malcolmang"},"content":"package duke.io;","lastModifiedDate":"2022-09-10"},{"lineNumber":2,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":3,"author":{"gitId":"malcolmang"},"content":"import duke.Duke;","lastModifiedDate":"2022-09-03"},{"lineNumber":4,"author":{"gitId":"malcolmang"},"content":"import duke.error.exceptions.NoCommandArgumentException;","lastModifiedDate":"2022-09-03"},{"lineNumber":5,"author":{"gitId":"malcolmang"},"content":"import duke.error.exceptions.TooManyWordsException;","lastModifiedDate":"2022-09-03"},{"lineNumber":6,"author":{"gitId":"malcolmang"},"content":"import duke.error.exceptions.UnneededArgumentsException;","lastModifiedDate":"2022-09-03"},{"lineNumber":7,"author":{"gitId":"malcolmang"},"content":"import duke.error.exceptions.subcommand.NoSubCommandArgumentException;","lastModifiedDate":"2022-09-03"},{"lineNumber":8,"author":{"gitId":"malcolmang"},"content":"import duke.error.exceptions.subcommand.NoSubCommandException;","lastModifiedDate":"2022-09-03"},{"lineNumber":9,"author":{"gitId":"malcolmang"},"content":"import duke.error.exceptions.subcommand.TooManySubCommandsException;","lastModifiedDate":"2022-09-03"},{"lineNumber":10,"author":{"gitId":"malcolmang"},"content":"import duke.tasks.tasktypes.DeadlineTask;","lastModifiedDate":"2022-09-03"},{"lineNumber":11,"author":{"gitId":"malcolmang"},"content":"import duke.tasks.tasktypes.EventTask;","lastModifiedDate":"2022-09-03"},{"lineNumber":12,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":13,"author":{"gitId":"malcolmang"},"content":"public class Parser {","lastModifiedDate":"2022-09-18"},{"lineNumber":14,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":15,"author":{"gitId":"malcolmang"},"content":"     * Checks if the keyword {@link Duke#COMMAND_TERMINATE} is present at front of input string","lastModifiedDate":"2022-09-03"},{"lineNumber":16,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":17,"author":{"gitId":"malcolmang"},"content":"     * @param input input string to check","lastModifiedDate":"2022-09-03"},{"lineNumber":18,"author":{"gitId":"malcolmang"},"content":"     * @return boolean, true or false","lastModifiedDate":"2022-09-03"},{"lineNumber":19,"author":{"gitId":"malcolmang"},"content":"     * @throws UnneededArgumentsException When argument is given but none are required.","lastModifiedDate":"2022-09-03"},{"lineNumber":20,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":21,"author":{"gitId":"malcolmang"},"content":"    public static boolean isTerminatingInput(String input) throws UnneededArgumentsException {","lastModifiedDate":"2022-09-03"},{"lineNumber":22,"author":{"gitId":"malcolmang"},"content":"        return stringContainsEnforceNoArgs(input, Duke.COMMAND_TERMINATE);","lastModifiedDate":"2022-09-03"},{"lineNumber":23,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":24,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":25,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":26,"author":{"gitId":"malcolmang"},"content":"     * Checks if the keyword {@link Duke#COMMAND_LIST} is present at front of input string","lastModifiedDate":"2022-09-03"},{"lineNumber":27,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":28,"author":{"gitId":"malcolmang"},"content":"     * @param input input string to check","lastModifiedDate":"2022-09-03"},{"lineNumber":29,"author":{"gitId":"malcolmang"},"content":"     * @return boolean, true or false","lastModifiedDate":"2022-09-03"},{"lineNumber":30,"author":{"gitId":"malcolmang"},"content":"     * @throws UnneededArgumentsException When argument is given but none are required.","lastModifiedDate":"2022-09-03"},{"lineNumber":31,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":32,"author":{"gitId":"malcolmang"},"content":"    public static boolean isListInput(String input) throws UnneededArgumentsException {","lastModifiedDate":"2022-09-03"},{"lineNumber":33,"author":{"gitId":"malcolmang"},"content":"        return stringContainsEnforceNoArgs(input, Duke.COMMAND_LIST);","lastModifiedDate":"2022-09-03"},{"lineNumber":34,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":35,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":36,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":37,"author":{"gitId":"malcolmang"},"content":"     * Makes sure that given input has no arguments after the command","lastModifiedDate":"2022-09-03"},{"lineNumber":38,"author":{"gitId":"malcolmang"},"content":"     * and check if input and command are equal.","lastModifiedDate":"2022-09-03"},{"lineNumber":39,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":40,"author":{"gitId":"malcolmang"},"content":"     * @param input   input string","lastModifiedDate":"2022-09-03"},{"lineNumber":41,"author":{"gitId":"malcolmang"},"content":"     * @param command command string","lastModifiedDate":"2022-09-03"},{"lineNumber":42,"author":{"gitId":"malcolmang"},"content":"     * @return true if {@code input} is equal to {@code command}.","lastModifiedDate":"2022-09-03"},{"lineNumber":43,"author":{"gitId":"malcolmang"},"content":"     * @throws UnneededArgumentsException When argument is given but none are required.","lastModifiedDate":"2022-09-03"},{"lineNumber":44,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":45,"author":{"gitId":"malcolmang"},"content":"    private static boolean stringContainsEnforceNoArgs(String input, String command) throws","lastModifiedDate":"2022-09-03"},{"lineNumber":46,"author":{"gitId":"malcolmang"},"content":"            UnneededArgumentsException {","lastModifiedDate":"2022-09-03"},{"lineNumber":47,"author":{"gitId":"malcolmang"},"content":"        if (input.equalsIgnoreCase(command)) {","lastModifiedDate":"2022-09-03"},{"lineNumber":48,"author":{"gitId":"malcolmang"},"content":"            return true;","lastModifiedDate":"2022-09-03"},{"lineNumber":49,"author":{"gitId":"malcolmang"},"content":"        } else if (stringContains(input, command)) {","lastModifiedDate":"2022-09-03"},{"lineNumber":50,"author":{"gitId":"malcolmang"},"content":"            throw new UnneededArgumentsException(command);","lastModifiedDate":"2022-09-03"},{"lineNumber":51,"author":{"gitId":"malcolmang"},"content":"        } else {","lastModifiedDate":"2022-09-03"},{"lineNumber":52,"author":{"gitId":"malcolmang"},"content":"            return false;","lastModifiedDate":"2022-09-03"},{"lineNumber":53,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-09-03"},{"lineNumber":54,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":55,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":56,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":57,"author":{"gitId":"malcolmang"},"content":"     * Checks if the given input string contains an adding command \u003cbr\u003e","lastModifiedDate":"2022-09-03"},{"lineNumber":58,"author":{"gitId":"malcolmang"},"content":"     * ({@link Duke#COMMAND_DEADLINE}, {@link Duke#COMMAND_EVENT}, {@link Duke#COMMAND_TODO})","lastModifiedDate":"2022-09-03"},{"lineNumber":59,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":60,"author":{"gitId":"malcolmang"},"content":"     * @param input input string","lastModifiedDate":"2022-09-03"},{"lineNumber":61,"author":{"gitId":"malcolmang"},"content":"     * @return true if an add command is the first word in input string, false otherwise","lastModifiedDate":"2022-09-03"},{"lineNumber":62,"author":{"gitId":"malcolmang"},"content":"     * @throws NoCommandArgumentException    If the command has no argument after it","lastModifiedDate":"2022-09-03"},{"lineNumber":63,"author":{"gitId":"malcolmang"},"content":"     * @throws NoSubCommandArgumentException If a subcommand has no argument after it","lastModifiedDate":"2022-09-03"},{"lineNumber":64,"author":{"gitId":"malcolmang"},"content":"     *                                       (for {@link DeadlineTask} and {@link EventTask})","lastModifiedDate":"2022-09-03"},{"lineNumber":65,"author":{"gitId":"malcolmang"},"content":"     * @throws NoSubCommandException         If a subcommand is not found","lastModifiedDate":"2022-09-03"},{"lineNumber":66,"author":{"gitId":"malcolmang"},"content":"     * @throws TooManySubCommandsException   If there is more than one subcommand in the input","lastModifiedDate":"2022-09-03"},{"lineNumber":67,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":68,"author":{"gitId":"malcolmang"},"content":"    public static boolean isAddInput(String input) throws","lastModifiedDate":"2022-09-03"},{"lineNumber":69,"author":{"gitId":"malcolmang"},"content":"            NoCommandArgumentException, NoSubCommandArgumentException,","lastModifiedDate":"2022-09-03"},{"lineNumber":70,"author":{"gitId":"malcolmang"},"content":"            NoSubCommandException, TooManySubCommandsException {","lastModifiedDate":"2022-09-03"},{"lineNumber":71,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":72,"author":{"gitId":"malcolmang"},"content":"        String firstWord \u003d input.split(Duke.STRING_DELIMITER, 2)[0];","lastModifiedDate":"2022-09-18"},{"lineNumber":73,"author":{"gitId":"malcolmang"},"content":"        String[] commands \u003d {Duke.COMMAND_TODO, Duke.COMMAND_DEADLINE, Duke.COMMAND_EVENT};","lastModifiedDate":"2022-09-03"},{"lineNumber":74,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":75,"author":{"gitId":"malcolmang"},"content":"        if (stringEquals(input, commands)) {","lastModifiedDate":"2022-09-03"},{"lineNumber":76,"author":{"gitId":"malcolmang"},"content":"            throw new NoCommandArgumentException(firstWord);","lastModifiedDate":"2022-09-03"},{"lineNumber":77,"author":{"gitId":"malcolmang"},"content":"        } else if (stringContains(input, Duke.COMMAND_TODO)) {","lastModifiedDate":"2022-09-03"},{"lineNumber":78,"author":{"gitId":"malcolmang"},"content":"            return true;","lastModifiedDate":"2022-09-03"},{"lineNumber":79,"author":{"gitId":"malcolmang"},"content":"        } else if (stringContains(input, Duke.COMMAND_DEADLINE)) {","lastModifiedDate":"2022-09-03"},{"lineNumber":80,"author":{"gitId":"malcolmang"},"content":"            return hasValidSubCommand(input, DeadlineTask.COMMAND_BY);","lastModifiedDate":"2022-09-03"},{"lineNumber":81,"author":{"gitId":"malcolmang"},"content":"        } else if (stringContains(input, Duke.COMMAND_EVENT)) {","lastModifiedDate":"2022-09-03"},{"lineNumber":82,"author":{"gitId":"malcolmang"},"content":"            return hasValidSubCommand(input, EventTask.COMMAND_AT);","lastModifiedDate":"2022-09-03"},{"lineNumber":83,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-09-03"},{"lineNumber":84,"author":{"gitId":"malcolmang"},"content":"        return false;","lastModifiedDate":"2022-09-03"},{"lineNumber":85,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":86,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":87,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":88,"author":{"gitId":"malcolmang"},"content":"     * Checks if a given subcommand is present in input string.","lastModifiedDate":"2022-09-03"},{"lineNumber":89,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":90,"author":{"gitId":"malcolmang"},"content":"     * @param input      given input string","lastModifiedDate":"2022-09-03"},{"lineNumber":91,"author":{"gitId":"malcolmang"},"content":"     * @param subCommand subcommand to check against","lastModifiedDate":"2022-09-03"},{"lineNumber":92,"author":{"gitId":"malcolmang"},"content":"     * @return true if the subcommand is present and valid, false if not","lastModifiedDate":"2022-09-03"},{"lineNumber":93,"author":{"gitId":"malcolmang"},"content":"     * @throws NoCommandArgumentException    If the command has no argument after it","lastModifiedDate":"2022-09-03"},{"lineNumber":94,"author":{"gitId":"malcolmang"},"content":"     * @throws NoSubCommandArgumentException If a subcommand has no argument after it","lastModifiedDate":"2022-09-03"},{"lineNumber":95,"author":{"gitId":"malcolmang"},"content":"     *                                       (for {@link DeadlineTask} and {@link EventTask})","lastModifiedDate":"2022-09-03"},{"lineNumber":96,"author":{"gitId":"malcolmang"},"content":"     * @throws NoSubCommandException         If a subcommand is not found","lastModifiedDate":"2022-09-03"},{"lineNumber":97,"author":{"gitId":"malcolmang"},"content":"     * @throws TooManySubCommandsException   If there is more than one subcommand in the input","lastModifiedDate":"2022-09-03"},{"lineNumber":98,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":99,"author":{"gitId":"malcolmang"},"content":"    private static boolean hasValidSubCommand(String input, String subCommand) throws","lastModifiedDate":"2022-09-03"},{"lineNumber":100,"author":{"gitId":"malcolmang"},"content":"            NoCommandArgumentException, NoSubCommandArgumentException,","lastModifiedDate":"2022-09-03"},{"lineNumber":101,"author":{"gitId":"malcolmang"},"content":"            NoSubCommandException, TooManySubCommandsException {","lastModifiedDate":"2022-09-03"},{"lineNumber":102,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":103,"author":{"gitId":"malcolmang"},"content":"        String firstWord \u003d input.split(Duke.STRING_DELIMITER)[0];","lastModifiedDate":"2022-09-18"},{"lineNumber":104,"author":{"gitId":"malcolmang"},"content":"        if (input.toLowerCase().contains(subCommand)) {","lastModifiedDate":"2022-09-03"},{"lineNumber":105,"author":{"gitId":"malcolmang"},"content":"            return validateCommand(input, firstWord, subCommand);","lastModifiedDate":"2022-09-03"},{"lineNumber":106,"author":{"gitId":"malcolmang"},"content":"        } else {","lastModifiedDate":"2022-09-03"},{"lineNumber":107,"author":{"gitId":"malcolmang"},"content":"            throw new NoSubCommandException(firstWord, subCommand);","lastModifiedDate":"2022-09-03"},{"lineNumber":108,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-09-03"},{"lineNumber":109,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":110,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":111,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":112,"author":{"gitId":"malcolmang"},"content":"     * Makes sure give input string is valid for a string that has both a command and","lastModifiedDate":"2022-09-03"},{"lineNumber":113,"author":{"gitId":"malcolmang"},"content":"     * subcommand.","lastModifiedDate":"2022-09-03"},{"lineNumber":114,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":115,"author":{"gitId":"malcolmang"},"content":"     * @param input      input string","lastModifiedDate":"2022-09-03"},{"lineNumber":116,"author":{"gitId":"malcolmang"},"content":"     * @param command    command string","lastModifiedDate":"2022-09-03"},{"lineNumber":117,"author":{"gitId":"malcolmang"},"content":"     * @param subCommand subcommand string","lastModifiedDate":"2022-09-03"},{"lineNumber":118,"author":{"gitId":"malcolmang"},"content":"     * @return true if input string is valid, false if not","lastModifiedDate":"2022-09-03"},{"lineNumber":119,"author":{"gitId":"malcolmang"},"content":"     * @throws NoSubCommandArgumentException If a subcommand has no argument after it","lastModifiedDate":"2022-09-03"},{"lineNumber":120,"author":{"gitId":"malcolmang"},"content":"     *                                       (for {@link DeadlineTask} and {@link EventTask})","lastModifiedDate":"2022-09-03"},{"lineNumber":121,"author":{"gitId":"malcolmang"},"content":"     * @throws TooManySubCommandsException   If there is more than one subcommand in the input","lastModifiedDate":"2022-09-03"},{"lineNumber":122,"author":{"gitId":"malcolmang"},"content":"     * @throws NoCommandArgumentException    If the command has no argument after it","lastModifiedDate":"2022-09-03"},{"lineNumber":123,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":124,"author":{"gitId":"malcolmang"},"content":"    private static boolean validateCommand(String input, String command, String subCommand) throws","lastModifiedDate":"2022-09-03"},{"lineNumber":125,"author":{"gitId":"malcolmang"},"content":"            NoSubCommandArgumentException, TooManySubCommandsException,","lastModifiedDate":"2022-09-03"},{"lineNumber":126,"author":{"gitId":"malcolmang"},"content":"            NoCommandArgumentException {","lastModifiedDate":"2022-09-03"},{"lineNumber":127,"author":{"gitId":"malcolmang"},"content":"        int length \u003d splitCount(input, subCommand);","lastModifiedDate":"2022-09-03"},{"lineNumber":128,"author":{"gitId":"malcolmang"},"content":"        if (length \u003d\u003d 2) {","lastModifiedDate":"2022-09-03"},{"lineNumber":129,"author":{"gitId":"malcolmang"},"content":"            // both command and subcommand are present","lastModifiedDate":"2022-09-03"},{"lineNumber":130,"author":{"gitId":"malcolmang"},"content":"            if (input.split(subCommand, 2)[1].contains(subCommand)) {","lastModifiedDate":"2022-09-03"},{"lineNumber":131,"author":{"gitId":"malcolmang"},"content":"                // edge case where one subcommand is in the middle and one is at the end","lastModifiedDate":"2022-09-03"},{"lineNumber":132,"author":{"gitId":"malcolmang"},"content":"                throw new TooManySubCommandsException(command, subCommand);","lastModifiedDate":"2022-09-03"},{"lineNumber":133,"author":{"gitId":"malcolmang"},"content":"            }","lastModifiedDate":"2022-09-03"},{"lineNumber":134,"author":{"gitId":"malcolmang"},"content":"            if (!input.replace(command, \"\").strip().split(subCommand)[0].isEmpty()) {","lastModifiedDate":"2022-09-03"},{"lineNumber":135,"author":{"gitId":"malcolmang"},"content":"                // subcommand is not at beginning of string, valid argument for command","lastModifiedDate":"2022-09-03"},{"lineNumber":136,"author":{"gitId":"malcolmang"},"content":"                return true;","lastModifiedDate":"2022-09-03"},{"lineNumber":137,"author":{"gitId":"malcolmang"},"content":"            } else {","lastModifiedDate":"2022-09-03"},{"lineNumber":138,"author":{"gitId":"malcolmang"},"content":"                throw new NoCommandArgumentException(command);","lastModifiedDate":"2022-09-03"},{"lineNumber":139,"author":{"gitId":"malcolmang"},"content":"            }","lastModifiedDate":"2022-09-03"},{"lineNumber":140,"author":{"gitId":"malcolmang"},"content":"        } else if (length \u003c 2) {","lastModifiedDate":"2022-09-03"},{"lineNumber":141,"author":{"gitId":"malcolmang"},"content":"            // subcommand is at end of string, no argument after","lastModifiedDate":"2022-09-03"},{"lineNumber":142,"author":{"gitId":"malcolmang"},"content":"            throw new NoSubCommandArgumentException(command, subCommand);","lastModifiedDate":"2022-09-03"},{"lineNumber":143,"author":{"gitId":"malcolmang"},"content":"        } else {","lastModifiedDate":"2022-09-03"},{"lineNumber":144,"author":{"gitId":"malcolmang"},"content":"            // more than one subcommand","lastModifiedDate":"2022-09-03"},{"lineNumber":145,"author":{"gitId":"malcolmang"},"content":"            throw new TooManySubCommandsException(command, subCommand);","lastModifiedDate":"2022-09-03"},{"lineNumber":146,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-09-03"},{"lineNumber":147,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":148,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":149,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":150,"author":{"gitId":"malcolmang"},"content":"     * Checks if the keyword {@link Duke#COMMAND_MARK} is present at front of input string","lastModifiedDate":"2022-09-03"},{"lineNumber":151,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":152,"author":{"gitId":"malcolmang"},"content":"     * @param input input string to check","lastModifiedDate":"2022-09-03"},{"lineNumber":153,"author":{"gitId":"malcolmang"},"content":"     * @return boolean, true or false","lastModifiedDate":"2022-09-03"},{"lineNumber":154,"author":{"gitId":"malcolmang"},"content":"     * @throws NoCommandArgumentException If the command has no argument after it","lastModifiedDate":"2022-09-03"},{"lineNumber":155,"author":{"gitId":"malcolmang"},"content":"     * @throws TooManyWordsException      If there is more than one space-separated","lastModifiedDate":"2022-09-03"},{"lineNumber":156,"author":{"gitId":"malcolmang"},"content":"     *                                    substring after the command.","lastModifiedDate":"2022-09-03"},{"lineNumber":157,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":158,"author":{"gitId":"malcolmang"},"content":"    public static boolean isMarkInput(String input) throws","lastModifiedDate":"2022-09-03"},{"lineNumber":159,"author":{"gitId":"malcolmang"},"content":"            NoCommandArgumentException, TooManyWordsException {","lastModifiedDate":"2022-09-03"},{"lineNumber":160,"author":{"gitId":"malcolmang"},"content":"        return stringContainsEnforceOneWord(input, Duke.COMMAND_MARK);","lastModifiedDate":"2022-09-03"},{"lineNumber":161,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":162,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":163,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":164,"author":{"gitId":"malcolmang"},"content":"     * Makes sure that the argument is \u003cb\u003eexactly one\u003c/b\u003e space-separated word after","lastModifiedDate":"2022-09-03"},{"lineNumber":165,"author":{"gitId":"malcolmang"},"content":"     * the command and checks if input contains command.","lastModifiedDate":"2022-09-03"},{"lineNumber":166,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":167,"author":{"gitId":"malcolmang"},"content":"     * @param input   input string","lastModifiedDate":"2022-09-03"},{"lineNumber":168,"author":{"gitId":"malcolmang"},"content":"     * @param command command to check equality against","lastModifiedDate":"2022-09-03"},{"lineNumber":169,"author":{"gitId":"malcolmang"},"content":"     * @return true if input has command as the first word","lastModifiedDate":"2022-09-03"},{"lineNumber":170,"author":{"gitId":"malcolmang"},"content":"     * @throws NoCommandArgumentException When no command argument is given","lastModifiedDate":"2022-09-03"},{"lineNumber":171,"author":{"gitId":"malcolmang"},"content":"     * @throws TooManyWordsException      If there is more than one space-separated","lastModifiedDate":"2022-09-03"},{"lineNumber":172,"author":{"gitId":"malcolmang"},"content":"     *                                    substring after the command.","lastModifiedDate":"2022-09-03"},{"lineNumber":173,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":174,"author":{"gitId":"malcolmang"},"content":"    public static boolean stringContainsEnforceOneWord(String input, String command) throws","lastModifiedDate":"2022-09-03"},{"lineNumber":175,"author":{"gitId":"malcolmang"},"content":"            NoCommandArgumentException, TooManyWordsException {","lastModifiedDate":"2022-09-03"},{"lineNumber":176,"author":{"gitId":"malcolmang"},"content":"        if (input.equalsIgnoreCase(command)) {","lastModifiedDate":"2022-09-03"},{"lineNumber":177,"author":{"gitId":"malcolmang"},"content":"            throw new NoCommandArgumentException(command);","lastModifiedDate":"2022-09-03"},{"lineNumber":178,"author":{"gitId":"malcolmang"},"content":"        } else if (stringContains(input, command)) {","lastModifiedDate":"2022-09-03"},{"lineNumber":179,"author":{"gitId":"malcolmang"},"content":"            if (splitCount(input, Duke.STRING_DELIMITER) !\u003d 2) {","lastModifiedDate":"2022-09-18"},{"lineNumber":180,"author":{"gitId":"malcolmang"},"content":"                throw new TooManyWordsException(command);","lastModifiedDate":"2022-09-03"},{"lineNumber":181,"author":{"gitId":"malcolmang"},"content":"            } else {","lastModifiedDate":"2022-09-03"},{"lineNumber":182,"author":{"gitId":"malcolmang"},"content":"                return true;","lastModifiedDate":"2022-09-03"},{"lineNumber":183,"author":{"gitId":"malcolmang"},"content":"            }","lastModifiedDate":"2022-09-03"},{"lineNumber":184,"author":{"gitId":"malcolmang"},"content":"        } else {","lastModifiedDate":"2022-09-03"},{"lineNumber":185,"author":{"gitId":"malcolmang"},"content":"            return false;","lastModifiedDate":"2022-09-03"},{"lineNumber":186,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-09-03"},{"lineNumber":187,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":188,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":189,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":190,"author":{"gitId":"malcolmang"},"content":"     * Checks if the keyword {@link Duke#COMMAND_UNMARK} is present at front of input string","lastModifiedDate":"2022-09-03"},{"lineNumber":191,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":192,"author":{"gitId":"malcolmang"},"content":"     * @param input input string to check","lastModifiedDate":"2022-09-03"},{"lineNumber":193,"author":{"gitId":"malcolmang"},"content":"     * @return boolean, true or false","lastModifiedDate":"2022-09-03"},{"lineNumber":194,"author":{"gitId":"malcolmang"},"content":"     * @throws NoCommandArgumentException When no command argument is given","lastModifiedDate":"2022-09-03"},{"lineNumber":195,"author":{"gitId":"malcolmang"},"content":"     * @throws TooManyWordsException      If there is more than one space-separated","lastModifiedDate":"2022-09-03"},{"lineNumber":196,"author":{"gitId":"malcolmang"},"content":"     *                                    substring after the command.","lastModifiedDate":"2022-09-03"},{"lineNumber":197,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":198,"author":{"gitId":"malcolmang"},"content":"    public static boolean isUnmarkInput(String input) throws","lastModifiedDate":"2022-09-03"},{"lineNumber":199,"author":{"gitId":"malcolmang"},"content":"            NoCommandArgumentException, TooManyWordsException {","lastModifiedDate":"2022-09-03"},{"lineNumber":200,"author":{"gitId":"malcolmang"},"content":"        return stringContainsEnforceOneWord(input, Duke.COMMAND_UNMARK);","lastModifiedDate":"2022-09-03"},{"lineNumber":201,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":202,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":203,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":204,"author":{"gitId":"malcolmang"},"content":"     * Checks if the keyword {@link Duke#COMMAND_DELETE} is present at front of input string","lastModifiedDate":"2022-09-10"},{"lineNumber":205,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":206,"author":{"gitId":"malcolmang"},"content":"     * @param input input string to check","lastModifiedDate":"2022-09-10"},{"lineNumber":207,"author":{"gitId":"malcolmang"},"content":"     * @return boolean, true or false","lastModifiedDate":"2022-09-10"},{"lineNumber":208,"author":{"gitId":"malcolmang"},"content":"     * @throws NoCommandArgumentException When no command argument is given","lastModifiedDate":"2022-09-10"},{"lineNumber":209,"author":{"gitId":"malcolmang"},"content":"     * @throws TooManyWordsException      If there is more than one space-separated","lastModifiedDate":"2022-09-10"},{"lineNumber":210,"author":{"gitId":"malcolmang"},"content":"     *                                    substring after the command.","lastModifiedDate":"2022-09-10"},{"lineNumber":211,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":212,"author":{"gitId":"malcolmang"},"content":"    public static boolean isDeleteInput(String input) throws","lastModifiedDate":"2022-09-10"},{"lineNumber":213,"author":{"gitId":"malcolmang"},"content":"            NoCommandArgumentException, TooManyWordsException {","lastModifiedDate":"2022-09-10"},{"lineNumber":214,"author":{"gitId":"malcolmang"},"content":"        return stringContainsEnforceOneWord(input, Duke.COMMAND_DELETE);","lastModifiedDate":"2022-09-10"},{"lineNumber":215,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":216,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":217,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":218,"author":{"gitId":"malcolmang"},"content":"     * Check if the given input contains a substring at the start","lastModifiedDate":"2022-09-03"},{"lineNumber":219,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":220,"author":{"gitId":"malcolmang"},"content":"     * @param input     input to be checked","lastModifiedDate":"2022-09-03"},{"lineNumber":221,"author":{"gitId":"malcolmang"},"content":"     * @param substring substring to be checked if it is contained in input","lastModifiedDate":"2022-09-03"},{"lineNumber":222,"author":{"gitId":"malcolmang"},"content":"     * @return boolean true or false","lastModifiedDate":"2022-09-03"},{"lineNumber":223,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":224,"author":{"gitId":"malcolmang"},"content":"    public static boolean stringContains(String input, String substring) {","lastModifiedDate":"2022-09-03"},{"lineNumber":225,"author":{"gitId":"malcolmang"},"content":"        return input.split(Duke.STRING_DELIMITER)[0].equalsIgnoreCase(substring);","lastModifiedDate":"2022-09-18"},{"lineNumber":226,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":227,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":228,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":229,"author":{"gitId":"malcolmang"},"content":"     * Check if the given input is equal to any substring in a given array","lastModifiedDate":"2022-09-03"},{"lineNumber":230,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":231,"author":{"gitId":"malcolmang"},"content":"     * @param input      input to be checked","lastModifiedDate":"2022-09-03"},{"lineNumber":232,"author":{"gitId":"malcolmang"},"content":"     * @param substrings array of substrings to be checked for equality","lastModifiedDate":"2022-09-03"},{"lineNumber":233,"author":{"gitId":"malcolmang"},"content":"     * @return boolean true or false","lastModifiedDate":"2022-09-03"},{"lineNumber":234,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":235,"author":{"gitId":"malcolmang"},"content":"    public static boolean stringEquals(String input, String[] substrings) {","lastModifiedDate":"2022-09-03"},{"lineNumber":236,"author":{"gitId":"malcolmang"},"content":"        for (String substring : substrings) {","lastModifiedDate":"2022-09-03"},{"lineNumber":237,"author":{"gitId":"malcolmang"},"content":"            if (input.equalsIgnoreCase(substring)) {","lastModifiedDate":"2022-09-03"},{"lineNumber":238,"author":{"gitId":"malcolmang"},"content":"                return true;","lastModifiedDate":"2022-09-03"},{"lineNumber":239,"author":{"gitId":"malcolmang"},"content":"            }","lastModifiedDate":"2022-09-03"},{"lineNumber":240,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-09-03"},{"lineNumber":241,"author":{"gitId":"malcolmang"},"content":"        return false;","lastModifiedDate":"2022-09-03"},{"lineNumber":242,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":243,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":244,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":245,"author":{"gitId":"malcolmang"},"content":"     * Checks if given input string is an integer.","lastModifiedDate":"2022-09-03"},{"lineNumber":246,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":247,"author":{"gitId":"malcolmang"},"content":"     * @param input input string to be checked","lastModifiedDate":"2022-09-03"},{"lineNumber":248,"author":{"gitId":"malcolmang"},"content":"     * @return true if input string can be parsed as an integer, false if not","lastModifiedDate":"2022-09-03"},{"lineNumber":249,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":250,"author":{"gitId":"malcolmang"},"content":"    public static boolean isInteger(String input) {","lastModifiedDate":"2022-09-03"},{"lineNumber":251,"author":{"gitId":"malcolmang"},"content":"        try {","lastModifiedDate":"2022-09-03"},{"lineNumber":252,"author":{"gitId":"malcolmang"},"content":"            Integer.parseInt(input);","lastModifiedDate":"2022-09-03"},{"lineNumber":253,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":254,"author":{"gitId":"malcolmang"},"content":"        catch (NumberFormatException e) {","lastModifiedDate":"2022-09-18"},{"lineNumber":255,"author":{"gitId":"malcolmang"},"content":"            return false;","lastModifiedDate":"2022-09-03"},{"lineNumber":256,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-09-03"},{"lineNumber":257,"author":{"gitId":"malcolmang"},"content":"        return true;","lastModifiedDate":"2022-09-03"},{"lineNumber":258,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":259,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":260,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":261,"author":{"gitId":"malcolmang"},"content":"     * Counts the length of an array after a {@link String#split} operation.","lastModifiedDate":"2022-09-03"},{"lineNumber":262,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":263,"author":{"gitId":"malcolmang"},"content":"     * @param input     input string to be split","lastModifiedDate":"2022-09-03"},{"lineNumber":264,"author":{"gitId":"malcolmang"},"content":"     * @param separator substring that input should be split with","lastModifiedDate":"2022-09-03"},{"lineNumber":265,"author":{"gitId":"malcolmang"},"content":"     * @return length of split array","lastModifiedDate":"2022-09-03"},{"lineNumber":266,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":267,"author":{"gitId":"malcolmang"},"content":"    public static int splitCount(String input, String separator) {","lastModifiedDate":"2022-09-03"},{"lineNumber":268,"author":{"gitId":"malcolmang"},"content":"        return input.split(separator).length;","lastModifiedDate":"2022-09-03"},{"lineNumber":269,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":270,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":271,"author":{"gitId":"malcolmang"},"content":"}","lastModifiedDate":"2022-09-03"}],"authorContributionMap":{"malcolmang":271}},{"path":"src/main/java/duke/io/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"malcolmang"},"content":"package duke.io;","lastModifiedDate":"2022-09-10"},{"lineNumber":2,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":3,"author":{"gitId":"malcolmang"},"content":"import duke.Duke;","lastModifiedDate":"2022-09-10"},{"lineNumber":4,"author":{"gitId":"malcolmang"},"content":"import duke.error.exceptions.SaveFileFormatException;","lastModifiedDate":"2022-09-10"},{"lineNumber":5,"author":{"gitId":"malcolmang"},"content":"import duke.tasks.Task;","lastModifiedDate":"2022-09-10"},{"lineNumber":6,"author":{"gitId":"malcolmang"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2022-09-10"},{"lineNumber":7,"author":{"gitId":"malcolmang"},"content":"import duke.tasks.tasktypes.DeadlineTask;","lastModifiedDate":"2022-09-10"},{"lineNumber":8,"author":{"gitId":"malcolmang"},"content":"import duke.tasks.tasktypes.EventTask;","lastModifiedDate":"2022-09-10"},{"lineNumber":9,"author":{"gitId":"malcolmang"},"content":"import duke.tasks.tasktypes.ToDoTask;","lastModifiedDate":"2022-09-10"},{"lineNumber":10,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":11,"author":{"gitId":"malcolmang"},"content":"import java.io.File;","lastModifiedDate":"2022-09-10"},{"lineNumber":12,"author":{"gitId":"malcolmang"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-09-10"},{"lineNumber":13,"author":{"gitId":"malcolmang"},"content":"import java.io.IOException;","lastModifiedDate":"2022-09-10"},{"lineNumber":14,"author":{"gitId":"malcolmang"},"content":"import java.io.Writer;","lastModifiedDate":"2022-09-10"},{"lineNumber":15,"author":{"gitId":"malcolmang"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2022-09-10"},{"lineNumber":16,"author":{"gitId":"malcolmang"},"content":"import java.util.List;","lastModifiedDate":"2022-09-10"},{"lineNumber":17,"author":{"gitId":"malcolmang"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-09-10"},{"lineNumber":18,"author":{"gitId":"malcolmang"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2022-09-10"},{"lineNumber":19,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":20,"author":{"gitId":"malcolmang"},"content":"/**","lastModifiedDate":"2022-09-10"},{"lineNumber":21,"author":{"gitId":"malcolmang"},"content":" * Class for managing loading/saving files. Also handles parsing for text files.","lastModifiedDate":"2022-09-10"},{"lineNumber":22,"author":{"gitId":"malcolmang"},"content":" */","lastModifiedDate":"2022-09-10"},{"lineNumber":23,"author":{"gitId":"malcolmang"},"content":"public class Storage {","lastModifiedDate":"2022-09-18"},{"lineNumber":24,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":25,"author":{"gitId":"malcolmang"},"content":"     * Location of the directory where the file sits.","lastModifiedDate":"2022-09-18"},{"lineNumber":26,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":27,"author":{"gitId":"malcolmang"},"content":"    private static final String FILE_DIRECTORY_LOCATION \u003d Paths.get(\".\", \"save\").toString();","lastModifiedDate":"2022-09-10"},{"lineNumber":28,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":29,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":30,"author":{"gitId":"malcolmang"},"content":"     * Name of file","lastModifiedDate":"2022-09-18"},{"lineNumber":31,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":32,"author":{"gitId":"malcolmang"},"content":"    private static final String FILE_NAME \u003d \"duke\" + \".txt\";","lastModifiedDate":"2022-09-10"},{"lineNumber":33,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":34,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":35,"author":{"gitId":"malcolmang"},"content":"     * Full (relative) path pointing to file","lastModifiedDate":"2022-09-18"},{"lineNumber":36,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":37,"author":{"gitId":"malcolmang"},"content":"    private static final String FILE_PATH \u003d Paths.get(FILE_DIRECTORY_LOCATION, FILE_NAME).toString();","lastModifiedDate":"2022-09-10"},{"lineNumber":38,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":39,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":40,"author":{"gitId":"malcolmang"},"content":"     * {@link File} item initialized from {@link Storage#FILE_PATH}","lastModifiedDate":"2022-09-18"},{"lineNumber":41,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":42,"author":{"gitId":"malcolmang"},"content":"    private static final File file \u003d new File(FILE_PATH);","lastModifiedDate":"2022-09-10"},{"lineNumber":43,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":44,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":45,"author":{"gitId":"malcolmang"},"content":"     * Separator to be used for loading/saving files","lastModifiedDate":"2022-09-18"},{"lineNumber":46,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":47,"author":{"gitId":"malcolmang"},"content":"    private static final String SEPARATOR \u003d \"|\";","lastModifiedDate":"2022-09-10"},{"lineNumber":48,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":49,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":50,"author":{"gitId":"malcolmang"},"content":"     * Boolean flag that triggers if file was loaded.","lastModifiedDate":"2022-09-18"},{"lineNumber":51,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":52,"author":{"gitId":"malcolmang"},"content":"    private static boolean isLoaded \u003d false;","lastModifiedDate":"2022-09-18"},{"lineNumber":53,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-11"},{"lineNumber":54,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":55,"author":{"gitId":"malcolmang"},"content":"     * Loads and populates a {@link TaskList} instance if the file exists. If not,","lastModifiedDate":"2022-09-10"},{"lineNumber":56,"author":{"gitId":"malcolmang"},"content":"     * returns an empty {@link TaskList} item.","lastModifiedDate":"2022-09-10"},{"lineNumber":57,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":58,"author":{"gitId":"malcolmang"},"content":"     * @return {@link TaskList} instance, empty if no file exists","lastModifiedDate":"2022-09-10"},{"lineNumber":59,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":60,"author":{"gitId":"malcolmang"},"content":"    public static TaskList loadTaskList() {","lastModifiedDate":"2022-09-18"},{"lineNumber":61,"author":{"gitId":"malcolmang"},"content":"        if (file.exists()) {","lastModifiedDate":"2022-09-10"},{"lineNumber":62,"author":{"gitId":"malcolmang"},"content":"            return parseFile();","lastModifiedDate":"2022-09-10"},{"lineNumber":63,"author":{"gitId":"malcolmang"},"content":"        } else {","lastModifiedDate":"2022-09-10"},{"lineNumber":64,"author":{"gitId":"malcolmang"},"content":"            File directory \u003d new File(FILE_DIRECTORY_LOCATION);","lastModifiedDate":"2022-09-11"},{"lineNumber":65,"author":{"gitId":"malcolmang"},"content":"            directory.mkdir();","lastModifiedDate":"2022-09-11"},{"lineNumber":66,"author":{"gitId":"malcolmang"},"content":"            return new TaskList();","lastModifiedDate":"2022-09-10"},{"lineNumber":67,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-09-10"},{"lineNumber":68,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":69,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":70,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":71,"author":{"gitId":"malcolmang"},"content":"     * Parses text file and loads information into a {@link TaskList} instance.","lastModifiedDate":"2022-09-10"},{"lineNumber":72,"author":{"gitId":"malcolmang"},"content":"     * If an error is thrown, just load whatever info was already loaded and","lastModifiedDate":"2022-09-10"},{"lineNumber":73,"author":{"gitId":"malcolmang"},"content":"     * delete the original (error-prone) file.","lastModifiedDate":"2022-09-10"},{"lineNumber":74,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":75,"author":{"gitId":"malcolmang"},"content":"     * @return {@link TaskList} instance","lastModifiedDate":"2022-09-10"},{"lineNumber":76,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":77,"author":{"gitId":"malcolmang"},"content":"    private static TaskList parseFile() {","lastModifiedDate":"2022-09-10"},{"lineNumber":78,"author":{"gitId":"malcolmang"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2022-09-10"},{"lineNumber":79,"author":{"gitId":"malcolmang"},"content":"        Scanner fileScanner \u003d null;","lastModifiedDate":"2022-09-10"},{"lineNumber":80,"author":{"gitId":"malcolmang"},"content":"        try {","lastModifiedDate":"2022-09-10"},{"lineNumber":81,"author":{"gitId":"malcolmang"},"content":"            fileScanner \u003d new Scanner(file);","lastModifiedDate":"2022-09-10"},{"lineNumber":82,"author":{"gitId":"malcolmang"},"content":"            while (fileScanner.hasNextLine()) {","lastModifiedDate":"2022-09-10"},{"lineNumber":83,"author":{"gitId":"malcolmang"},"content":"                String row \u003d fileScanner.nextLine();","lastModifiedDate":"2022-09-10"},{"lineNumber":84,"author":{"gitId":"malcolmang"},"content":"                tasks.addItem(parseRow(row));","lastModifiedDate":"2022-09-10"},{"lineNumber":85,"author":{"gitId":"malcolmang"},"content":"            }","lastModifiedDate":"2022-09-10"},{"lineNumber":86,"author":{"gitId":"malcolmang"},"content":"            fileScanner.close();","lastModifiedDate":"2022-09-10"},{"lineNumber":87,"author":{"gitId":"malcolmang"},"content":"            isLoaded \u003d true;","lastModifiedDate":"2022-09-18"},{"lineNumber":88,"author":{"gitId":"malcolmang"},"content":"            return tasks;","lastModifiedDate":"2022-09-10"},{"lineNumber":89,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":90,"author":{"gitId":"malcolmang"},"content":"        catch (IOException e) {","lastModifiedDate":"2022-09-18"},{"lineNumber":91,"author":{"gitId":"malcolmang"},"content":"            // if file has an issue with opening/closing, return empty task list and delete file","lastModifiedDate":"2022-09-10"},{"lineNumber":92,"author":{"gitId":"malcolmang"},"content":"            fileScanner.close();","lastModifiedDate":"2022-09-10"},{"lineNumber":93,"author":{"gitId":"malcolmang"},"content":"            file.delete();","lastModifiedDate":"2022-09-10"},{"lineNumber":94,"author":{"gitId":"malcolmang"},"content":"            return new TaskList();","lastModifiedDate":"2022-09-10"},{"lineNumber":95,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":96,"author":{"gitId":"malcolmang"},"content":"        catch (SaveFileFormatException e) {","lastModifiedDate":"2022-09-18"},{"lineNumber":97,"author":{"gitId":"malcolmang"},"content":"            // return whatever is currently available and delete file","lastModifiedDate":"2022-09-10"},{"lineNumber":98,"author":{"gitId":"malcolmang"},"content":"            fileScanner.close();","lastModifiedDate":"2022-09-10"},{"lineNumber":99,"author":{"gitId":"malcolmang"},"content":"            file.delete();","lastModifiedDate":"2022-09-10"},{"lineNumber":100,"author":{"gitId":"malcolmang"},"content":"            return tasks;","lastModifiedDate":"2022-09-10"},{"lineNumber":101,"author":{"gitId":"malcolmang"},"content":"        } finally {","lastModifiedDate":"2022-09-10"},{"lineNumber":102,"author":{"gitId":"malcolmang"},"content":"            fileScanner.close();","lastModifiedDate":"2022-09-10"},{"lineNumber":103,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-09-10"},{"lineNumber":104,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":105,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":106,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":107,"author":{"gitId":"malcolmang"},"content":"     * Parses individual row of save file into a {@link Task} subclass.","lastModifiedDate":"2022-09-10"},{"lineNumber":108,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":109,"author":{"gitId":"malcolmang"},"content":"     * @param input Input string from save file","lastModifiedDate":"2022-09-10"},{"lineNumber":110,"author":{"gitId":"malcolmang"},"content":"     * @return a {@link Task} subclass instance","lastModifiedDate":"2022-09-10"},{"lineNumber":111,"author":{"gitId":"malcolmang"},"content":"     * @throws SaveFileFormatException If there\u0027s any kind of error in the format","lastModifiedDate":"2022-09-10"},{"lineNumber":112,"author":{"gitId":"malcolmang"},"content":"     *                                 (or an unrecognised command) in the save file","lastModifiedDate":"2022-09-10"},{"lineNumber":113,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":114,"author":{"gitId":"malcolmang"},"content":"    private static Task parseRow(String input) throws SaveFileFormatException {","lastModifiedDate":"2022-09-10"},{"lineNumber":115,"author":{"gitId":"malcolmang"},"content":"        String[] sections \u003d input.split(Pattern.quote(SEPARATOR));","lastModifiedDate":"2022-09-10"},{"lineNumber":116,"author":{"gitId":"malcolmang"},"content":"        String command \u003d sections[0];","lastModifiedDate":"2022-09-10"},{"lineNumber":117,"author":{"gitId":"malcolmang"},"content":"        if (ToDoTask.isCommand(command)) {","lastModifiedDate":"2022-09-10"},{"lineNumber":118,"author":{"gitId":"malcolmang"},"content":"            return ToDoTask.parseToDoTask(input);","lastModifiedDate":"2022-09-10"},{"lineNumber":119,"author":{"gitId":"malcolmang"},"content":"        } else if (DeadlineTask.isCommand(command)) {","lastModifiedDate":"2022-09-10"},{"lineNumber":120,"author":{"gitId":"malcolmang"},"content":"            return DeadlineTask.parseDeadlineTask(input);","lastModifiedDate":"2022-09-10"},{"lineNumber":121,"author":{"gitId":"malcolmang"},"content":"        } else if (EventTask.isCommand(command)) {","lastModifiedDate":"2022-09-10"},{"lineNumber":122,"author":{"gitId":"malcolmang"},"content":"            return EventTask.parseEventTask(input);","lastModifiedDate":"2022-09-10"},{"lineNumber":123,"author":{"gitId":"malcolmang"},"content":"        } else {","lastModifiedDate":"2022-09-10"},{"lineNumber":124,"author":{"gitId":"malcolmang"},"content":"            throw new SaveFileFormatException();","lastModifiedDate":"2022-09-10"},{"lineNumber":125,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-09-10"},{"lineNumber":126,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":127,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":128,"author":{"gitId":"malcolmang"},"content":"    public static String getSeparator() {","lastModifiedDate":"2022-09-10"},{"lineNumber":129,"author":{"gitId":"malcolmang"},"content":"        return SEPARATOR;","lastModifiedDate":"2022-09-10"},{"lineNumber":130,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":131,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":132,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":133,"author":{"gitId":"malcolmang"},"content":"     * Concatenates strings in a {@link List}, with separators of","lastModifiedDate":"2022-09-10"},{"lineNumber":134,"author":{"gitId":"malcolmang"},"content":"     * value {@link Storage#SEPARATOR} in between.","lastModifiedDate":"2022-09-18"},{"lineNumber":135,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":136,"author":{"gitId":"malcolmang"},"content":"     * @param strings list of strings to be combined","lastModifiedDate":"2022-09-10"},{"lineNumber":137,"author":{"gitId":"malcolmang"},"content":"     * @return Properly formatted string","lastModifiedDate":"2022-09-10"},{"lineNumber":138,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":139,"author":{"gitId":"malcolmang"},"content":"    public static String formatSeparatedString(List\u003cString\u003e strings) {","lastModifiedDate":"2022-09-10"},{"lineNumber":140,"author":{"gitId":"malcolmang"},"content":"        String bufferString \u003d \"\";","lastModifiedDate":"2022-09-10"},{"lineNumber":141,"author":{"gitId":"malcolmang"},"content":"        for (String string : strings) {","lastModifiedDate":"2022-09-10"},{"lineNumber":142,"author":{"gitId":"malcolmang"},"content":"            bufferString +\u003d string + Duke.STRING_DELIMITER + Storage.getSeparator() + Duke.STRING_DELIMITER;","lastModifiedDate":"2022-09-18"},{"lineNumber":143,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-09-10"},{"lineNumber":144,"author":{"gitId":"malcolmang"},"content":"        return bufferString.substring(0, bufferString.length() - 3);","lastModifiedDate":"2022-09-10"},{"lineNumber":145,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":146,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":147,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":148,"author":{"gitId":"malcolmang"},"content":"     * Saves {@link TaskList} to specified file path as a {@code txt} file.","lastModifiedDate":"2022-09-10"},{"lineNumber":149,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":150,"author":{"gitId":"malcolmang"},"content":"    public static void save() {","lastModifiedDate":"2022-09-10"},{"lineNumber":151,"author":{"gitId":"malcolmang"},"content":"        try (Writer fileWriter \u003d new FileWriter(file)) {","lastModifiedDate":"2022-09-10"},{"lineNumber":152,"author":{"gitId":"malcolmang"},"content":"            if (!file.exists()) {","lastModifiedDate":"2022-09-10"},{"lineNumber":153,"author":{"gitId":"malcolmang"},"content":"                file.createNewFile();","lastModifiedDate":"2022-09-10"},{"lineNumber":154,"author":{"gitId":"malcolmang"},"content":"            }","lastModifiedDate":"2022-09-10"},{"lineNumber":155,"author":{"gitId":"malcolmang"},"content":"            fileWriter.write(Duke.TASK_LIST.getSaveString());","lastModifiedDate":"2022-09-10"},{"lineNumber":156,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":157,"author":{"gitId":"malcolmang"},"content":"        catch (IOException e) {","lastModifiedDate":"2022-09-18"},{"lineNumber":158,"author":{"gitId":"malcolmang"},"content":"            // If cannot write, just delete file.","lastModifiedDate":"2022-09-10"},{"lineNumber":159,"author":{"gitId":"malcolmang"},"content":"            file.delete();","lastModifiedDate":"2022-09-10"},{"lineNumber":160,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-09-10"},{"lineNumber":161,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":162,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":163,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":164,"author":{"gitId":"malcolmang"},"content":"     * Getter for file path.","lastModifiedDate":"2022-09-10"},{"lineNumber":165,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":166,"author":{"gitId":"malcolmang"},"content":"     * @return file path string","lastModifiedDate":"2022-09-10"},{"lineNumber":167,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":168,"author":{"gitId":"malcolmang"},"content":"    public static String getPath() {","lastModifiedDate":"2022-09-10"},{"lineNumber":169,"author":{"gitId":"malcolmang"},"content":"        return FILE_PATH;","lastModifiedDate":"2022-09-10"},{"lineNumber":170,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":171,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-11"},{"lineNumber":172,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-11"},{"lineNumber":173,"author":{"gitId":"malcolmang"},"content":"     * Getter for {@link Storage#isLoaded} field.","lastModifiedDate":"2022-09-18"},{"lineNumber":174,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-11"},{"lineNumber":175,"author":{"gitId":"malcolmang"},"content":"     * @return true if a file was loaded.","lastModifiedDate":"2022-09-11"},{"lineNumber":176,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-11"},{"lineNumber":177,"author":{"gitId":"malcolmang"},"content":"    public static boolean isLoaded() {","lastModifiedDate":"2022-09-18"},{"lineNumber":178,"author":{"gitId":"malcolmang"},"content":"        return isLoaded;","lastModifiedDate":"2022-09-18"},{"lineNumber":179,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-11"},{"lineNumber":180,"author":{"gitId":"malcolmang"},"content":"}","lastModifiedDate":"2022-09-10"}],"authorContributionMap":{"malcolmang":180}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"malcolmang"},"content":"package duke.tasks;","lastModifiedDate":"2022-09-03"},{"lineNumber":2,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":3,"author":{"gitId":"malcolmang"},"content":"import duke.error.exceptions.NoStateChangeException;","lastModifiedDate":"2022-09-03"},{"lineNumber":4,"author":{"gitId":"malcolmang"},"content":"import duke.ui.DialogBox;","lastModifiedDate":"2022-09-03"},{"lineNumber":5,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":6,"author":{"gitId":"malcolmang"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-09-10"},{"lineNumber":7,"author":{"gitId":"malcolmang"},"content":"import java.util.List;","lastModifiedDate":"2022-09-10"},{"lineNumber":8,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":9,"author":{"gitId":"malcolmang"},"content":"/**","lastModifiedDate":"2022-08-27"},{"lineNumber":10,"author":{"gitId":"malcolmang"},"content":" * Abstract superclass that items in {@link TaskList} inherit from. \u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2022-09-10"},{"lineNumber":11,"author":{"gitId":"malcolmang"},"content":" * \u003cb\u003eSubclasses: \u003c/b\u003e","lastModifiedDate":"2022-08-27"},{"lineNumber":12,"author":{"gitId":"malcolmang"},"content":" * \u003cul\u003e\u003cli\u003e{@link duke.tasks.tasktypes.ToDoTask}\u003c/li\u003e \u003cli\u003e{@link duke.tasks.tasktypes.DeadlineTask}\u003c/li\u003e","lastModifiedDate":"2022-09-03"},{"lineNumber":13,"author":{"gitId":"malcolmang"},"content":" * \u003cli\u003e{@link duke.tasks.tasktypes.EventTask}\u003c/li\u003e\u003c/ul\u003e","lastModifiedDate":"2022-09-03"},{"lineNumber":14,"author":{"gitId":"malcolmang"},"content":" */","lastModifiedDate":"2022-08-27"},{"lineNumber":15,"author":{"gitId":"malcolmang"},"content":"public abstract class Task {","lastModifiedDate":"2022-08-27"},{"lineNumber":16,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"malcolmang"},"content":"     * Status icon","lastModifiedDate":"2022-09-18"},{"lineNumber":18,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":19,"author":{"gitId":"malcolmang"},"content":"    private static final String STATUS_ICON \u003d \"■\";","lastModifiedDate":"2022-09-10"},{"lineNumber":20,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":21,"author":{"gitId":"malcolmang"},"content":"     * Text that each item contains","lastModifiedDate":"2022-09-18"},{"lineNumber":22,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":23,"author":{"gitId":"malcolmang"},"content":"    private final String TEXT;","lastModifiedDate":"2022-08-27"},{"lineNumber":24,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":25,"author":{"gitId":"malcolmang"},"content":"     * Field that tracks if task is marked as done or not","lastModifiedDate":"2022-09-18"},{"lineNumber":26,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":27,"author":{"gitId":"malcolmang"},"content":"    private boolean isDone;","lastModifiedDate":"2022-08-27"},{"lineNumber":28,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":29,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-08-27"},{"lineNumber":30,"author":{"gitId":"malcolmang"},"content":"     * Constructor that initializes {@link Task#TEXT} and","lastModifiedDate":"2022-08-27"},{"lineNumber":31,"author":{"gitId":"malcolmang"},"content":"     * {@link Task#isDone} field.","lastModifiedDate":"2022-08-27"},{"lineNumber":32,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-08-27"},{"lineNumber":33,"author":{"gitId":"malcolmang"},"content":"     * @param text text of the item","lastModifiedDate":"2022-08-27"},{"lineNumber":34,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-08-27"},{"lineNumber":35,"author":{"gitId":"malcolmang"},"content":"    public Task(String text) {","lastModifiedDate":"2022-08-27"},{"lineNumber":36,"author":{"gitId":"malcolmang"},"content":"        TEXT \u003d text.trim();","lastModifiedDate":"2022-08-27"},{"lineNumber":37,"author":{"gitId":"malcolmang"},"content":"        isDone \u003d false;","lastModifiedDate":"2022-08-27"},{"lineNumber":38,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":39,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":40,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":41,"author":{"gitId":"malcolmang"},"content":"     * Getter for the {@link Task#STATUS_ICON} icon that denotes if a task is done or not","lastModifiedDate":"2022-09-10"},{"lineNumber":42,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":43,"author":{"gitId":"malcolmang"},"content":"     * @return String","lastModifiedDate":"2022-09-10"},{"lineNumber":44,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":45,"author":{"gitId":"malcolmang"},"content":"    public static String getStatusIcon() {","lastModifiedDate":"2022-09-10"},{"lineNumber":46,"author":{"gitId":"malcolmang"},"content":"        return STATUS_ICON;","lastModifiedDate":"2022-09-10"},{"lineNumber":47,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":48,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":49,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-08-27"},{"lineNumber":50,"author":{"gitId":"malcolmang"},"content":"     * Parses Task item as string. \u003cbr\u003eExample: \u003ccode\u003e[ ][T] go grocery shopping\u003c/code\u003e","lastModifiedDate":"2022-08-27"},{"lineNumber":51,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-08-27"},{"lineNumber":52,"author":{"gitId":"malcolmang"},"content":"     * @return item expressed as a string","lastModifiedDate":"2022-08-27"},{"lineNumber":53,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-08-27"},{"lineNumber":54,"author":{"gitId":"malcolmang"},"content":"    public String toString() {","lastModifiedDate":"2022-08-27"},{"lineNumber":55,"author":{"gitId":"malcolmang"},"content":"        return \"[\" + getStatusIconConditional() + \"]\" + \"[\" + getTypeIcon() + \"] \" + TEXT","lastModifiedDate":"2022-09-10"},{"lineNumber":56,"author":{"gitId":"malcolmang"},"content":"                + DialogBox.rightAlign(getPostFix());","lastModifiedDate":"2022-08-27"},{"lineNumber":57,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":58,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":59,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":60,"author":{"gitId":"malcolmang"},"content":"     * Throws an exception if isDone does not change (already marked/unmarked)","lastModifiedDate":"2022-09-03"},{"lineNumber":61,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":62,"author":{"gitId":"malcolmang"},"content":"     * @param isDone state to change {@link Task#isDone} to.","lastModifiedDate":"2022-09-03"},{"lineNumber":63,"author":{"gitId":"malcolmang"},"content":"     * @throws NoStateChangeException If task is already the same state as the desired change","lastModifiedDate":"2022-09-03"},{"lineNumber":64,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":65,"author":{"gitId":"malcolmang"},"content":"    public void setDone(boolean isDone) throws NoStateChangeException {","lastModifiedDate":"2022-09-03"},{"lineNumber":66,"author":{"gitId":"malcolmang"},"content":"        if (this.isDone \u003d\u003d isDone) {","lastModifiedDate":"2022-09-03"},{"lineNumber":67,"author":{"gitId":"malcolmang"},"content":"            throw new NoStateChangeException(isDone);","lastModifiedDate":"2022-09-03"},{"lineNumber":68,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-09-03"},{"lineNumber":69,"author":{"gitId":"malcolmang"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2022-08-27"},{"lineNumber":70,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":71,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":72,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":73,"author":{"gitId":"malcolmang"},"content":"     * Returns text of task.","lastModifiedDate":"2022-09-03"},{"lineNumber":74,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":75,"author":{"gitId":"malcolmang"},"content":"     * @return text of task expressed as a String","lastModifiedDate":"2022-09-03"},{"lineNumber":76,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":77,"author":{"gitId":"malcolmang"},"content":"    public String getText() {","lastModifiedDate":"2022-08-27"},{"lineNumber":78,"author":{"gitId":"malcolmang"},"content":"        return TEXT;","lastModifiedDate":"2022-08-27"},{"lineNumber":79,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":80,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":81,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-08-27"},{"lineNumber":82,"author":{"gitId":"malcolmang"},"content":"     * Overridden in the case of certain methods that attach","lastModifiedDate":"2022-08-27"},{"lineNumber":83,"author":{"gitId":"malcolmang"},"content":"     * other comments to the back of tasks.","lastModifiedDate":"2022-08-27"},{"lineNumber":84,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-08-27"},{"lineNumber":85,"author":{"gitId":"malcolmang"},"content":"     * @return string to be postfixed at the end","lastModifiedDate":"2022-08-27"},{"lineNumber":86,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-08-27"},{"lineNumber":87,"author":{"gitId":"malcolmang"},"content":"    protected String getPostFix() {","lastModifiedDate":"2022-08-27"},{"lineNumber":88,"author":{"gitId":"malcolmang"},"content":"        return \"\";","lastModifiedDate":"2022-08-27"},{"lineNumber":89,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":90,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":91,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":92,"author":{"gitId":"malcolmang"},"content":"     * Abstract method for the type icon of each subclass.","lastModifiedDate":"2022-09-10"},{"lineNumber":93,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":94,"author":{"gitId":"malcolmang"},"content":"    protected abstract String getTypeIcon();","lastModifiedDate":"2022-09-10"},{"lineNumber":95,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":96,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-03"},{"lineNumber":97,"author":{"gitId":"malcolmang"},"content":"     * Status icon that changes when item is marked done or not done.","lastModifiedDate":"2022-09-03"},{"lineNumber":98,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":99,"author":{"gitId":"malcolmang"},"content":"     * @return String of status icon","lastModifiedDate":"2022-09-03"},{"lineNumber":100,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-03"},{"lineNumber":101,"author":{"gitId":"malcolmang"},"content":"    protected String getStatusIconConditional() {","lastModifiedDate":"2022-09-10"},{"lineNumber":102,"author":{"gitId":"malcolmang"},"content":"        return isDone ? STATUS_ICON : \" \";","lastModifiedDate":"2022-09-10"},{"lineNumber":103,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":104,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":105,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-11"},{"lineNumber":106,"author":{"gitId":"malcolmang"},"content":"     * Status icon for saving (because ■ doesn\u0027t play nice with reading/writing)","lastModifiedDate":"2022-09-11"},{"lineNumber":107,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-11"},{"lineNumber":108,"author":{"gitId":"malcolmang"},"content":"     * @return String of status icon","lastModifiedDate":"2022-09-11"},{"lineNumber":109,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-11"},{"lineNumber":110,"author":{"gitId":"malcolmang"},"content":"    protected String getStatusIconSave() {","lastModifiedDate":"2022-09-11"},{"lineNumber":111,"author":{"gitId":"malcolmang"},"content":"        return isDone ? \"X\" : \" \";","lastModifiedDate":"2022-09-11"},{"lineNumber":112,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-11"},{"lineNumber":113,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-11"},{"lineNumber":114,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":115,"author":{"gitId":"malcolmang"},"content":"     * Returns {@link List} with relevant details for saving.","lastModifiedDate":"2022-09-10"},{"lineNumber":116,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":117,"author":{"gitId":"malcolmang"},"content":"     * @return List of strings containing details of {@link Task} instance.","lastModifiedDate":"2022-09-10"},{"lineNumber":118,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":119,"author":{"gitId":"malcolmang"},"content":"    public List\u003cString\u003e getSaveItems() {","lastModifiedDate":"2022-09-10"},{"lineNumber":120,"author":{"gitId":"malcolmang"},"content":"        return Arrays.asList(getTypeIcon(), getStatusIconSave(), getText());","lastModifiedDate":"2022-09-11"},{"lineNumber":121,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":122,"author":{"gitId":"malcolmang"},"content":"}","lastModifiedDate":"2022-08-27"}],"authorContributionMap":{"malcolmang":122}},{"path":"src/main/java/duke/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"malcolmang"},"content":"package duke.tasks;","lastModifiedDate":"2022-09-03"},{"lineNumber":2,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":3,"author":{"gitId":"malcolmang"},"content":"import duke.error.exceptions.ItemNotFoundException;","lastModifiedDate":"2022-09-03"},{"lineNumber":4,"author":{"gitId":"malcolmang"},"content":"import duke.error.exceptions.NoStateChangeException;","lastModifiedDate":"2022-09-03"},{"lineNumber":5,"author":{"gitId":"malcolmang"},"content":"import duke.io.Storage;","lastModifiedDate":"2022-09-18"},{"lineNumber":6,"author":{"gitId":"malcolmang"},"content":"import duke.ui.StringFormatting;","lastModifiedDate":"2022-09-18"},{"lineNumber":7,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":8,"author":{"gitId":"malcolmang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-08-21"},{"lineNumber":9,"author":{"gitId":"malcolmang"},"content":"import java.util.List;","lastModifiedDate":"2022-08-21"},{"lineNumber":10,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":11,"author":{"gitId":"malcolmang"},"content":"/**","lastModifiedDate":"2022-08-27"},{"lineNumber":12,"author":{"gitId":"malcolmang"},"content":" * Class that keeps track of each task item added to the program.","lastModifiedDate":"2022-09-10"},{"lineNumber":13,"author":{"gitId":"malcolmang"},"content":" */","lastModifiedDate":"2022-08-27"},{"lineNumber":14,"author":{"gitId":"malcolmang"},"content":"public class TaskList {","lastModifiedDate":"2022-08-27"},{"lineNumber":15,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"malcolmang"},"content":"     * List containing item","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":18,"author":{"gitId":"malcolmang"},"content":"    private final List\u003cTask\u003e tasks;","lastModifiedDate":"2022-09-10"},{"lineNumber":19,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":20,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":21,"author":{"gitId":"malcolmang"},"content":"     * Count of number of items in list","lastModifiedDate":"2022-09-18"},{"lineNumber":22,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":23,"author":{"gitId":"malcolmang"},"content":"    private int itemCount \u003d 0;","lastModifiedDate":"2022-08-27"},{"lineNumber":24,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":25,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-08-27"},{"lineNumber":26,"author":{"gitId":"malcolmang"},"content":"     * Constructor that initializes list of task items.","lastModifiedDate":"2022-08-27"},{"lineNumber":27,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-08-27"},{"lineNumber":28,"author":{"gitId":"malcolmang"},"content":"    public TaskList() {","lastModifiedDate":"2022-08-27"},{"lineNumber":29,"author":{"gitId":"malcolmang"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-09-10"},{"lineNumber":30,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":31,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":32,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":33,"author":{"gitId":"malcolmang"},"content":"     * Makes save string from all tasks in the list and concatenates into a single string","lastModifiedDate":"2022-09-10"},{"lineNumber":34,"author":{"gitId":"malcolmang"},"content":"     * to be written to a file.","lastModifiedDate":"2022-09-10"},{"lineNumber":35,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":36,"author":{"gitId":"malcolmang"},"content":"     * @return save string","lastModifiedDate":"2022-09-10"},{"lineNumber":37,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":38,"author":{"gitId":"malcolmang"},"content":"    public String getSaveString() {","lastModifiedDate":"2022-09-10"},{"lineNumber":39,"author":{"gitId":"malcolmang"},"content":"        String bufferString \u003d \"\";","lastModifiedDate":"2022-09-10"},{"lineNumber":40,"author":{"gitId":"malcolmang"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2022-09-10"},{"lineNumber":41,"author":{"gitId":"malcolmang"},"content":"            bufferString +\u003d Storage.formatSeparatedString(task.getSaveItems()) + StringFormatting.LINE_BREAK;","lastModifiedDate":"2022-09-18"},{"lineNumber":42,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-09-10"},{"lineNumber":43,"author":{"gitId":"malcolmang"},"content":"        return bufferString;","lastModifiedDate":"2022-09-10"},{"lineNumber":44,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":45,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":46,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-08-27"},{"lineNumber":47,"author":{"gitId":"malcolmang"},"content":"     * Adds item to list of items. Increments item count by 1.","lastModifiedDate":"2022-08-27"},{"lineNumber":48,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-08-27"},{"lineNumber":49,"author":{"gitId":"malcolmang"},"content":"     * @param item item to be added","lastModifiedDate":"2022-08-27"},{"lineNumber":50,"author":{"gitId":"malcolmang"},"content":"     * @return returns the \u003cb\u003e0-based\u003c/b\u003e index of the added item","lastModifiedDate":"2022-08-27"},{"lineNumber":51,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-08-27"},{"lineNumber":52,"author":{"gitId":"malcolmang"},"content":"    public int addItem(Task item) {","lastModifiedDate":"2022-08-27"},{"lineNumber":53,"author":{"gitId":"malcolmang"},"content":"        tasks.add(item);","lastModifiedDate":"2022-09-10"},{"lineNumber":54,"author":{"gitId":"malcolmang"},"content":"        return ++itemCount - 1;","lastModifiedDate":"2022-08-27"},{"lineNumber":55,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":56,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":57,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-08-27"},{"lineNumber":58,"author":{"gitId":"malcolmang"},"content":"     * Converts list to a string representation.","lastModifiedDate":"2022-08-27"},{"lineNumber":59,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-08-27"},{"lineNumber":60,"author":{"gitId":"malcolmang"},"content":"     * @return string representation of the To-Do list","lastModifiedDate":"2022-08-27"},{"lineNumber":61,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-08-27"},{"lineNumber":62,"author":{"gitId":"malcolmang"},"content":"    public String toString() {","lastModifiedDate":"2022-08-21"},{"lineNumber":63,"author":{"gitId":"malcolmang"},"content":"        StringBuilder outputString \u003d new StringBuilder();","lastModifiedDate":"2022-08-21"},{"lineNumber":64,"author":{"gitId":"malcolmang"},"content":"        // 1-based index","lastModifiedDate":"2022-08-27"},{"lineNumber":65,"author":{"gitId":"malcolmang"},"content":"        int itemCounter \u003d 1;","lastModifiedDate":"2022-08-21"},{"lineNumber":66,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":67,"author":{"gitId":"malcolmang"},"content":"        // append each item to string (with attached prefix and line break)","lastModifiedDate":"2022-08-27"},{"lineNumber":68,"author":{"gitId":"malcolmang"},"content":"        for (Task item : tasks) {","lastModifiedDate":"2022-09-10"},{"lineNumber":69,"author":{"gitId":"malcolmang"},"content":"            String prefix \u003d itemCounter++ + \". \";","lastModifiedDate":"2022-08-27"},{"lineNumber":70,"author":{"gitId":"malcolmang"},"content":"            if (Integer.toString(itemCounter - 1).length() \u003d\u003d 1) {","lastModifiedDate":"2022-08-27"},{"lineNumber":71,"author":{"gitId":"malcolmang"},"content":"                outputString.append(\"0\");","lastModifiedDate":"2022-08-27"},{"lineNumber":72,"author":{"gitId":"malcolmang"},"content":"            }","lastModifiedDate":"2022-08-27"},{"lineNumber":73,"author":{"gitId":"malcolmang"},"content":"            outputString.append(prefix).append(item).append(StringFormatting.LINE_BREAK);","lastModifiedDate":"2022-09-18"},{"lineNumber":74,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-08-21"},{"lineNumber":75,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":76,"author":{"gitId":"malcolmang"},"content":"        // remove trailing linebreak","lastModifiedDate":"2022-08-27"},{"lineNumber":77,"author":{"gitId":"malcolmang"},"content":"        return outputString.substring(0, outputString.length() - 1);","lastModifiedDate":"2022-08-27"},{"lineNumber":78,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":79,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":80,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-08-27"},{"lineNumber":81,"author":{"gitId":"malcolmang"},"content":"     * Mark item as done.","lastModifiedDate":"2022-08-27"},{"lineNumber":82,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-08-27"},{"lineNumber":83,"author":{"gitId":"malcolmang"},"content":"     * @param index \u003cb\u003e0-based\u003c/b\u003e index of desired item","lastModifiedDate":"2022-08-27"},{"lineNumber":84,"author":{"gitId":"malcolmang"},"content":"     * @throws ItemNotFoundException if item index is not within the bounds of the list","lastModifiedDate":"2022-09-03"},{"lineNumber":85,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-08-27"},{"lineNumber":86,"author":{"gitId":"malcolmang"},"content":"    public void markItem(int index) throws ItemNotFoundException, NoStateChangeException {","lastModifiedDate":"2022-09-03"},{"lineNumber":87,"author":{"gitId":"malcolmang"},"content":"        try {","lastModifiedDate":"2022-09-03"},{"lineNumber":88,"author":{"gitId":"malcolmang"},"content":"            tasks.get(index).setDone(true);","lastModifiedDate":"2022-09-10"},{"lineNumber":89,"author":{"gitId":"malcolmang"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-09-03"},{"lineNumber":90,"author":{"gitId":"malcolmang"},"content":"            throw new ItemNotFoundException(index);","lastModifiedDate":"2022-09-03"},{"lineNumber":91,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-09-03"},{"lineNumber":92,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":93,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":94,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-08-27"},{"lineNumber":95,"author":{"gitId":"malcolmang"},"content":"     * Mark item as not yet done.","lastModifiedDate":"2022-08-27"},{"lineNumber":96,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-08-27"},{"lineNumber":97,"author":{"gitId":"malcolmang"},"content":"     * @param index \u003cb\u003e0-based\u003c/b\u003e index of desired item","lastModifiedDate":"2022-08-27"},{"lineNumber":98,"author":{"gitId":"malcolmang"},"content":"     * @throws ItemNotFoundException if item index is not within the bounds of the list","lastModifiedDate":"2022-09-03"},{"lineNumber":99,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-08-27"},{"lineNumber":100,"author":{"gitId":"malcolmang"},"content":"    public void unmarkItem(int index) throws ItemNotFoundException, NoStateChangeException {","lastModifiedDate":"2022-09-03"},{"lineNumber":101,"author":{"gitId":"malcolmang"},"content":"        try {","lastModifiedDate":"2022-09-03"},{"lineNumber":102,"author":{"gitId":"malcolmang"},"content":"            tasks.get(index).setDone(false);","lastModifiedDate":"2022-09-10"},{"lineNumber":103,"author":{"gitId":"malcolmang"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-09-03"},{"lineNumber":104,"author":{"gitId":"malcolmang"},"content":"            throw new ItemNotFoundException(index);","lastModifiedDate":"2022-09-03"},{"lineNumber":105,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-09-03"},{"lineNumber":106,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":107,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-21"},{"lineNumber":108,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":109,"author":{"gitId":"malcolmang"},"content":"     * Delete item from list.","lastModifiedDate":"2022-09-10"},{"lineNumber":110,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":111,"author":{"gitId":"malcolmang"},"content":"     * @param index \u003cb\u003e0-based\u003c/b\u003e index of item to delete","lastModifiedDate":"2022-09-10"},{"lineNumber":112,"author":{"gitId":"malcolmang"},"content":"     * @return text of the deleted item","lastModifiedDate":"2022-09-10"},{"lineNumber":113,"author":{"gitId":"malcolmang"},"content":"     * @throws ItemNotFoundException if item is not within the bounds of the list","lastModifiedDate":"2022-09-10"},{"lineNumber":114,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":115,"author":{"gitId":"malcolmang"},"content":"    public String deleteItem(int index) throws ItemNotFoundException {","lastModifiedDate":"2022-09-10"},{"lineNumber":116,"author":{"gitId":"malcolmang"},"content":"        try {","lastModifiedDate":"2022-09-10"},{"lineNumber":117,"author":{"gitId":"malcolmang"},"content":"            String itemText \u003d getTextOfItem(index);","lastModifiedDate":"2022-09-10"},{"lineNumber":118,"author":{"gitId":"malcolmang"},"content":"            tasks.remove(index);","lastModifiedDate":"2022-09-10"},{"lineNumber":119,"author":{"gitId":"malcolmang"},"content":"            itemCount--;","lastModifiedDate":"2022-09-10"},{"lineNumber":120,"author":{"gitId":"malcolmang"},"content":"            return itemText;","lastModifiedDate":"2022-09-10"},{"lineNumber":121,"author":{"gitId":"malcolmang"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-09-10"},{"lineNumber":122,"author":{"gitId":"malcolmang"},"content":"            throw new ItemNotFoundException(index);","lastModifiedDate":"2022-09-10"},{"lineNumber":123,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-09-10"},{"lineNumber":124,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":125,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":126,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-08-27"},{"lineNumber":127,"author":{"gitId":"malcolmang"},"content":"     * Returns the text content of each item (without done, deadline tracker etc.)","lastModifiedDate":"2022-08-27"},{"lineNumber":128,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-08-27"},{"lineNumber":129,"author":{"gitId":"malcolmang"},"content":"     * @param index \u003cb\u003e0-based\u003c/b\u003e index of desired item","lastModifiedDate":"2022-08-27"},{"lineNumber":130,"author":{"gitId":"malcolmang"},"content":"     * @return text content of desired item","lastModifiedDate":"2022-08-27"},{"lineNumber":131,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-08-27"},{"lineNumber":132,"author":{"gitId":"malcolmang"},"content":"    public String getTextOfItem(int index) {","lastModifiedDate":"2022-08-21"},{"lineNumber":133,"author":{"gitId":"malcolmang"},"content":"        return tasks.get(index).getText();","lastModifiedDate":"2022-09-10"},{"lineNumber":134,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-08-21"},{"lineNumber":135,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":136,"author":{"gitId":"malcolmang"},"content":"    public int getItemCount() {","lastModifiedDate":"2022-08-27"},{"lineNumber":137,"author":{"gitId":"malcolmang"},"content":"        return itemCount;","lastModifiedDate":"2022-08-27"},{"lineNumber":138,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":139,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":140,"author":{"gitId":"malcolmang"},"content":"}","lastModifiedDate":"2022-08-21"}],"authorContributionMap":{"malcolmang":140}},{"path":"src/main/java/duke/tasks/tasktypes/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"malcolmang"},"content":"package duke.tasks.tasktypes;","lastModifiedDate":"2022-09-03"},{"lineNumber":2,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":3,"author":{"gitId":"malcolmang"},"content":"import duke.error.exceptions.NoStateChangeException;","lastModifiedDate":"2022-09-10"},{"lineNumber":4,"author":{"gitId":"malcolmang"},"content":"import duke.io.Storage;","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"malcolmang"},"content":"import duke.tasks.Task;","lastModifiedDate":"2022-09-03"},{"lineNumber":6,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":7,"author":{"gitId":"malcolmang"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-09-10"},{"lineNumber":8,"author":{"gitId":"malcolmang"},"content":"import java.util.List;","lastModifiedDate":"2022-09-10"},{"lineNumber":9,"author":{"gitId":"malcolmang"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2022-09-10"},{"lineNumber":10,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":11,"author":{"gitId":"malcolmang"},"content":"/**","lastModifiedDate":"2022-08-27"},{"lineNumber":12,"author":{"gitId":"malcolmang"},"content":" * Deadline item that keeps track of when an item has to be completed.","lastModifiedDate":"2022-08-27"},{"lineNumber":13,"author":{"gitId":"malcolmang"},"content":" */","lastModifiedDate":"2022-08-27"},{"lineNumber":14,"author":{"gitId":"malcolmang"},"content":"public class DeadlineTask extends Task {","lastModifiedDate":"2022-08-27"},{"lineNumber":15,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"malcolmang"},"content":"     * Keyword to mark when a task needs to be done by","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":18,"author":{"gitId":"malcolmang"},"content":"    public static final String COMMAND_BY \u003d \"/by\";","lastModifiedDate":"2022-08-27"},{"lineNumber":19,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":20,"author":{"gitId":"malcolmang"},"content":"     * Icon denoting type.","lastModifiedDate":"2022-09-18"},{"lineNumber":21,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":22,"author":{"gitId":"malcolmang"},"content":"    private static final String TYPE_ICON \u003d \"D\";","lastModifiedDate":"2022-09-10"},{"lineNumber":23,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":24,"author":{"gitId":"malcolmang"},"content":"     * Contains text following the {@link DeadlineTask#COMMAND_BY} command.","lastModifiedDate":"2022-09-18"},{"lineNumber":25,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":26,"author":{"gitId":"malcolmang"},"content":"    private final String DEADLINE;","lastModifiedDate":"2022-09-10"},{"lineNumber":27,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":28,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-08-27"},{"lineNumber":29,"author":{"gitId":"malcolmang"},"content":"     * Splits the text into two and initializes","lastModifiedDate":"2022-09-03"},{"lineNumber":30,"author":{"gitId":"malcolmang"},"content":"     * the {@link DeadlineTask#DEADLINE} string.","lastModifiedDate":"2022-09-03"},{"lineNumber":31,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":32,"author":{"gitId":"malcolmang"},"content":"     * @param text input text to be parsed","lastModifiedDate":"2022-08-27"},{"lineNumber":33,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-08-27"},{"lineNumber":34,"author":{"gitId":"malcolmang"},"content":"    public DeadlineTask(String text) {","lastModifiedDate":"2022-08-27"},{"lineNumber":35,"author":{"gitId":"malcolmang"},"content":"        super(text.split(COMMAND_BY)[0]);","lastModifiedDate":"2022-08-27"},{"lineNumber":36,"author":{"gitId":"malcolmang"},"content":"        DEADLINE \u003d text.split(COMMAND_BY)[1].trim();","lastModifiedDate":"2022-08-27"},{"lineNumber":37,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":38,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":39,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":40,"author":{"gitId":"malcolmang"},"content":"     * Checks if command is equal to {@link DeadlineTask#TYPE_ICON}","lastModifiedDate":"2022-09-10"},{"lineNumber":41,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":42,"author":{"gitId":"malcolmang"},"content":"     * @param command command string","lastModifiedDate":"2022-09-10"},{"lineNumber":43,"author":{"gitId":"malcolmang"},"content":"     * @return true if it is equal","lastModifiedDate":"2022-09-10"},{"lineNumber":44,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":45,"author":{"gitId":"malcolmang"},"content":"    public static boolean isCommand(String command) {","lastModifiedDate":"2022-09-10"},{"lineNumber":46,"author":{"gitId":"malcolmang"},"content":"        return command.trim().equals(TYPE_ICON);","lastModifiedDate":"2022-09-10"},{"lineNumber":47,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":48,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":49,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":50,"author":{"gitId":"malcolmang"},"content":"     * Parses string loaded from save file into a {@link DeadlineTask} instance.","lastModifiedDate":"2022-09-10"},{"lineNumber":51,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":52,"author":{"gitId":"malcolmang"},"content":"     * @param input input to be split by separator","lastModifiedDate":"2022-09-10"},{"lineNumber":53,"author":{"gitId":"malcolmang"},"content":"     * @return {@link DeadlineTask} instance","lastModifiedDate":"2022-09-10"},{"lineNumber":54,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":55,"author":{"gitId":"malcolmang"},"content":"    public static DeadlineTask parseDeadlineTask(String input) {","lastModifiedDate":"2022-09-10"},{"lineNumber":56,"author":{"gitId":"malcolmang"},"content":"        // Parse array","lastModifiedDate":"2022-09-10"},{"lineNumber":57,"author":{"gitId":"malcolmang"},"content":"        String[] sections \u003d input.split(Pattern.quote(Storage.getSeparator()));","lastModifiedDate":"2022-09-18"},{"lineNumber":58,"author":{"gitId":"malcolmang"},"content":"        String subcommand \u003d sections[3];","lastModifiedDate":"2022-09-10"},{"lineNumber":59,"author":{"gitId":"malcolmang"},"content":"        String text \u003d sections[2];","lastModifiedDate":"2022-09-10"},{"lineNumber":60,"author":{"gitId":"malcolmang"},"content":"        String icon \u003d sections[1];","lastModifiedDate":"2022-09-10"},{"lineNumber":61,"author":{"gitId":"malcolmang"},"content":"        DeadlineTask bufferTask \u003d new DeadlineTask(text + COMMAND_BY + subcommand);","lastModifiedDate":"2022-09-18"},{"lineNumber":62,"author":{"gitId":"malcolmang"},"content":"        // Load in \"done\" state","lastModifiedDate":"2022-09-10"},{"lineNumber":63,"author":{"gitId":"malcolmang"},"content":"        try {","lastModifiedDate":"2022-09-10"},{"lineNumber":64,"author":{"gitId":"malcolmang"},"content":"            if (icon.trim().equals(\"X\")) {","lastModifiedDate":"2022-09-11"},{"lineNumber":65,"author":{"gitId":"malcolmang"},"content":"                bufferTask.setDone(true);","lastModifiedDate":"2022-09-10"},{"lineNumber":66,"author":{"gitId":"malcolmang"},"content":"            }","lastModifiedDate":"2022-09-10"},{"lineNumber":67,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":68,"author":{"gitId":"malcolmang"},"content":"        catch (NoStateChangeException e) {","lastModifiedDate":"2022-09-18"},{"lineNumber":69,"author":{"gitId":"malcolmang"},"content":"            // This will never trigger as isDone is always initialized as false.","lastModifiedDate":"2022-09-10"},{"lineNumber":70,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-09-10"},{"lineNumber":71,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":72,"author":{"gitId":"malcolmang"},"content":"        return bufferTask;","lastModifiedDate":"2022-09-10"},{"lineNumber":73,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":74,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":75,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":76,"author":{"gitId":"malcolmang"},"content":"     * Provides type icon to be used in string formatting.","lastModifiedDate":"2022-09-10"},{"lineNumber":77,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":78,"author":{"gitId":"malcolmang"},"content":"     * @return Type icon \"D\" for \"Deadline\".","lastModifiedDate":"2022-09-10"},{"lineNumber":79,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":80,"author":{"gitId":"malcolmang"},"content":"    @Override","lastModifiedDate":"2022-09-10"},{"lineNumber":81,"author":{"gitId":"malcolmang"},"content":"    public String getTypeIcon() {","lastModifiedDate":"2022-09-10"},{"lineNumber":82,"author":{"gitId":"malcolmang"},"content":"        return \"D\";","lastModifiedDate":"2022-09-10"},{"lineNumber":83,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":84,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":85,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":86,"author":{"gitId":"malcolmang"},"content":"     * Add a postfix that denotes a deadline.","lastModifiedDate":"2022-09-10"},{"lineNumber":87,"author":{"gitId":"malcolmang"},"content":"     * (e.g. \u003ccode\u003e(by 4:00 pm)\u003c/code\u003e )","lastModifiedDate":"2022-09-10"},{"lineNumber":88,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":89,"author":{"gitId":"malcolmang"},"content":"     * @return postfix string","lastModifiedDate":"2022-09-10"},{"lineNumber":90,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":91,"author":{"gitId":"malcolmang"},"content":"    protected String getPostFix() {","lastModifiedDate":"2022-09-10"},{"lineNumber":92,"author":{"gitId":"malcolmang"},"content":"        return \"(by: \" + DEADLINE + \")\";","lastModifiedDate":"2022-09-10"},{"lineNumber":93,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":94,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":95,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":96,"author":{"gitId":"malcolmang"},"content":"     * Returns {@link List} with relevant details for saving.","lastModifiedDate":"2022-09-10"},{"lineNumber":97,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":98,"author":{"gitId":"malcolmang"},"content":"     * @return List of strings containing details of {@link DeadlineTask} instance.","lastModifiedDate":"2022-09-10"},{"lineNumber":99,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":100,"author":{"gitId":"malcolmang"},"content":"    @Override","lastModifiedDate":"2022-09-10"},{"lineNumber":101,"author":{"gitId":"malcolmang"},"content":"    public List\u003cString\u003e getSaveItems() {","lastModifiedDate":"2022-09-10"},{"lineNumber":102,"author":{"gitId":"malcolmang"},"content":"        return Arrays.asList(getTypeIcon(), getStatusIconSave(), getText(), DEADLINE);","lastModifiedDate":"2022-09-11"},{"lineNumber":103,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":104,"author":{"gitId":"malcolmang"},"content":"}","lastModifiedDate":"2022-08-27"}],"authorContributionMap":{"malcolmang":104}},{"path":"src/main/java/duke/tasks/tasktypes/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"malcolmang"},"content":"package duke.tasks.tasktypes;","lastModifiedDate":"2022-09-03"},{"lineNumber":2,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":3,"author":{"gitId":"malcolmang"},"content":"import duke.error.exceptions.NoStateChangeException;","lastModifiedDate":"2022-09-10"},{"lineNumber":4,"author":{"gitId":"malcolmang"},"content":"import duke.io.Storage;","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"malcolmang"},"content":"import duke.tasks.Task;","lastModifiedDate":"2022-09-03"},{"lineNumber":6,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":7,"author":{"gitId":"malcolmang"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-09-10"},{"lineNumber":8,"author":{"gitId":"malcolmang"},"content":"import java.util.List;","lastModifiedDate":"2022-09-10"},{"lineNumber":9,"author":{"gitId":"malcolmang"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2022-09-10"},{"lineNumber":10,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":11,"author":{"gitId":"malcolmang"},"content":"/**","lastModifiedDate":"2022-08-27"},{"lineNumber":12,"author":{"gitId":"malcolmang"},"content":" * Event item that keeps track of when an item is slated to happen.","lastModifiedDate":"2022-08-27"},{"lineNumber":13,"author":{"gitId":"malcolmang"},"content":" */","lastModifiedDate":"2022-08-27"},{"lineNumber":14,"author":{"gitId":"malcolmang"},"content":"public class EventTask extends Task {","lastModifiedDate":"2022-08-27"},{"lineNumber":15,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"malcolmang"},"content":"     * Keyword to mark when an event is supposed to happen","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":18,"author":{"gitId":"malcolmang"},"content":"    public static final String COMMAND_AT \u003d \"/at\";","lastModifiedDate":"2022-08-27"},{"lineNumber":19,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":20,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":21,"author":{"gitId":"malcolmang"},"content":"     * Icon denoting task type.","lastModifiedDate":"2022-09-18"},{"lineNumber":22,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":23,"author":{"gitId":"malcolmang"},"content":"    private static final String TYPE_ICON \u003d \"E\";","lastModifiedDate":"2022-09-10"},{"lineNumber":24,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":25,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":26,"author":{"gitId":"malcolmang"},"content":"     * Contains text following the {@link EventTask#COMMAND_AT} command.","lastModifiedDate":"2022-09-18"},{"lineNumber":27,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":28,"author":{"gitId":"malcolmang"},"content":"    private final String EVENT;","lastModifiedDate":"2022-08-27"},{"lineNumber":29,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":30,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-08-27"},{"lineNumber":31,"author":{"gitId":"malcolmang"},"content":"     * Splits the text into two and initializes","lastModifiedDate":"2022-09-03"},{"lineNumber":32,"author":{"gitId":"malcolmang"},"content":"     * the {@link EventTask#EVENT} string.","lastModifiedDate":"2022-09-03"},{"lineNumber":33,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":34,"author":{"gitId":"malcolmang"},"content":"     * @param text input text to be parsed","lastModifiedDate":"2022-08-27"},{"lineNumber":35,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-08-27"},{"lineNumber":36,"author":{"gitId":"malcolmang"},"content":"    public EventTask(String text) {","lastModifiedDate":"2022-08-27"},{"lineNumber":37,"author":{"gitId":"malcolmang"},"content":"        super(text.split(COMMAND_AT)[0]);","lastModifiedDate":"2022-08-27"},{"lineNumber":38,"author":{"gitId":"malcolmang"},"content":"        EVENT \u003d text.split(COMMAND_AT)[1].trim();","lastModifiedDate":"2022-08-27"},{"lineNumber":39,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":40,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":41,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":42,"author":{"gitId":"malcolmang"},"content":"     * Checks if command is equal to {@link EventTask#TYPE_ICON}","lastModifiedDate":"2022-09-10"},{"lineNumber":43,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":44,"author":{"gitId":"malcolmang"},"content":"     * @param command command string","lastModifiedDate":"2022-09-10"},{"lineNumber":45,"author":{"gitId":"malcolmang"},"content":"     * @return true if it is equal","lastModifiedDate":"2022-09-10"},{"lineNumber":46,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":47,"author":{"gitId":"malcolmang"},"content":"    public static boolean isCommand(String command) {","lastModifiedDate":"2022-09-10"},{"lineNumber":48,"author":{"gitId":"malcolmang"},"content":"        return command.trim().equals(TYPE_ICON);","lastModifiedDate":"2022-09-10"},{"lineNumber":49,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":50,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":51,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":52,"author":{"gitId":"malcolmang"},"content":"     * Parses string loaded from save file into a {@link EventTask} instance.","lastModifiedDate":"2022-09-10"},{"lineNumber":53,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":54,"author":{"gitId":"malcolmang"},"content":"     * @param input input to be split by separator","lastModifiedDate":"2022-09-10"},{"lineNumber":55,"author":{"gitId":"malcolmang"},"content":"     * @return {@link EventTask} instance","lastModifiedDate":"2022-09-10"},{"lineNumber":56,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":57,"author":{"gitId":"malcolmang"},"content":"    public static EventTask parseEventTask(String input) {","lastModifiedDate":"2022-09-10"},{"lineNumber":58,"author":{"gitId":"malcolmang"},"content":"        // Parse array","lastModifiedDate":"2022-09-10"},{"lineNumber":59,"author":{"gitId":"malcolmang"},"content":"        String[] sections \u003d input.split(Pattern.quote(Storage.getSeparator()));","lastModifiedDate":"2022-09-18"},{"lineNumber":60,"author":{"gitId":"malcolmang"},"content":"        String subcommand \u003d sections[3];","lastModifiedDate":"2022-09-10"},{"lineNumber":61,"author":{"gitId":"malcolmang"},"content":"        String text \u003d sections[2];","lastModifiedDate":"2022-09-10"},{"lineNumber":62,"author":{"gitId":"malcolmang"},"content":"        String icon \u003d sections[1];","lastModifiedDate":"2022-09-10"},{"lineNumber":63,"author":{"gitId":"malcolmang"},"content":"        EventTask bufferTask \u003d new EventTask(text + COMMAND_AT + subcommand);","lastModifiedDate":"2022-09-18"},{"lineNumber":64,"author":{"gitId":"malcolmang"},"content":"        // Load in \"done\" state","lastModifiedDate":"2022-09-10"},{"lineNumber":65,"author":{"gitId":"malcolmang"},"content":"        try {","lastModifiedDate":"2022-09-10"},{"lineNumber":66,"author":{"gitId":"malcolmang"},"content":"            if (icon.trim().equals(\"X\")) {","lastModifiedDate":"2022-09-11"},{"lineNumber":67,"author":{"gitId":"malcolmang"},"content":"                bufferTask.setDone(true);","lastModifiedDate":"2022-09-10"},{"lineNumber":68,"author":{"gitId":"malcolmang"},"content":"            }","lastModifiedDate":"2022-09-10"},{"lineNumber":69,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":70,"author":{"gitId":"malcolmang"},"content":"        catch (NoStateChangeException e) {","lastModifiedDate":"2022-09-18"},{"lineNumber":71,"author":{"gitId":"malcolmang"},"content":"            // This will never trigger as isDone is always initialized as false.","lastModifiedDate":"2022-09-10"},{"lineNumber":72,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-09-10"},{"lineNumber":73,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":74,"author":{"gitId":"malcolmang"},"content":"        return bufferTask;","lastModifiedDate":"2022-09-10"},{"lineNumber":75,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":76,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":77,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":78,"author":{"gitId":"malcolmang"},"content":"     * Provides type icon to be used in string formatting.","lastModifiedDate":"2022-09-10"},{"lineNumber":79,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":80,"author":{"gitId":"malcolmang"},"content":"     * @return Type icon \"E\" for \"Event\".","lastModifiedDate":"2022-09-10"},{"lineNumber":81,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":82,"author":{"gitId":"malcolmang"},"content":"    @Override","lastModifiedDate":"2022-09-10"},{"lineNumber":83,"author":{"gitId":"malcolmang"},"content":"    public String getTypeIcon() {","lastModifiedDate":"2022-09-10"},{"lineNumber":84,"author":{"gitId":"malcolmang"},"content":"        return \"E\";","lastModifiedDate":"2022-09-10"},{"lineNumber":85,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":86,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":87,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":88,"author":{"gitId":"malcolmang"},"content":"     * Add a postfix that denotes when something happens","lastModifiedDate":"2022-09-10"},{"lineNumber":89,"author":{"gitId":"malcolmang"},"content":"     * (e.g. \u003ccode\u003e(at 3:00 pm)\u003c/code\u003e )","lastModifiedDate":"2022-09-10"},{"lineNumber":90,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":91,"author":{"gitId":"malcolmang"},"content":"     * @return postfix string","lastModifiedDate":"2022-09-10"},{"lineNumber":92,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":93,"author":{"gitId":"malcolmang"},"content":"    protected String getPostFix() {","lastModifiedDate":"2022-09-10"},{"lineNumber":94,"author":{"gitId":"malcolmang"},"content":"        return \"(at: \" + EVENT + \")\";","lastModifiedDate":"2022-09-10"},{"lineNumber":95,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":96,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":97,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":98,"author":{"gitId":"malcolmang"},"content":"     * Returns {@link List} with relevant details for saving.","lastModifiedDate":"2022-09-10"},{"lineNumber":99,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":100,"author":{"gitId":"malcolmang"},"content":"     * @return List of strings containing details of {@link EventTask} instance.","lastModifiedDate":"2022-09-10"},{"lineNumber":101,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":102,"author":{"gitId":"malcolmang"},"content":"    @Override","lastModifiedDate":"2022-09-10"},{"lineNumber":103,"author":{"gitId":"malcolmang"},"content":"    public List\u003cString\u003e getSaveItems() {","lastModifiedDate":"2022-09-10"},{"lineNumber":104,"author":{"gitId":"malcolmang"},"content":"        return Arrays.asList(getTypeIcon(), getStatusIconSave(), getText(), EVENT);","lastModifiedDate":"2022-09-11"},{"lineNumber":105,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":106,"author":{"gitId":"malcolmang"},"content":"}","lastModifiedDate":"2022-08-27"}],"authorContributionMap":{"malcolmang":106}},{"path":"src/main/java/duke/tasks/tasktypes/ToDoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"malcolmang"},"content":"package duke.tasks.tasktypes;","lastModifiedDate":"2022-09-03"},{"lineNumber":2,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":3,"author":{"gitId":"malcolmang"},"content":"import duke.error.exceptions.NoStateChangeException;","lastModifiedDate":"2022-09-10"},{"lineNumber":4,"author":{"gitId":"malcolmang"},"content":"import duke.io.Storage;","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"malcolmang"},"content":"import duke.tasks.Task;","lastModifiedDate":"2022-09-03"},{"lineNumber":6,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":7,"author":{"gitId":"malcolmang"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2022-09-10"},{"lineNumber":8,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":9,"author":{"gitId":"malcolmang"},"content":"/**","lastModifiedDate":"2022-08-27"},{"lineNumber":10,"author":{"gitId":"malcolmang"},"content":" * Vanilla tasks. Task item without any extra functionality.","lastModifiedDate":"2022-08-27"},{"lineNumber":11,"author":{"gitId":"malcolmang"},"content":" */","lastModifiedDate":"2022-08-27"},{"lineNumber":12,"author":{"gitId":"malcolmang"},"content":"public class ToDoTask extends Task {","lastModifiedDate":"2022-08-27"},{"lineNumber":13,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":14,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":15,"author":{"gitId":"malcolmang"},"content":"     * Icon denoting task type.","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"malcolmang"},"content":"    private static final String TASK_TYPE_ICON \u003d \"T\";","lastModifiedDate":"2022-09-10"},{"lineNumber":18,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":19,"author":{"gitId":"malcolmang"},"content":"    public ToDoTask(String text) {","lastModifiedDate":"2022-08-27"},{"lineNumber":20,"author":{"gitId":"malcolmang"},"content":"        super(text);","lastModifiedDate":"2022-08-27"},{"lineNumber":21,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":22,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":23,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":24,"author":{"gitId":"malcolmang"},"content":"     * Checks if command is equal to {@link ToDoTask#TASK_TYPE_ICON}","lastModifiedDate":"2022-09-10"},{"lineNumber":25,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":26,"author":{"gitId":"malcolmang"},"content":"     * @param command command string","lastModifiedDate":"2022-09-10"},{"lineNumber":27,"author":{"gitId":"malcolmang"},"content":"     * @return true if it is equal","lastModifiedDate":"2022-09-10"},{"lineNumber":28,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":29,"author":{"gitId":"malcolmang"},"content":"    public static boolean isCommand(String command) {","lastModifiedDate":"2022-09-10"},{"lineNumber":30,"author":{"gitId":"malcolmang"},"content":"        return command.trim().equals(TASK_TYPE_ICON);","lastModifiedDate":"2022-09-10"},{"lineNumber":31,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":32,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":33,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":34,"author":{"gitId":"malcolmang"},"content":"     * Parses string loaded from save file into a {@link ToDoTask} instance.","lastModifiedDate":"2022-09-10"},{"lineNumber":35,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":36,"author":{"gitId":"malcolmang"},"content":"     * @param input input to be split by separator","lastModifiedDate":"2022-09-10"},{"lineNumber":37,"author":{"gitId":"malcolmang"},"content":"     * @return {@link ToDoTask} instance","lastModifiedDate":"2022-09-10"},{"lineNumber":38,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":39,"author":{"gitId":"malcolmang"},"content":"    public static ToDoTask parseToDoTask(String input) {","lastModifiedDate":"2022-09-10"},{"lineNumber":40,"author":{"gitId":"malcolmang"},"content":"        // Parse array","lastModifiedDate":"2022-09-10"},{"lineNumber":41,"author":{"gitId":"malcolmang"},"content":"        String[] sections \u003d input.split(Pattern.quote(Storage.getSeparator()));","lastModifiedDate":"2022-09-18"},{"lineNumber":42,"author":{"gitId":"malcolmang"},"content":"        String text \u003d sections[2];","lastModifiedDate":"2022-09-10"},{"lineNumber":43,"author":{"gitId":"malcolmang"},"content":"        String icon \u003d sections[1];","lastModifiedDate":"2022-09-10"},{"lineNumber":44,"author":{"gitId":"malcolmang"},"content":"        ToDoTask bufferTask \u003d new ToDoTask(text);","lastModifiedDate":"2022-09-10"},{"lineNumber":45,"author":{"gitId":"malcolmang"},"content":"        // Load in \"done\" state","lastModifiedDate":"2022-09-10"},{"lineNumber":46,"author":{"gitId":"malcolmang"},"content":"        try {","lastModifiedDate":"2022-09-10"},{"lineNumber":47,"author":{"gitId":"malcolmang"},"content":"            if (icon.trim().equals(\"X\")) {","lastModifiedDate":"2022-09-11"},{"lineNumber":48,"author":{"gitId":"malcolmang"},"content":"                bufferTask.setDone(true);","lastModifiedDate":"2022-09-10"},{"lineNumber":49,"author":{"gitId":"malcolmang"},"content":"            }","lastModifiedDate":"2022-09-10"},{"lineNumber":50,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":51,"author":{"gitId":"malcolmang"},"content":"        catch (NoStateChangeException e) {","lastModifiedDate":"2022-09-18"},{"lineNumber":52,"author":{"gitId":"malcolmang"},"content":"            // This will never trigger as isDone is always initialized as false.","lastModifiedDate":"2022-09-10"},{"lineNumber":53,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-09-10"},{"lineNumber":54,"author":{"gitId":"malcolmang"},"content":"        return bufferTask;","lastModifiedDate":"2022-09-10"},{"lineNumber":55,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":56,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":57,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-08-27"},{"lineNumber":58,"author":{"gitId":"malcolmang"},"content":"     * Provides type icon to be used in string formatting.","lastModifiedDate":"2022-08-27"},{"lineNumber":59,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-03"},{"lineNumber":60,"author":{"gitId":"malcolmang"},"content":"     * @return Type icon \"T\" for \"ToDo\".","lastModifiedDate":"2022-08-27"},{"lineNumber":61,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-08-27"},{"lineNumber":62,"author":{"gitId":"malcolmang"},"content":"    @Override","lastModifiedDate":"2022-08-27"},{"lineNumber":63,"author":{"gitId":"malcolmang"},"content":"    public String getTypeIcon() {","lastModifiedDate":"2022-09-10"},{"lineNumber":64,"author":{"gitId":"malcolmang"},"content":"        return TASK_TYPE_ICON;","lastModifiedDate":"2022-09-10"},{"lineNumber":65,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":66,"author":{"gitId":"malcolmang"},"content":"}","lastModifiedDate":"2022-08-27"}],"authorContributionMap":{"malcolmang":66}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"malcolmang"},"content":"package duke.ui;","lastModifiedDate":"2022-09-03"},{"lineNumber":2,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":3,"author":{"gitId":"malcolmang"},"content":"import duke.Duke;","lastModifiedDate":"2022-09-18"},{"lineNumber":4,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"malcolmang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-08-27"},{"lineNumber":6,"author":{"gitId":"malcolmang"},"content":"import java.util.List;","lastModifiedDate":"2022-08-27"},{"lineNumber":7,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":8,"author":{"gitId":"malcolmang"},"content":"/**","lastModifiedDate":"2022-08-27"},{"lineNumber":9,"author":{"gitId":"malcolmang"},"content":" * UI.DialogBox class to indent and wrap a given snippet of text and enclose a box around it.","lastModifiedDate":"2022-08-27"},{"lineNumber":10,"author":{"gitId":"malcolmang"},"content":" * Variable height depending on size of the given string of text.","lastModifiedDate":"2022-08-27"},{"lineNumber":11,"author":{"gitId":"malcolmang"},"content":" */","lastModifiedDate":"2022-08-27"},{"lineNumber":12,"author":{"gitId":"malcolmang"},"content":"public class DialogBox {","lastModifiedDate":"2022-08-27"},{"lineNumber":13,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":14,"author":{"gitId":"malcolmang"},"content":"     * Character to use for each indent","lastModifiedDate":"2022-09-18"},{"lineNumber":15,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"malcolmang"},"content":"    public static final char INDENT_CHARACTER \u003d \u0027 \u0027;","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":18,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":19,"author":{"gitId":"malcolmang"},"content":"     * Character to use for the top and bottom line in box","lastModifiedDate":"2022-09-18"},{"lineNumber":20,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":21,"author":{"gitId":"malcolmang"},"content":"    private static final char LINE_HORIZONTAL_CHARACTER \u003d \u0027\u003d\u0027;","lastModifiedDate":"2022-08-27"},{"lineNumber":22,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":23,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":24,"author":{"gitId":"malcolmang"},"content":"     * Character to use for the left and right wall of box","lastModifiedDate":"2022-09-18"},{"lineNumber":25,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":26,"author":{"gitId":"malcolmang"},"content":"    private static final char LINE_VERTICAL_CHARACTER \u003d \u0027|\u0027;","lastModifiedDate":"2022-08-27"},{"lineNumber":27,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":28,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":29,"author":{"gitId":"malcolmang"},"content":"     * Spacing between text and horizontal walls of dialog box","lastModifiedDate":"2022-09-18"},{"lineNumber":30,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":31,"author":{"gitId":"malcolmang"},"content":"    private static final int HORIZONTAL_PADDING \u003d 3;","lastModifiedDate":"2022-08-27"},{"lineNumber":32,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":33,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":34,"author":{"gitId":"malcolmang"},"content":"     * Size of each indentation","lastModifiedDate":"2022-09-18"},{"lineNumber":35,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":36,"author":{"gitId":"malcolmang"},"content":"    private static final int INDENT_SIZE \u003d 4;","lastModifiedDate":"2022-08-27"},{"lineNumber":37,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":38,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":39,"author":{"gitId":"malcolmang"},"content":"     * Maximum row width. Based on calculations done with desired console width, horizontal position and padding","lastModifiedDate":"2022-09-18"},{"lineNumber":40,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":41,"author":{"gitId":"malcolmang"},"content":"    private static int MAX_ROW_WIDTH;","lastModifiedDate":"2022-08-27"},{"lineNumber":42,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":43,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":44,"author":{"gitId":"malcolmang"},"content":"     * Text of the box expressed as a list of strings","lastModifiedDate":"2022-09-18"},{"lineNumber":45,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":46,"author":{"gitId":"malcolmang"},"content":"    private final List\u003cString\u003e textBoxRows;","lastModifiedDate":"2022-08-27"},{"lineNumber":47,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":48,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":49,"author":{"gitId":"malcolmang"},"content":"     * Height of the dialog box","lastModifiedDate":"2022-09-18"},{"lineNumber":50,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":51,"author":{"gitId":"malcolmang"},"content":"    private int height;","lastModifiedDate":"2022-08-27"},{"lineNumber":52,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":53,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":54,"author":{"gitId":"malcolmang"},"content":"     * Boolean used in switching logic for indentations between line breaks in text","lastModifiedDate":"2022-09-18"},{"lineNumber":55,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":56,"author":{"gitId":"malcolmang"},"content":"    private boolean isFirstLine \u003d true;","lastModifiedDate":"2022-08-27"},{"lineNumber":57,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":58,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-08-27"},{"lineNumber":59,"author":{"gitId":"malcolmang"},"content":"     * Constructor for UI.DialogBox class. Calculates the max possible width of the box","lastModifiedDate":"2022-08-27"},{"lineNumber":60,"author":{"gitId":"malcolmang"},"content":"     * and formats text to be indented, wrapped and then boxed in with lines.","lastModifiedDate":"2022-08-27"},{"lineNumber":61,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-08-27"},{"lineNumber":62,"author":{"gitId":"malcolmang"},"content":"     * @param text                  text of the box to be formatted","lastModifiedDate":"2022-08-27"},{"lineNumber":63,"author":{"gitId":"malcolmang"},"content":"     * @param consoleWidth          maximum width of the console","lastModifiedDate":"2022-08-27"},{"lineNumber":64,"author":{"gitId":"malcolmang"},"content":"     * @param boxHorizontalPosition absolute horizontal position the left of the box should align with","lastModifiedDate":"2022-08-27"},{"lineNumber":65,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-08-27"},{"lineNumber":66,"author":{"gitId":"malcolmang"},"content":"    public DialogBox(String text, int consoleWidth, int boxHorizontalPosition) {","lastModifiedDate":"2022-08-27"},{"lineNumber":67,"author":{"gitId":"malcolmang"},"content":"        MAX_ROW_WIDTH \u003d consoleWidth - boxHorizontalPosition - HORIZONTAL_PADDING * 2 - 2;","lastModifiedDate":"2022-08-27"},{"lineNumber":68,"author":{"gitId":"malcolmang"},"content":"        textBoxRows \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-09-03"},{"lineNumber":69,"author":{"gitId":"malcolmang"},"content":"        makeBox(indentAndWrapText(text));","lastModifiedDate":"2022-08-27"},{"lineNumber":70,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":71,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":72,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-08-27"},{"lineNumber":73,"author":{"gitId":"malcolmang"},"content":"     * Method for generating indents the size of a given integer.","lastModifiedDate":"2022-08-27"},{"lineNumber":74,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-08-27"},{"lineNumber":75,"author":{"gitId":"malcolmang"},"content":"     * @param indentSize      desired width of the indent","lastModifiedDate":"2022-08-27"},{"lineNumber":76,"author":{"gitId":"malcolmang"},"content":"     * @param indentCharacter indentation char to be amended","lastModifiedDate":"2022-09-18"},{"lineNumber":77,"author":{"gitId":"malcolmang"},"content":"     * @return an indent string of given size. Empty string if {@code indentSize} \u003d 0","lastModifiedDate":"2022-08-27"},{"lineNumber":78,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-08-27"},{"lineNumber":79,"author":{"gitId":"malcolmang"},"content":"    public static String generateIndent(int indentSize, char indentCharacter) {","lastModifiedDate":"2022-08-27"},{"lineNumber":80,"author":{"gitId":"malcolmang"},"content":"        String indent \u003d \"\";","lastModifiedDate":"2022-08-27"},{"lineNumber":81,"author":{"gitId":"malcolmang"},"content":"        for (int i \u003d 0; i \u003c indentSize; i++) {","lastModifiedDate":"2022-08-27"},{"lineNumber":82,"author":{"gitId":"malcolmang"},"content":"            indent +\u003d indentCharacter;","lastModifiedDate":"2022-08-27"},{"lineNumber":83,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-08-27"},{"lineNumber":84,"author":{"gitId":"malcolmang"},"content":"        return indent;","lastModifiedDate":"2022-08-27"},{"lineNumber":85,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":86,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":87,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-08-27"},{"lineNumber":88,"author":{"gitId":"malcolmang"},"content":"     * Right-aligns text with reference to text box width by adding spaces","lastModifiedDate":"2022-08-27"},{"lineNumber":89,"author":{"gitId":"malcolmang"},"content":"     * to the front.","lastModifiedDate":"2022-08-27"},{"lineNumber":90,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-08-27"},{"lineNumber":91,"author":{"gitId":"malcolmang"},"content":"     * @param text string of text to be aligned","lastModifiedDate":"2022-08-27"},{"lineNumber":92,"author":{"gitId":"malcolmang"},"content":"     * @return aligned string, or nothing if text is empty","lastModifiedDate":"2022-08-27"},{"lineNumber":93,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-08-27"},{"lineNumber":94,"author":{"gitId":"malcolmang"},"content":"    public static String rightAlign(String text) {","lastModifiedDate":"2022-08-27"},{"lineNumber":95,"author":{"gitId":"malcolmang"},"content":"        if (text.isEmpty()) {","lastModifiedDate":"2022-08-27"},{"lineNumber":96,"author":{"gitId":"malcolmang"},"content":"            // Nothing to align if text is empty.","lastModifiedDate":"2022-08-27"},{"lineNumber":97,"author":{"gitId":"malcolmang"},"content":"            // Avoids an extra line break","lastModifiedDate":"2022-08-27"},{"lineNumber":98,"author":{"gitId":"malcolmang"},"content":"            return \"\";","lastModifiedDate":"2022-08-27"},{"lineNumber":99,"author":{"gitId":"malcolmang"},"content":"        } else if (text.length() \u003e\u003d MAX_ROW_WIDTH) {","lastModifiedDate":"2022-08-27"},{"lineNumber":100,"author":{"gitId":"malcolmang"},"content":"            // No need to align (or add a line break) if","lastModifiedDate":"2022-08-27"},{"lineNumber":101,"author":{"gitId":"malcolmang"},"content":"            //text is longer than the max width","lastModifiedDate":"2022-08-27"},{"lineNumber":102,"author":{"gitId":"malcolmang"},"content":"            return Duke.STRING_DELIMITER + text;","lastModifiedDate":"2022-09-18"},{"lineNumber":103,"author":{"gitId":"malcolmang"},"content":"        } else {","lastModifiedDate":"2022-08-27"},{"lineNumber":104,"author":{"gitId":"malcolmang"},"content":"            return StringFormatting.LINE_BREAK + generateIndent(MAX_ROW_WIDTH - text.length(), INDENT_CHARACTER)","lastModifiedDate":"2022-09-18"},{"lineNumber":105,"author":{"gitId":"malcolmang"},"content":"                    + text;","lastModifiedDate":"2022-08-27"},{"lineNumber":106,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-08-27"},{"lineNumber":107,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":108,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":109,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-08-27"},{"lineNumber":110,"author":{"gitId":"malcolmang"},"content":"     * Indents and wraps text to be less wide or equal to {@link DialogBox#MAX_ROW_WIDTH}","lastModifiedDate":"2022-08-27"},{"lineNumber":111,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-08-27"},{"lineNumber":112,"author":{"gitId":"malcolmang"},"content":"     * @param text text to be indented","lastModifiedDate":"2022-08-27"},{"lineNumber":113,"author":{"gitId":"malcolmang"},"content":"     * @return indented and wrapped text expressed as a list of strings","lastModifiedDate":"2022-08-27"},{"lineNumber":114,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-08-27"},{"lineNumber":115,"author":{"gitId":"malcolmang"},"content":"    private List\u003cString\u003e indentAndWrapText(String text) {","lastModifiedDate":"2022-08-27"},{"lineNumber":116,"author":{"gitId":"malcolmang"},"content":"        List\u003cString\u003e textRows \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-09-03"},{"lineNumber":117,"author":{"gitId":"malcolmang"},"content":"        for (String row : text.split(StringFormatting.LINE_BREAK)) {","lastModifiedDate":"2022-09-18"},{"lineNumber":118,"author":{"gitId":"malcolmang"},"content":"            textRows.addAll(indentAndWrapItem(row));","lastModifiedDate":"2022-08-27"},{"lineNumber":119,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-08-27"},{"lineNumber":120,"author":{"gitId":"malcolmang"},"content":"        return textRows;","lastModifiedDate":"2022-08-27"},{"lineNumber":121,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":122,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":123,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-08-27"},{"lineNumber":124,"author":{"gitId":"malcolmang"},"content":"     * Indents and wraps each individual row of text to be less wide","lastModifiedDate":"2022-08-27"},{"lineNumber":125,"author":{"gitId":"malcolmang"},"content":"     * or equal to {@link DialogBox#MAX_ROW_WIDTH}","lastModifiedDate":"2022-08-27"},{"lineNumber":126,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-08-27"},{"lineNumber":127,"author":{"gitId":"malcolmang"},"content":"     * @param item A string of text separated by line breaks","lastModifiedDate":"2022-08-27"},{"lineNumber":128,"author":{"gitId":"malcolmang"},"content":"     * @return indented and wrapped text for each item expressed as a list of strings","lastModifiedDate":"2022-08-27"},{"lineNumber":129,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-08-27"},{"lineNumber":130,"author":{"gitId":"malcolmang"},"content":"    private List\u003cString\u003e indentAndWrapItem(String item) {","lastModifiedDate":"2022-08-27"},{"lineNumber":131,"author":{"gitId":"malcolmang"},"content":"        isFirstLine \u003d true;","lastModifiedDate":"2022-08-27"},{"lineNumber":132,"author":{"gitId":"malcolmang"},"content":"        List\u003cString\u003e textRowsIndividual \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-08-27"},{"lineNumber":133,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":134,"author":{"gitId":"malcolmang"},"content":"        if (item.length() \u003c\u003d MAX_ROW_WIDTH) {","lastModifiedDate":"2022-08-27"},{"lineNumber":135,"author":{"gitId":"malcolmang"},"content":"            // if entire item is shorter or equal to max length,","lastModifiedDate":"2022-08-27"},{"lineNumber":136,"author":{"gitId":"malcolmang"},"content":"            // just return the entire row","lastModifiedDate":"2022-08-27"},{"lineNumber":137,"author":{"gitId":"malcolmang"},"content":"            textRowsIndividual.add(item);","lastModifiedDate":"2022-08-27"},{"lineNumber":138,"author":{"gitId":"malcolmang"},"content":"            return textRowsIndividual;","lastModifiedDate":"2022-08-27"},{"lineNumber":139,"author":{"gitId":"malcolmang"},"content":"        } else {","lastModifiedDate":"2022-08-27"},{"lineNumber":140,"author":{"gitId":"malcolmang"},"content":"            int indentLength \u003d 0;","lastModifiedDate":"2022-08-27"},{"lineNumber":141,"author":{"gitId":"malcolmang"},"content":"            int maxLength \u003d MAX_ROW_WIDTH;","lastModifiedDate":"2022-08-27"},{"lineNumber":142,"author":{"gitId":"malcolmang"},"content":"            String bufferString \u003d \"\";","lastModifiedDate":"2022-08-27"},{"lineNumber":143,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":144,"author":{"gitId":"malcolmang"},"content":"            // Add words to a single buffer string until the","lastModifiedDate":"2022-08-27"},{"lineNumber":145,"author":{"gitId":"malcolmang"},"content":"            // string is too long, then add entire buffer string","lastModifiedDate":"2022-08-27"},{"lineNumber":146,"author":{"gitId":"malcolmang"},"content":"            // as a row and repeat.","lastModifiedDate":"2022-08-27"},{"lineNumber":147,"author":{"gitId":"malcolmang"},"content":"            for (String word : item.split(Duke.STRING_DELIMITER)) {","lastModifiedDate":"2022-09-18"},{"lineNumber":148,"author":{"gitId":"malcolmang"},"content":"                if (word.length() \u003e maxLength) {","lastModifiedDate":"2022-08-27"},{"lineNumber":149,"author":{"gitId":"malcolmang"},"content":"                    // if word is longer than max length","lastModifiedDate":"2022-08-27"},{"lineNumber":150,"author":{"gitId":"malcolmang"},"content":"                    // split it into multiple chunks","lastModifiedDate":"2022-08-27"},{"lineNumber":151,"author":{"gitId":"malcolmang"},"content":"                    bufferString \u003d splitWord(word, textRowsIndividual, maxLength, bufferString);","lastModifiedDate":"2022-08-27"},{"lineNumber":152,"author":{"gitId":"malcolmang"},"content":"                    isFirstLine \u003d false;","lastModifiedDate":"2022-08-27"},{"lineNumber":153,"author":{"gitId":"malcolmang"},"content":"                    indentLength \u003d INDENT_SIZE;","lastModifiedDate":"2022-08-27"},{"lineNumber":154,"author":{"gitId":"malcolmang"},"content":"                    maxLength \u003d MAX_ROW_WIDTH - INDENT_SIZE;","lastModifiedDate":"2022-08-27"},{"lineNumber":155,"author":{"gitId":"malcolmang"},"content":"                    continue;","lastModifiedDate":"2022-08-27"},{"lineNumber":156,"author":{"gitId":"malcolmang"},"content":"                }","lastModifiedDate":"2022-08-27"},{"lineNumber":157,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":158,"author":{"gitId":"malcolmang"},"content":"                if (bufferString.length() + word.length() \u003e maxLength) {","lastModifiedDate":"2022-08-27"},{"lineNumber":159,"author":{"gitId":"malcolmang"},"content":"                    // if length of buffer string + new word exceeds max length","lastModifiedDate":"2022-08-27"},{"lineNumber":160,"author":{"gitId":"malcolmang"},"content":"                    // add buffer string as a new row and reset buffer string","lastModifiedDate":"2022-08-27"},{"lineNumber":161,"author":{"gitId":"malcolmang"},"content":"                    textRowsIndividual.add(generateIndent(indentLength, INDENT_CHARACTER) + bufferString.trim());","lastModifiedDate":"2022-08-27"},{"lineNumber":162,"author":{"gitId":"malcolmang"},"content":"                    bufferString \u003d \"\";","lastModifiedDate":"2022-08-27"},{"lineNumber":163,"author":{"gitId":"malcolmang"},"content":"                    isFirstLine \u003d false;","lastModifiedDate":"2022-08-27"},{"lineNumber":164,"author":{"gitId":"malcolmang"},"content":"                    indentLength \u003d INDENT_SIZE;","lastModifiedDate":"2022-08-27"},{"lineNumber":165,"author":{"gitId":"malcolmang"},"content":"                    maxLength \u003d MAX_ROW_WIDTH - INDENT_SIZE;","lastModifiedDate":"2022-08-27"},{"lineNumber":166,"author":{"gitId":"malcolmang"},"content":"                }","lastModifiedDate":"2022-08-27"},{"lineNumber":167,"author":{"gitId":"malcolmang"},"content":"                bufferString +\u003d word + Duke.STRING_DELIMITER;","lastModifiedDate":"2022-09-18"},{"lineNumber":168,"author":{"gitId":"malcolmang"},"content":"            }","lastModifiedDate":"2022-08-27"},{"lineNumber":169,"author":{"gitId":"malcolmang"},"content":"            //append any remaining string as the last row","lastModifiedDate":"2022-08-27"},{"lineNumber":170,"author":{"gitId":"malcolmang"},"content":"            textRowsIndividual.add(generateIndent(indentLength, INDENT_CHARACTER) + bufferString.trim());","lastModifiedDate":"2022-08-27"},{"lineNumber":171,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-08-27"},{"lineNumber":172,"author":{"gitId":"malcolmang"},"content":"        return textRowsIndividual;","lastModifiedDate":"2022-08-27"},{"lineNumber":173,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":174,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":175,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-08-27"},{"lineNumber":176,"author":{"gitId":"malcolmang"},"content":"     * Splits a word that is too long for the maximum length into chunks that","lastModifiedDate":"2022-08-27"},{"lineNumber":177,"author":{"gitId":"malcolmang"},"content":"     * can be indented and then added to the {@code textRows} list as rows","lastModifiedDate":"2022-08-27"},{"lineNumber":178,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-08-27"},{"lineNumber":179,"author":{"gitId":"malcolmang"},"content":"     * @param word         Text to be broken up into multiple rows","lastModifiedDate":"2022-08-27"},{"lineNumber":180,"author":{"gitId":"malcolmang"},"content":"     * @param textRows     List that the rows should be appended to","lastModifiedDate":"2022-08-27"},{"lineNumber":181,"author":{"gitId":"malcolmang"},"content":"     * @param maxLength    Maximum length that each row should wrap to","lastModifiedDate":"2022-08-27"},{"lineNumber":182,"author":{"gitId":"malcolmang"},"content":"     * @param bufferString The string to append the word to","lastModifiedDate":"2022-08-27"},{"lineNumber":183,"author":{"gitId":"malcolmang"},"content":"     * @return Any remaining string after the wrapping takes place","lastModifiedDate":"2022-08-27"},{"lineNumber":184,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-08-27"},{"lineNumber":185,"author":{"gitId":"malcolmang"},"content":"    private String splitWord(String word, List\u003cString\u003e textRows, int maxLength, String bufferString) {","lastModifiedDate":"2022-08-27"},{"lineNumber":186,"author":{"gitId":"malcolmang"},"content":"        int index \u003d 0;","lastModifiedDate":"2022-08-27"},{"lineNumber":187,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":188,"author":{"gitId":"malcolmang"},"content":"        // Add word to bufferString, so they get wrapped together as a single line of text","lastModifiedDate":"2022-08-27"},{"lineNumber":189,"author":{"gitId":"malcolmang"},"content":"        word \u003d bufferString + word;","lastModifiedDate":"2022-08-27"},{"lineNumber":190,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":191,"author":{"gitId":"malcolmang"},"content":"        if (isFirstLine) {","lastModifiedDate":"2022-08-27"},{"lineNumber":192,"author":{"gitId":"malcolmang"},"content":"            // if current line is the first in item, no indentation for the first row.","lastModifiedDate":"2022-08-27"},{"lineNumber":193,"author":{"gitId":"malcolmang"},"content":"            textRows.add(word.substring(index, maxLength));","lastModifiedDate":"2022-08-27"},{"lineNumber":194,"author":{"gitId":"malcolmang"},"content":"            index \u003d maxLength;","lastModifiedDate":"2022-08-27"},{"lineNumber":195,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":196,"author":{"gitId":"malcolmang"},"content":"            // all subsequent lines should have indentation","lastModifiedDate":"2022-08-27"},{"lineNumber":197,"author":{"gitId":"malcolmang"},"content":"            maxLength -\u003d INDENT_SIZE;","lastModifiedDate":"2022-08-27"},{"lineNumber":198,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-08-27"},{"lineNumber":199,"author":{"gitId":"malcolmang"},"content":"        for (; index \u003c word.length(); index +\u003d maxLength) {","lastModifiedDate":"2022-08-27"},{"lineNumber":200,"author":{"gitId":"malcolmang"},"content":"            // break up word into indented chunks","lastModifiedDate":"2022-08-27"},{"lineNumber":201,"author":{"gitId":"malcolmang"},"content":"            if (index + maxLength \u003e word.length()) {","lastModifiedDate":"2022-08-27"},{"lineNumber":202,"author":{"gitId":"malcolmang"},"content":"                return generateIndent(INDENT_SIZE, INDENT_CHARACTER) + word.substring(index) + Duke.STRING_DELIMITER;","lastModifiedDate":"2022-09-18"},{"lineNumber":203,"author":{"gitId":"malcolmang"},"content":"            }","lastModifiedDate":"2022-08-27"},{"lineNumber":204,"author":{"gitId":"malcolmang"},"content":"            textRows.add(generateIndent(INDENT_SIZE, INDENT_CHARACTER) + word.substring(index, index + maxLength));","lastModifiedDate":"2022-08-27"},{"lineNumber":205,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-08-27"},{"lineNumber":206,"author":{"gitId":"malcolmang"},"content":"        return word.substring(index);","lastModifiedDate":"2022-08-27"},{"lineNumber":207,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":208,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":209,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-08-27"},{"lineNumber":210,"author":{"gitId":"malcolmang"},"content":"     * Make an ASCII box to enclose (indented, wrapped) text.","lastModifiedDate":"2022-08-27"},{"lineNumber":211,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-08-27"},{"lineNumber":212,"author":{"gitId":"malcolmang"},"content":"     * @param textRows wrapped text to modify and add ASCII box to.","lastModifiedDate":"2022-08-27"},{"lineNumber":213,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-08-27"},{"lineNumber":214,"author":{"gitId":"malcolmang"},"content":"    private void makeBox(List\u003cString\u003e textRows) {","lastModifiedDate":"2022-08-27"},{"lineNumber":215,"author":{"gitId":"malcolmang"},"content":"        int width \u003d MAX_ROW_WIDTH + HORIZONTAL_PADDING * 2;","lastModifiedDate":"2022-08-27"},{"lineNumber":216,"author":{"gitId":"malcolmang"},"content":"        height \u003d textRows.size() + 2;","lastModifiedDate":"2022-08-27"},{"lineNumber":217,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":218,"author":{"gitId":"malcolmang"},"content":"        // Vertical lines at the side of the text","lastModifiedDate":"2022-08-27"},{"lineNumber":219,"author":{"gitId":"malcolmang"},"content":"        for (String row : textRows) {","lastModifiedDate":"2022-08-27"},{"lineNumber":220,"author":{"gitId":"malcolmang"},"content":"            textBoxRows.add(\" \" + LINE_VERTICAL_CHARACTER + generateIndent(HORIZONTAL_PADDING, INDENT_CHARACTER)","lastModifiedDate":"2022-08-27"},{"lineNumber":221,"author":{"gitId":"malcolmang"},"content":"                    + row + generateIndent(width - row.length() - HORIZONTAL_PADDING, INDENT_CHARACTER)","lastModifiedDate":"2022-09-18"},{"lineNumber":222,"author":{"gitId":"malcolmang"},"content":"                    + LINE_VERTICAL_CHARACTER);","lastModifiedDate":"2022-09-03"},{"lineNumber":223,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-08-27"},{"lineNumber":224,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":225,"author":{"gitId":"malcolmang"},"content":"        // Horizontal lines to close the box","lastModifiedDate":"2022-08-27"},{"lineNumber":226,"author":{"gitId":"malcolmang"},"content":"        textBoxRows.add(0, \"  \" + generateIndent(width, LINE_HORIZONTAL_CHARACTER));","lastModifiedDate":"2022-08-27"},{"lineNumber":227,"author":{"gitId":"malcolmang"},"content":"        textBoxRows.add(\"/ \" + generateIndent(width, LINE_HORIZONTAL_CHARACTER));","lastModifiedDate":"2022-08-27"},{"lineNumber":228,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":229,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":230,"author":{"gitId":"malcolmang"},"content":"    public int getHeight() {","lastModifiedDate":"2022-08-27"},{"lineNumber":231,"author":{"gitId":"malcolmang"},"content":"        return height;","lastModifiedDate":"2022-08-27"},{"lineNumber":232,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":233,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":234,"author":{"gitId":"malcolmang"},"content":"    public List\u003cString\u003e getTextBox() {","lastModifiedDate":"2022-08-27"},{"lineNumber":235,"author":{"gitId":"malcolmang"},"content":"        return textBoxRows;","lastModifiedDate":"2022-08-27"},{"lineNumber":236,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":237,"author":{"gitId":"malcolmang"},"content":"}","lastModifiedDate":"2022-08-27"}],"authorContributionMap":{"malcolmang":237}},{"path":"src/main/java/duke/ui/StringFormatting.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"malcolmang"},"content":"package duke.ui;","lastModifiedDate":"2022-09-10"},{"lineNumber":2,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":3,"author":{"gitId":"malcolmang"},"content":"import duke.Duke;","lastModifiedDate":"2022-09-10"},{"lineNumber":4,"author":{"gitId":"malcolmang"},"content":"import duke.io.Storage;","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":6,"author":{"gitId":"malcolmang"},"content":"/**","lastModifiedDate":"2022-09-10"},{"lineNumber":7,"author":{"gitId":"malcolmang"},"content":" * Class to help with formatting strings for printing in the UI.","lastModifiedDate":"2022-09-10"},{"lineNumber":8,"author":{"gitId":"malcolmang"},"content":" */","lastModifiedDate":"2022-09-10"},{"lineNumber":9,"author":{"gitId":"malcolmang"},"content":"public class StringFormatting {","lastModifiedDate":"2022-09-10"},{"lineNumber":10,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":11,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":12,"author":{"gitId":"malcolmang"},"content":"     * Line break character","lastModifiedDate":"2022-09-18"},{"lineNumber":13,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":14,"author":{"gitId":"malcolmang"},"content":"    public static final String LINE_BREAK \u003d \"\\n\";","lastModifiedDate":"2022-09-18"},{"lineNumber":15,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"malcolmang"},"content":"    private static final String STRING_GREETING \u003d \"Good morning!\";","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"malcolmang"},"content":"    private static final String STRING_GOODBYE \u003d \"Alright! Your list has been saved successfully.\"","lastModifiedDate":"2022-09-18"},{"lineNumber":18,"author":{"gitId":"malcolmang"},"content":"            + LINE_BREAK + LINE_BREAK + \"See you around!\";","lastModifiedDate":"2022-09-18"},{"lineNumber":19,"author":{"gitId":"malcolmang"},"content":"    private static final String STRING_LOADED \u003d \"A save file was found and loaded successfully.\";","lastModifiedDate":"2022-09-11"},{"lineNumber":20,"author":{"gitId":"malcolmang"},"content":"    private static final String STRING_NOT_LOADED \u003d \"No save file was found, or the format was improper.\";","lastModifiedDate":"2022-09-11"},{"lineNumber":21,"author":{"gitId":"malcolmang"},"content":"    private static final String STRING_ASK_FOR_INPUT \u003d \"What would you like to do today?\";","lastModifiedDate":"2022-09-18"},{"lineNumber":22,"author":{"gitId":"malcolmang"},"content":"    private static final int INPUT_INDENT_SIZE \u003d 4;","lastModifiedDate":"2022-09-18"},{"lineNumber":23,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":24,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":25,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":26,"author":{"gitId":"malcolmang"},"content":"     * Formats a string to say how many tasks there are based on given integer.","lastModifiedDate":"2022-09-10"},{"lineNumber":27,"author":{"gitId":"malcolmang"},"content":"     * Accounts for singular vs plural (1 task vs 2 tasks, is vs are).","lastModifiedDate":"2022-09-10"},{"lineNumber":28,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":29,"author":{"gitId":"malcolmang"},"content":"     * @param numberOfTasks number of tasks","lastModifiedDate":"2022-09-10"},{"lineNumber":30,"author":{"gitId":"malcolmang"},"content":"     * @return formatted string","lastModifiedDate":"2022-09-10"},{"lineNumber":31,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":32,"author":{"gitId":"malcolmang"},"content":"    public static String formatNumberOfTasksString(int numberOfTasks) {","lastModifiedDate":"2022-09-10"},{"lineNumber":33,"author":{"gitId":"malcolmang"},"content":"        if (numberOfTasks \u003d\u003d 1) {","lastModifiedDate":"2022-09-18"},{"lineNumber":34,"author":{"gitId":"malcolmang"},"content":"            return LINE_BREAK + \"There \" + \"is\"","lastModifiedDate":"2022-09-18"},{"lineNumber":35,"author":{"gitId":"malcolmang"},"content":"                    + \" currently \" + numberOfTasks + \" task in your list.\";","lastModifiedDate":"2022-09-18"},{"lineNumber":36,"author":{"gitId":"malcolmang"},"content":"        } else {","lastModifiedDate":"2022-09-18"},{"lineNumber":37,"author":{"gitId":"malcolmang"},"content":"            return LINE_BREAK + \"There \" + \"are\"","lastModifiedDate":"2022-09-18"},{"lineNumber":38,"author":{"gitId":"malcolmang"},"content":"                    + \" currently \" + numberOfTasks + \" tasks in your list.\";","lastModifiedDate":"2022-09-18"},{"lineNumber":39,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":40,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":41,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":42,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":43,"author":{"gitId":"malcolmang"},"content":"     * Gets greeting string {@link StringFormatting#STRING_GREETING}","lastModifiedDate":"2022-09-10"},{"lineNumber":44,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":45,"author":{"gitId":"malcolmang"},"content":"     * @return greetings string","lastModifiedDate":"2022-09-10"},{"lineNumber":46,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":47,"author":{"gitId":"malcolmang"},"content":"    public static String getGreeting() {","lastModifiedDate":"2022-09-10"},{"lineNumber":48,"author":{"gitId":"malcolmang"},"content":"        String bufferString \u003d STRING_GREETING + LINE_BREAK + LINE_BREAK;","lastModifiedDate":"2022-09-18"},{"lineNumber":49,"author":{"gitId":"malcolmang"},"content":"        if (Storage.isLoaded()) {","lastModifiedDate":"2022-09-18"},{"lineNumber":50,"author":{"gitId":"malcolmang"},"content":"            bufferString +\u003d STRING_LOADED;","lastModifiedDate":"2022-09-11"},{"lineNumber":51,"author":{"gitId":"malcolmang"},"content":"        } else {","lastModifiedDate":"2022-09-11"},{"lineNumber":52,"author":{"gitId":"malcolmang"},"content":"            bufferString +\u003d STRING_NOT_LOADED;","lastModifiedDate":"2022-09-11"},{"lineNumber":53,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-09-11"},{"lineNumber":54,"author":{"gitId":"malcolmang"},"content":"        return bufferString + formatNumberOfTasksString(Duke.TASK_LIST.getItemCount())","lastModifiedDate":"2022-09-18"},{"lineNumber":55,"author":{"gitId":"malcolmang"},"content":"                + LINE_BREAK + LINE_BREAK + STRING_ASK_FOR_INPUT;","lastModifiedDate":"2022-09-18"},{"lineNumber":56,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":57,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":58,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":59,"author":{"gitId":"malcolmang"},"content":"     * Gets goodbye string {@link StringFormatting#STRING_GOODBYE}","lastModifiedDate":"2022-09-10"},{"lineNumber":60,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":61,"author":{"gitId":"malcolmang"},"content":"     * @return goodbye string","lastModifiedDate":"2022-09-10"},{"lineNumber":62,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":63,"author":{"gitId":"malcolmang"},"content":"    public static String getGoodbye() {","lastModifiedDate":"2022-09-10"},{"lineNumber":64,"author":{"gitId":"malcolmang"},"content":"        return STRING_GOODBYE;","lastModifiedDate":"2022-09-10"},{"lineNumber":65,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":66,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":67,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":68,"author":{"gitId":"malcolmang"},"content":"     * Formats string for marking/unmarking confirmation.","lastModifiedDate":"2022-09-10"},{"lineNumber":69,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":70,"author":{"gitId":"malcolmang"},"content":"     * @param textOfItem task text","lastModifiedDate":"2022-09-10"},{"lineNumber":71,"author":{"gitId":"malcolmang"},"content":"     * @param done       true if task is being marked done, false if not.","lastModifiedDate":"2022-09-10"},{"lineNumber":72,"author":{"gitId":"malcolmang"},"content":"     * @return formatted string","lastModifiedDate":"2022-09-10"},{"lineNumber":73,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":74,"author":{"gitId":"malcolmang"},"content":"    public static String formatMarkOrUnmarkString(String textOfItem, boolean done) {","lastModifiedDate":"2022-09-10"},{"lineNumber":75,"author":{"gitId":"malcolmang"},"content":"        return \"Marked task \\\"\" + textOfItem + \"\\\" as \" + (done ? \"done\" : \"not yet done\") + \".\";","lastModifiedDate":"2022-09-10"},{"lineNumber":76,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":77,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":78,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":79,"author":{"gitId":"malcolmang"},"content":"     * Formats string for when an item is added.","lastModifiedDate":"2022-09-10"},{"lineNumber":80,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":81,"author":{"gitId":"malcolmang"},"content":"     * @param textOfItem task text","lastModifiedDate":"2022-09-10"},{"lineNumber":82,"author":{"gitId":"malcolmang"},"content":"     * @return formatted string","lastModifiedDate":"2022-09-10"},{"lineNumber":83,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":84,"author":{"gitId":"malcolmang"},"content":"    public static String formatAddString(String textOfItem) {","lastModifiedDate":"2022-09-10"},{"lineNumber":85,"author":{"gitId":"malcolmang"},"content":"        return \"Added \\\"\" + textOfItem + \"\\\" to your list.\";","lastModifiedDate":"2022-09-15"},{"lineNumber":86,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":87,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":88,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-10"},{"lineNumber":89,"author":{"gitId":"malcolmang"},"content":"     * Formats string for when an item is deleted.","lastModifiedDate":"2022-09-10"},{"lineNumber":90,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-09-10"},{"lineNumber":91,"author":{"gitId":"malcolmang"},"content":"     * @param textOfItem task text","lastModifiedDate":"2022-09-10"},{"lineNumber":92,"author":{"gitId":"malcolmang"},"content":"     * @return formatted string","lastModifiedDate":"2022-09-10"},{"lineNumber":93,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-10"},{"lineNumber":94,"author":{"gitId":"malcolmang"},"content":"    public static String formatDeleteString(String textOfItem) {","lastModifiedDate":"2022-09-10"},{"lineNumber":95,"author":{"gitId":"malcolmang"},"content":"        return \"Deleted task \\\"\" + textOfItem + \"\\\" from your list.\";","lastModifiedDate":"2022-09-15"},{"lineNumber":96,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":97,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":98,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":99,"author":{"gitId":"malcolmang"},"content":"     * @return Formats the ask for input dialog at the bottom of the UI.","lastModifiedDate":"2022-09-18"},{"lineNumber":100,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":101,"author":{"gitId":"malcolmang"},"content":"    public static String formatInput() {","lastModifiedDate":"2022-09-18"},{"lineNumber":102,"author":{"gitId":"malcolmang"},"content":"        return LINE_BREAK + \"What would you like to do?\" + LINE_BREAK + \"INPUT:\"","lastModifiedDate":"2022-09-18"},{"lineNumber":103,"author":{"gitId":"malcolmang"},"content":"                + DialogBox.generateIndent(INPUT_INDENT_SIZE, DialogBox.INDENT_CHARACTER);","lastModifiedDate":"2022-09-18"},{"lineNumber":104,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":105,"author":{"gitId":"malcolmang"},"content":"}","lastModifiedDate":"2022-09-10"}],"authorContributionMap":{"malcolmang":105}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"malcolmang"},"content":"package duke.ui;","lastModifiedDate":"2022-09-03"},{"lineNumber":2,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":3,"author":{"gitId":"malcolmang"},"content":"import java.io.IOException;","lastModifiedDate":"2022-08-27"},{"lineNumber":4,"author":{"gitId":"malcolmang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-08-27"},{"lineNumber":5,"author":{"gitId":"malcolmang"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-08-27"},{"lineNumber":6,"author":{"gitId":"malcolmang"},"content":"import java.util.List;","lastModifiedDate":"2022-08-27"},{"lineNumber":7,"author":{"gitId":"malcolmang"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-08-27"},{"lineNumber":8,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":9,"author":{"gitId":"malcolmang"},"content":"/**","lastModifiedDate":"2022-08-27"},{"lineNumber":10,"author":{"gitId":"malcolmang"},"content":" * Class to control the user interface (getting input from user, displaying prompts etc.)","lastModifiedDate":"2022-09-03"},{"lineNumber":11,"author":{"gitId":"malcolmang"},"content":" * Displays a box of text overlaid on some ASCII art.","lastModifiedDate":"2022-08-27"},{"lineNumber":12,"author":{"gitId":"malcolmang"},"content":" */","lastModifiedDate":"2022-08-27"},{"lineNumber":13,"author":{"gitId":"malcolmang"},"content":"public class Ui {","lastModifiedDate":"2022-09-18"},{"lineNumber":14,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-08-27"},{"lineNumber":15,"author":{"gitId":"malcolmang"},"content":"     * Maximum width of the console the application will run in.","lastModifiedDate":"2022-08-27"},{"lineNumber":16,"author":{"gitId":"malcolmang"},"content":"     * Default: 80","lastModifiedDate":"2022-08-27"},{"lineNumber":17,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-08-27"},{"lineNumber":18,"author":{"gitId":"malcolmang"},"content":"    private static final int MAX_WIDTH \u003d 80;","lastModifiedDate":"2022-08-27"},{"lineNumber":19,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":20,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-08-27"},{"lineNumber":21,"author":{"gitId":"malcolmang"},"content":"     * Horizontal position that the box of text will be positioned at.","lastModifiedDate":"2022-08-27"},{"lineNumber":22,"author":{"gitId":"malcolmang"},"content":"     * (Left-align)","lastModifiedDate":"2022-08-27"},{"lineNumber":23,"author":{"gitId":"malcolmang"},"content":"     * Default: 46","lastModifiedDate":"2022-08-27"},{"lineNumber":24,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-08-27"},{"lineNumber":25,"author":{"gitId":"malcolmang"},"content":"    private static final int TEXTBOX_HORIZONTAL_POSITION \u003d 46;","lastModifiedDate":"2022-08-27"},{"lineNumber":26,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":27,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-08-27"},{"lineNumber":28,"author":{"gitId":"malcolmang"},"content":"     * Vertical position that the box of text will be positioned at.","lastModifiedDate":"2022-08-27"},{"lineNumber":29,"author":{"gitId":"malcolmang"},"content":"     * (Bottom-align)","lastModifiedDate":"2022-08-27"},{"lineNumber":30,"author":{"gitId":"malcolmang"},"content":"     * Default: 20","lastModifiedDate":"2022-08-27"},{"lineNumber":31,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-08-27"},{"lineNumber":32,"author":{"gitId":"malcolmang"},"content":"    private static final int TEXTBOX_VERTICAL_POSITION \u003d 20;","lastModifiedDate":"2022-08-27"},{"lineNumber":33,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":34,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":35,"author":{"gitId":"malcolmang"},"content":"     * Scanner used to read input.","lastModifiedDate":"2022-09-18"},{"lineNumber":36,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":37,"author":{"gitId":"malcolmang"},"content":"    private static final Scanner READER \u003d new Scanner(System.in);","lastModifiedDate":"2022-08-27"},{"lineNumber":38,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":39,"author":{"gitId":"malcolmang"},"content":"    private static final String ASCII_ART \u003d","lastModifiedDate":"2022-08-27"},{"lineNumber":40,"author":{"gitId":"malcolmang"},"content":"            //@@author Chris Johnson-reused","lastModifiedDate":"2022-08-27"},{"lineNumber":41,"author":{"gitId":"malcolmang"},"content":"            //ASCII Art reused from https://asciiart.website/index.php?art\u003dpeople/chris%20johnson","lastModifiedDate":"2022-08-27"},{"lineNumber":42,"author":{"gitId":"malcolmang"},"content":"            //with minor modifications","lastModifiedDate":"2022-08-27"},{"lineNumber":43,"author":{"gitId":"malcolmang"},"content":"            \"                   ,X#N#####;.                      \\n\" +","lastModifiedDate":"2022-08-27"},{"lineNumber":44,"author":{"gitId":"malcolmang"},"content":"            \"                p####Q#@@@##8##s;                   \\n\" +","lastModifiedDate":"2022-08-27"},{"lineNumber":45,"author":{"gitId":"malcolmang"},"content":"            \"             p#         #   @ ####QNp@.,            \\n\" +","lastModifiedDate":"2022-08-27"},{"lineNumber":46,"author":{"gitId":"malcolmang"},"content":"            \"           ,#     88bb## # @     #####@@            \\n\" +","lastModifiedDate":"2022-08-27"},{"lineNumber":47,"author":{"gitId":"malcolmang"},"content":"            \"          p##@ @8\u0027      ` ^\\\"\\\"\\\"T\\\"T8b88###            \\n\" +","lastModifiedDate":"2022-08-27"},{"lineNumber":48,"author":{"gitId":"malcolmang"},"content":"            \"         b#  ##8*                      ##           \\n\" +","lastModifiedDate":"2022-08-27"},{"lineNumber":49,"author":{"gitId":"malcolmang"},"content":"            \"         ###@#8G                    .: b#@          \\n\" +","lastModifiedDate":"2022-08-27"},{"lineNumber":50,"author":{"gitId":"malcolmang"},"content":"            \"         ###$vfG                    GG b##          \\n\" +","lastModifiedDate":"2022-08-27"},{"lineNumber":51,"author":{"gitId":"malcolmang"},"content":"            \"        bN#@$Sl*                   ^GG:S##          \\n\" +","lastModifiedDate":"2022-08-27"},{"lineNumber":52,"author":{"gitId":"malcolmang"},"content":"            \"        #NQGS\\\"                     GGGGN#G          \\n\" +","lastModifiedDate":"2022-08-27"},{"lineNumber":53,"author":{"gitId":"malcolmang"},"content":"            \"        S##$!*  ppS####s;,         ^Gpll@Q          \\n\" +","lastModifiedDate":"2022-08-27"},{"lineNumber":54,"author":{"gitId":"malcolmang"},"content":"            \"        ###9   `\u0027oG\\\\\\\"###89   pQ#####s.Gb#G          \\n\" +","lastModifiedDate":"2022-08-27"},{"lineNumber":55,"author":{"gitId":"malcolmang"},"content":"            \"        G#QGo:* Tb7778bo\\\"*  p@5#@@Qs|#Gb@#          \\n\" +","lastModifiedDate":"2022-08-27"},{"lineNumber":56,"author":{"gitId":"malcolmang"},"content":"            \"        |GG!       \u0027`  \u0027 *  bb#G ^b#@3{b#\\\\          \\n\" +","lastModifiedDate":"2022-08-27"},{"lineNumber":57,"author":{"gitId":"malcolmang"},"content":"            \"        /pGG!:              G^       CG#@@          \\n\" +","lastModifiedDate":"2022-08-27"},{"lineNumber":58,"author":{"gitId":"malcolmang"},"content":"            \"         ^GGG      v? ;     p9$,     pG#@           \\n\" +","lastModifiedDate":"2022-08-27"},{"lineNumber":59,"author":{"gitId":"malcolmang"},"content":"            \"          f: .  pl  GG+b#;pN#8lGG,  pS@G\u0027           \\n\" +","lastModifiedDate":"2022-08-27"},{"lineNumber":60,"author":{"gitId":"malcolmang"},"content":"            \"           GG * b\\\"##ss,  ^\\\"^GGQSGblGGl@             \\n\" +","lastModifiedDate":"2022-08-27"},{"lineNumber":61,"author":{"gitId":"malcolmang"},"content":"            \"           GG:C! .  Go., ^ ^D#57^7 #1               \\n\" +","lastModifiedDate":"2022-08-27"},{"lineNumber":62,"author":{"gitId":"malcolmang"},"content":"            \"            lG G)   ;     GGGQlG\\\"p#@                \\n\" +","lastModifiedDate":"2022-08-27"},{"lineNumber":63,"author":{"gitId":"malcolmang"},"content":"            \"          NGb#j    + ^G;GGpSS#3pN#@                 \\n\" +","lastModifiedDate":"2022-08-27"},{"lineNumber":64,"author":{"gitId":"malcolmang"},"content":"            \"  ,wmM####@GGb##;G       \u0027^GGGQ#@`                  \\n\" +","lastModifiedDate":"2022-08-27"},{"lineNumber":65,"author":{"gitId":"malcolmang"},"content":"            \"######### @GGCG###;;.      pS###@#s,                \\n\" +","lastModifiedDate":"2022-08-27"},{"lineNumber":66,"author":{"gitId":"malcolmang"},"content":"            \"######### @GGGGGGG#######N######   ####s,.          \\n\" +","lastModifiedDate":"2022-08-27"},{"lineNumber":67,"author":{"gitId":"malcolmang"},"content":"            \"##########@G GGGGG GGGG########     ##@####s,       \\n\" +","lastModifiedDate":"2022-08-27"},{"lineNumber":68,"author":{"gitId":"malcolmang"},"content":"            \"###########S.   GG  CGGS#######   #  # ########s,   \\n\" +","lastModifiedDate":"2022-08-27"},{"lineNumber":69,"author":{"gitId":"malcolmang"},"content":"            \"##### ######;G   ^\u0027\u0027 ~^GGSGGQ#   # #   ############,\";","lastModifiedDate":"2022-08-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            //@@author","lastModifiedDate":"2022-08-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * ASCII art from {@link Ui#ASCII_ART} expressed as a list of strings, where each row is a string","lastModifiedDate":"2022-09-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e textRows \u003d Arrays.asList(ASCII_ART.split(\"\\n\"));","lastModifiedDate":"2022-08-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-08-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Function to clear the console. Does not work in the IDE.","lastModifiedDate":"2022-08-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-08-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    //@@author Abishek Kashyap-reused","lastModifiedDate":"2022-08-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    //Code reused from https://stackoverflow.com/a/38365871","lastModifiedDate":"2022-08-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    //with minor modifications","lastModifiedDate":"2022-08-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private static void clearScreen() {","lastModifiedDate":"2022-08-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        //Clears Screen in java","lastModifiedDate":"2022-08-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2022-08-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            if (System.getProperty(\"os.name\").contains(\"Windows\")) {","lastModifiedDate":"2022-08-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                new ProcessBuilder(\"cmd\", \"/c\", \"cls\").inheritIO().start().waitFor();","lastModifiedDate":"2022-08-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2022-08-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                Runtime.getRuntime().exec(\"clear\");","lastModifiedDate":"2022-08-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2022-08-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        } catch (IOException | InterruptedException ignored) {","lastModifiedDate":"2022-08-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-08-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    //@@author","lastModifiedDate":"2022-08-27"},{"lineNumber":95,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":96,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-08-27"},{"lineNumber":97,"author":{"gitId":"malcolmang"},"content":"     * Prints text, formatted with ASCII art and a text box, to console.","lastModifiedDate":"2022-08-27"},{"lineNumber":98,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-08-27"},{"lineNumber":99,"author":{"gitId":"malcolmang"},"content":"     * @param text text to be printed","lastModifiedDate":"2022-08-27"},{"lineNumber":100,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-08-27"},{"lineNumber":101,"author":{"gitId":"malcolmang"},"content":"    public static void print(String text) {","lastModifiedDate":"2022-08-27"},{"lineNumber":102,"author":{"gitId":"malcolmang"},"content":"        DialogBox textBox \u003d new DialogBox(text, MAX_WIDTH, TEXTBOX_HORIZONTAL_POSITION);","lastModifiedDate":"2022-08-27"},{"lineNumber":103,"author":{"gitId":"malcolmang"},"content":"        int rowIndex \u003d 0;","lastModifiedDate":"2022-08-27"},{"lineNumber":104,"author":{"gitId":"malcolmang"},"content":"        int textBoxIndex \u003d 0;","lastModifiedDate":"2022-08-27"},{"lineNumber":105,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":106,"author":{"gitId":"malcolmang"},"content":"        // Vertical range that the text box should overlay onto","lastModifiedDate":"2022-08-27"},{"lineNumber":107,"author":{"gitId":"malcolmang"},"content":"        int textBoxUpperBounds \u003d TEXTBOX_VERTICAL_POSITION - textBox.getHeight();","lastModifiedDate":"2022-08-27"},{"lineNumber":108,"author":{"gitId":"malcolmang"},"content":"        int textBoxLowerBounds \u003d TEXTBOX_VERTICAL_POSITION;","lastModifiedDate":"2022-08-27"},{"lineNumber":109,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":110,"author":{"gitId":"malcolmang"},"content":"        // Makes sure ASCII art can fit entire text box","lastModifiedDate":"2022-08-27"},{"lineNumber":111,"author":{"gitId":"malcolmang"},"content":"        List\u003cString\u003e outputTextRows \u003d extendScreen(textBoxUpperBounds);","lastModifiedDate":"2022-08-27"},{"lineNumber":112,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":113,"author":{"gitId":"malcolmang"},"content":"        // If screen was extended, adjust upper and lower bounds to fit the box","lastModifiedDate":"2022-08-27"},{"lineNumber":114,"author":{"gitId":"malcolmang"},"content":"        if (outputTextRows.size() !\u003d textRows.size()) {","lastModifiedDate":"2022-08-27"},{"lineNumber":115,"author":{"gitId":"malcolmang"},"content":"            textBoxLowerBounds -\u003d textBoxUpperBounds - 1;","lastModifiedDate":"2022-08-27"},{"lineNumber":116,"author":{"gitId":"malcolmang"},"content":"            textBoxUpperBounds \u003d 0;","lastModifiedDate":"2022-08-27"},{"lineNumber":117,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-08-27"},{"lineNumber":118,"author":{"gitId":"malcolmang"},"content":"        clearScreen();","lastModifiedDate":"2022-08-27"},{"lineNumber":119,"author":{"gitId":"malcolmang"},"content":"        // add some empty space at the top of the window for aesthetic reasons","lastModifiedDate":"2022-08-28"},{"lineNumber":120,"author":{"gitId":"malcolmang"},"content":"        System.out.println();","lastModifiedDate":"2022-08-28"},{"lineNumber":121,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":122,"author":{"gitId":"malcolmang"},"content":"        // replace text at bounds with text box at specified position","lastModifiedDate":"2022-08-27"},{"lineNumber":123,"author":{"gitId":"malcolmang"},"content":"        for (String row : outputTextRows) {","lastModifiedDate":"2022-08-27"},{"lineNumber":124,"author":{"gitId":"malcolmang"},"content":"            rowIndex++;","lastModifiedDate":"2022-08-27"},{"lineNumber":125,"author":{"gitId":"malcolmang"},"content":"            if (rowIndex \u003c textBoxLowerBounds \u0026\u0026 rowIndex \u003e\u003d textBoxUpperBounds) {","lastModifiedDate":"2022-08-27"},{"lineNumber":126,"author":{"gitId":"malcolmang"},"content":"                row \u003d row.substring(0, TEXTBOX_HORIZONTAL_POSITION)","lastModifiedDate":"2022-08-27"},{"lineNumber":127,"author":{"gitId":"malcolmang"},"content":"                        + textBox.getTextBox().get(textBoxIndex);","lastModifiedDate":"2022-08-27"},{"lineNumber":128,"author":{"gitId":"malcolmang"},"content":"                textBoxIndex++;","lastModifiedDate":"2022-08-27"},{"lineNumber":129,"author":{"gitId":"malcolmang"},"content":"            }","lastModifiedDate":"2022-08-27"},{"lineNumber":130,"author":{"gitId":"malcolmang"},"content":"            System.out.println(row);","lastModifiedDate":"2022-08-27"},{"lineNumber":131,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-08-27"},{"lineNumber":132,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":133,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":134,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-08-27"},{"lineNumber":135,"author":{"gitId":"malcolmang"},"content":"     * Extends {@link Ui#textRows} to fit text box if needed","lastModifiedDate":"2022-09-18"},{"lineNumber":136,"author":{"gitId":"malcolmang"},"content":"     * (in case of vertical overflow)","lastModifiedDate":"2022-08-27"},{"lineNumber":137,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-08-27"},{"lineNumber":138,"author":{"gitId":"malcolmang"},"content":"     * @param difference difference in height that must be accounted for (negative implies overflow)","lastModifiedDate":"2022-08-27"},{"lineNumber":139,"author":{"gitId":"malcolmang"},"content":"     * @return list of string tthat may have been extended","lastModifiedDate":"2022-08-27"},{"lineNumber":140,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-08-27"},{"lineNumber":141,"author":{"gitId":"malcolmang"},"content":"    public static List\u003cString\u003e extendScreen(int difference) {","lastModifiedDate":"2022-08-27"},{"lineNumber":142,"author":{"gitId":"malcolmang"},"content":"        List\u003cString\u003e outputRows \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-08-27"},{"lineNumber":143,"author":{"gitId":"malcolmang"},"content":"        if (difference \u003c\u003d 0) {","lastModifiedDate":"2022-08-27"},{"lineNumber":144,"author":{"gitId":"malcolmang"},"content":"            // If there is overflow (difference is negative or 0)","lastModifiedDate":"2022-08-27"},{"lineNumber":145,"author":{"gitId":"malcolmang"},"content":"            // Add (-difference) number of empty rows to outputRows","lastModifiedDate":"2022-08-27"},{"lineNumber":146,"author":{"gitId":"malcolmang"},"content":"            for (int i \u003d 0; i \u003e\u003d difference; i--) {","lastModifiedDate":"2022-08-27"},{"lineNumber":147,"author":{"gitId":"malcolmang"},"content":"                outputRows.add(0, DialogBox.generateIndent(MAX_WIDTH, DialogBox.INDENT_CHARACTER));","lastModifiedDate":"2022-09-18"},{"lineNumber":148,"author":{"gitId":"malcolmang"},"content":"            }","lastModifiedDate":"2022-08-27"},{"lineNumber":149,"author":{"gitId":"malcolmang"},"content":"        }","lastModifiedDate":"2022-08-27"},{"lineNumber":150,"author":{"gitId":"malcolmang"},"content":"        // Add the ASCII art","lastModifiedDate":"2022-08-27"},{"lineNumber":151,"author":{"gitId":"malcolmang"},"content":"        outputRows.addAll(textRows);","lastModifiedDate":"2022-08-27"},{"lineNumber":152,"author":{"gitId":"malcolmang"},"content":"        return outputRows;","lastModifiedDate":"2022-08-27"},{"lineNumber":153,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":154,"author":{"gitId":"malcolmang"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":155,"author":{"gitId":"malcolmang"},"content":"    /**","lastModifiedDate":"2022-08-27"},{"lineNumber":156,"author":{"gitId":"malcolmang"},"content":"     * Gets input from the user","lastModifiedDate":"2022-08-27"},{"lineNumber":157,"author":{"gitId":"malcolmang"},"content":"     *","lastModifiedDate":"2022-08-27"},{"lineNumber":158,"author":{"gitId":"malcolmang"},"content":"     * @return input string from user","lastModifiedDate":"2022-08-27"},{"lineNumber":159,"author":{"gitId":"malcolmang"},"content":"     */","lastModifiedDate":"2022-08-27"},{"lineNumber":160,"author":{"gitId":"malcolmang"},"content":"    public static String getInput() {","lastModifiedDate":"2022-08-27"},{"lineNumber":161,"author":{"gitId":"malcolmang"},"content":"        System.out.print(StringFormatting.formatInput());","lastModifiedDate":"2022-09-18"},{"lineNumber":162,"author":{"gitId":"malcolmang"},"content":"        return READER.nextLine().trim();","lastModifiedDate":"2022-08-27"},{"lineNumber":163,"author":{"gitId":"malcolmang"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":164,"author":{"gitId":"malcolmang"},"content":"}","lastModifiedDate":"2022-08-27"}],"authorContributionMap":{"malcolmang":139,"-":25}}]
