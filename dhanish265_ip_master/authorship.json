[{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dhanish265"},"content":"package duke;","lastModifiedDate":"2022-09-06"},{"lineNumber":2,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-06"},{"lineNumber":3,"author":{"gitId":"dhanish265"},"content":"import duke.commands.Command;","lastModifiedDate":"2022-09-26"},{"lineNumber":4,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-08-20"},{"lineNumber":5,"author":{"gitId":"dhanish265"},"content":"/**","lastModifiedDate":"2022-09-28"},{"lineNumber":6,"author":{"gitId":"dhanish265"},"content":" * This is the main class that starts the program and runs the main logic of accepting input and responding in kind.","lastModifiedDate":"2022-09-28"},{"lineNumber":7,"author":{"gitId":"dhanish265"},"content":" *","lastModifiedDate":"2022-09-28"},{"lineNumber":8,"author":{"gitId":"dhanish265"},"content":" * @author Dhanish","lastModifiedDate":"2022-09-28"},{"lineNumber":9,"author":{"gitId":"dhanish265"},"content":" */","lastModifiedDate":"2022-09-28"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-08-20"},{"lineNumber":12,"author":{"gitId":"dhanish265"},"content":"    private final Ui ui;","lastModifiedDate":"2022-09-28"},{"lineNumber":13,"author":{"gitId":"dhanish265"},"content":"    private final TaskList taskList;","lastModifiedDate":"2022-09-28"},{"lineNumber":14,"author":{"gitId":"dhanish265"},"content":"    private final Storage storage;","lastModifiedDate":"2022-09-28"},{"lineNumber":15,"author":{"gitId":"dhanish265"},"content":"    private static final int NORMAL_EXIT_VALUE \u003d 0;","lastModifiedDate":"2022-09-26"},{"lineNumber":16,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":17,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":18,"author":{"gitId":"dhanish265"},"content":"     * Constructor that creates necessary objects for program function, such as {@code Ui}, {@code taskList} and {@code storage}.","lastModifiedDate":"2022-09-28"},{"lineNumber":19,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":20,"author":{"gitId":"dhanish265"},"content":"    public Duke() {","lastModifiedDate":"2022-09-26"},{"lineNumber":21,"author":{"gitId":"dhanish265"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2022-09-26"},{"lineNumber":22,"author":{"gitId":"dhanish265"},"content":"        taskList \u003d new TaskList();","lastModifiedDate":"2022-09-26"},{"lineNumber":23,"author":{"gitId":"dhanish265"},"content":"        storage \u003d new Storage();","lastModifiedDate":"2022-09-26"},{"lineNumber":24,"author":{"gitId":"dhanish265"},"content":"        storage.loadData(taskList);","lastModifiedDate":"2022-09-26"},{"lineNumber":25,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-08-14"},{"lineNumber":26,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-08-14"},{"lineNumber":27,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":28,"author":{"gitId":"dhanish265"},"content":"     * Main method that creates a {@code Duke} object and starts the execution of the main part of the program.","lastModifiedDate":"2022-09-28"},{"lineNumber":29,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":30,"author":{"gitId":"dhanish265"},"content":"     * @param args","lastModifiedDate":"2022-09-28"},{"lineNumber":31,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":32,"author":{"gitId":"dhanish265"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-09-26"},{"lineNumber":33,"author":{"gitId":"dhanish265"},"content":"        new Duke().run();","lastModifiedDate":"2022-09-26"},{"lineNumber":34,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-08-20"},{"lineNumber":35,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-08-20"},{"lineNumber":36,"author":{"gitId":"dhanish265"},"content":"    private void run() {","lastModifiedDate":"2022-09-28"},{"lineNumber":37,"author":{"gitId":"dhanish265"},"content":"        ui.greet();","lastModifiedDate":"2022-09-26"},{"lineNumber":38,"author":{"gitId":"dhanish265"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2022-09-26"},{"lineNumber":39,"author":{"gitId":"dhanish265"},"content":"        while (!isExit) {","lastModifiedDate":"2022-09-26"},{"lineNumber":40,"author":{"gitId":"dhanish265"},"content":"            String input \u003d ui.acceptAndValidateInput();","lastModifiedDate":"2022-09-26"},{"lineNumber":41,"author":{"gitId":"dhanish265"},"content":"            Command command \u003d Parser.parse(input);","lastModifiedDate":"2022-09-26"},{"lineNumber":42,"author":{"gitId":"dhanish265"},"content":"            if (command !\u003d null) {","lastModifiedDate":"2022-09-26"},{"lineNumber":43,"author":{"gitId":"dhanish265"},"content":"                command.execute(taskList, ui, storage);","lastModifiedDate":"2022-09-26"},{"lineNumber":44,"author":{"gitId":"dhanish265"},"content":"                isExit \u003d command.isExit();","lastModifiedDate":"2022-09-26"},{"lineNumber":45,"author":{"gitId":"dhanish265"},"content":"            }","lastModifiedDate":"2022-09-06"},{"lineNumber":46,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-06"},{"lineNumber":47,"author":{"gitId":"dhanish265"},"content":"        exit(0);","lastModifiedDate":"2022-09-12"},{"lineNumber":48,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-06"},{"lineNumber":49,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-06"},{"lineNumber":50,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":51,"author":{"gitId":"dhanish265"},"content":"     * Method used to terminate the program.","lastModifiedDate":"2022-09-28"},{"lineNumber":52,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":53,"author":{"gitId":"dhanish265"},"content":"     * @param status - number used to indicate whether program terminates peacefully or abruptly and print output accordingly","lastModifiedDate":"2022-09-28"},{"lineNumber":54,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":55,"author":{"gitId":"dhanish265"},"content":"    public static void exit(int status) {","lastModifiedDate":"2022-09-12"},{"lineNumber":56,"author":{"gitId":"dhanish265"},"content":"        Ui.printLine();","lastModifiedDate":"2022-09-26"},{"lineNumber":57,"author":{"gitId":"dhanish265"},"content":"        if (status \u003d\u003d NORMAL_EXIT_VALUE) {","lastModifiedDate":"2022-09-26"},{"lineNumber":58,"author":{"gitId":"dhanish265"},"content":"            System.out.println(\"\\t\" + \"Bye. Hope to see you again soon!\");","lastModifiedDate":"2022-08-20"},{"lineNumber":59,"author":{"gitId":"dhanish265"},"content":"        } else {","lastModifiedDate":"2022-09-26"},{"lineNumber":60,"author":{"gitId":"dhanish265"},"content":"            System.out.println(\"\\tTerminating due to errors!\");","lastModifiedDate":"2022-09-26"},{"lineNumber":61,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":62,"author":{"gitId":"dhanish265"},"content":"        Ui.printLine();","lastModifiedDate":"2022-09-26"},{"lineNumber":63,"author":{"gitId":"dhanish265"},"content":"        System.exit(status);","lastModifiedDate":"2022-09-12"},{"lineNumber":64,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-08-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"dhanish265":63,"-":2}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dhanish265"},"content":"package duke;","lastModifiedDate":"2022-09-26"},{"lineNumber":2,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":3,"author":{"gitId":"dhanish265"},"content":"import duke.commands.*;","lastModifiedDate":"2022-09-26"},{"lineNumber":4,"author":{"gitId":"dhanish265"},"content":"import duke.exceptions.IncorrectFormatException;","lastModifiedDate":"2022-09-26"},{"lineNumber":5,"author":{"gitId":"dhanish265"},"content":"import duke.exceptions.UnrecognizedCommandException;","lastModifiedDate":"2022-09-26"},{"lineNumber":6,"author":{"gitId":"dhanish265"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2022-09-26"},{"lineNumber":7,"author":{"gitId":"dhanish265"},"content":"import duke.tasks.Event;","lastModifiedDate":"2022-09-26"},{"lineNumber":8,"author":{"gitId":"dhanish265"},"content":"import duke.tasks.Task;","lastModifiedDate":"2022-09-26"},{"lineNumber":9,"author":{"gitId":"dhanish265"},"content":"import duke.tasks.Todo;","lastModifiedDate":"2022-09-26"},{"lineNumber":10,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":11,"author":{"gitId":"dhanish265"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-09-26"},{"lineNumber":12,"author":{"gitId":"dhanish265"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-09-26"},{"lineNumber":13,"author":{"gitId":"dhanish265"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-09-26"},{"lineNumber":14,"author":{"gitId":"dhanish265"},"content":"import java.time.format.ResolverStyle;","lastModifiedDate":"2022-09-26"},{"lineNumber":15,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":16,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-28"},{"lineNumber":17,"author":{"gitId":"dhanish265"},"content":"/**","lastModifiedDate":"2022-09-28"},{"lineNumber":18,"author":{"gitId":"dhanish265"},"content":" * This class manages everything that has to do with input processing and validation","lastModifiedDate":"2022-09-28"},{"lineNumber":19,"author":{"gitId":"dhanish265"},"content":" *","lastModifiedDate":"2022-09-28"},{"lineNumber":20,"author":{"gitId":"dhanish265"},"content":" * @author Dhanish","lastModifiedDate":"2022-09-28"},{"lineNumber":21,"author":{"gitId":"dhanish265"},"content":" */","lastModifiedDate":"2022-09-28"},{"lineNumber":22,"author":{"gitId":"dhanish265"},"content":"public class Parser {","lastModifiedDate":"2022-09-26"},{"lineNumber":23,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":24,"author":{"gitId":"dhanish265"},"content":"    public static final String DATA_TIME_FORMAT \u003d \"uuuu-MM-dd H:mm\";","lastModifiedDate":"2022-09-26"},{"lineNumber":25,"author":{"gitId":"dhanish265"},"content":"    public static final String PRINT_TIME_FORMAT \u003d \"MMM dd uuuu, HH:mm\";","lastModifiedDate":"2022-09-26"},{"lineNumber":26,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":27,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":28,"author":{"gitId":"dhanish265"},"content":"     * Extracts the word that should be the command word in the given input","lastModifiedDate":"2022-09-28"},{"lineNumber":29,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":30,"author":{"gitId":"dhanish265"},"content":"     * @param input","lastModifiedDate":"2022-09-28"},{"lineNumber":31,"author":{"gitId":"dhanish265"},"content":"     * @return expected command keyword","lastModifiedDate":"2022-09-28"},{"lineNumber":32,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":33,"author":{"gitId":"dhanish265"},"content":"    public static String retrieveCommand(String input) {","lastModifiedDate":"2022-09-26"},{"lineNumber":34,"author":{"gitId":"dhanish265"},"content":"        return input.split(\" \")[0];","lastModifiedDate":"2022-09-26"},{"lineNumber":35,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":36,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":37,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":38,"author":{"gitId":"dhanish265"},"content":"     * checks and validates whether a given word is a recognized command, throws exception otherwise","lastModifiedDate":"2022-09-28"},{"lineNumber":39,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":40,"author":{"gitId":"dhanish265"},"content":"     * @param command - word to be checked","lastModifiedDate":"2022-09-28"},{"lineNumber":41,"author":{"gitId":"dhanish265"},"content":"     * @throws UnrecognizedCommandException","lastModifiedDate":"2022-09-28"},{"lineNumber":42,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":43,"author":{"gitId":"dhanish265"},"content":"    public static void validateCommand(String command) throws UnrecognizedCommandException {","lastModifiedDate":"2022-09-26"},{"lineNumber":44,"author":{"gitId":"dhanish265"},"content":"        if (!TaskList.isValidCommand(command)) {","lastModifiedDate":"2022-09-26"},{"lineNumber":45,"author":{"gitId":"dhanish265"},"content":"            throw new UnrecognizedCommandException();","lastModifiedDate":"2022-09-26"},{"lineNumber":46,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":47,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":48,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":49,"author":{"gitId":"dhanish265"},"content":"    private static int retrieveTaskNumber(String input) throws NumberFormatException {","lastModifiedDate":"2022-09-28"},{"lineNumber":50,"author":{"gitId":"dhanish265"},"content":"        return Integer.parseInt(input) - 1;","lastModifiedDate":"2022-09-26"},{"lineNumber":51,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":52,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":53,"author":{"gitId":"dhanish265"},"content":"    private static String retrieveParameters(String input) {","lastModifiedDate":"2022-09-28"},{"lineNumber":54,"author":{"gitId":"dhanish265"},"content":"        String[] parsed \u003d input.split(\" \", 2);","lastModifiedDate":"2022-09-26"},{"lineNumber":55,"author":{"gitId":"dhanish265"},"content":"        if (parsed.length \u003e 1) {","lastModifiedDate":"2022-09-26"},{"lineNumber":56,"author":{"gitId":"dhanish265"},"content":"            return parsed[1].trim();","lastModifiedDate":"2022-09-26"},{"lineNumber":57,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":58,"author":{"gitId":"dhanish265"},"content":"        return \"\";","lastModifiedDate":"2022-09-26"},{"lineNumber":59,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":60,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":61,"author":{"gitId":"dhanish265"},"content":"    private static String retrieveTime(String parameters, String separator) {","lastModifiedDate":"2022-09-28"},{"lineNumber":62,"author":{"gitId":"dhanish265"},"content":"        String[] parsed \u003d parameters.split(separator);","lastModifiedDate":"2022-09-26"},{"lineNumber":63,"author":{"gitId":"dhanish265"},"content":"        if (parsed.length \u003e 1) {","lastModifiedDate":"2022-09-26"},{"lineNumber":64,"author":{"gitId":"dhanish265"},"content":"            return parsed[1];","lastModifiedDate":"2022-09-26"},{"lineNumber":65,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":66,"author":{"gitId":"dhanish265"},"content":"        return \"\";","lastModifiedDate":"2022-09-26"},{"lineNumber":67,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":68,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":69,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-28"},{"lineNumber":70,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":71,"author":{"gitId":"dhanish265"},"content":"     * This method checks if a given {@code String} is a valid text representation of some time.","lastModifiedDate":"2022-09-28"},{"lineNumber":72,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":73,"author":{"gitId":"dhanish265"},"content":"     * @param time - the text to be validated","lastModifiedDate":"2022-09-28"},{"lineNumber":74,"author":{"gitId":"dhanish265"},"content":"     * @return true if the given text is a valid time, false otherwise.","lastModifiedDate":"2022-09-28"},{"lineNumber":75,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":76,"author":{"gitId":"dhanish265"},"content":"    public static boolean isValidTime(String time) {","lastModifiedDate":"2022-09-26"},{"lineNumber":77,"author":{"gitId":"dhanish265"},"content":"        try {","lastModifiedDate":"2022-09-26"},{"lineNumber":78,"author":{"gitId":"dhanish265"},"content":"            LocalDateTime.parse(time, DateTimeFormatter.ofPattern(DATA_TIME_FORMAT));","lastModifiedDate":"2022-09-26"},{"lineNumber":79,"author":{"gitId":"dhanish265"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-09-26"},{"lineNumber":80,"author":{"gitId":"dhanish265"},"content":"            return false;","lastModifiedDate":"2022-09-26"},{"lineNumber":81,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":82,"author":{"gitId":"dhanish265"},"content":"        return true;","lastModifiedDate":"2022-09-26"},{"lineNumber":83,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":84,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":85,"author":{"gitId":"dhanish265"},"content":"    private static String retrieveTaskDescription(String parameters, String separator) {","lastModifiedDate":"2022-09-28"},{"lineNumber":86,"author":{"gitId":"dhanish265"},"content":"        return parameters.split(separator)[0];","lastModifiedDate":"2022-09-26"},{"lineNumber":87,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":88,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":89,"author":{"gitId":"dhanish265"},"content":"    private static void validateFormat(String command, String parameters) throws IncorrectFormatException, NumberFormatException {","lastModifiedDate":"2022-09-28"},{"lineNumber":90,"author":{"gitId":"dhanish265"},"content":"        if (command.equals(\"list\") || command.equals(\"help\") || command.equals(\"bye\"))","lastModifiedDate":"2022-09-26"},{"lineNumber":91,"author":{"gitId":"dhanish265"},"content":"            return;","lastModifiedDate":"2022-09-26"},{"lineNumber":92,"author":{"gitId":"dhanish265"},"content":"        if (command.equals(\"mark\") || command.equals(\"unmark\") || command.equals(\"delete\")) {","lastModifiedDate":"2022-09-26"},{"lineNumber":93,"author":{"gitId":"dhanish265"},"content":"            if (parameters.isEmpty()) {","lastModifiedDate":"2022-09-26"},{"lineNumber":94,"author":{"gitId":"dhanish265"},"content":"                throw new IncorrectFormatException(Ui.MISSING_TASK_NUMBER_ERROR_MESSAGE);","lastModifiedDate":"2022-09-26"},{"lineNumber":95,"author":{"gitId":"dhanish265"},"content":"            }","lastModifiedDate":"2022-09-26"},{"lineNumber":96,"author":{"gitId":"dhanish265"},"content":"            retrieveTaskNumber(parameters);","lastModifiedDate":"2022-09-26"},{"lineNumber":97,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":98,"author":{"gitId":"dhanish265"},"content":"        if (command.equals(\"deadline\")) {","lastModifiedDate":"2022-09-26"},{"lineNumber":99,"author":{"gitId":"dhanish265"},"content":"            handlePossibleDeadlineExceptions(parameters);","lastModifiedDate":"2022-09-26"},{"lineNumber":100,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":101,"author":{"gitId":"dhanish265"},"content":"        if (command.equals(\"event\")) {","lastModifiedDate":"2022-09-26"},{"lineNumber":102,"author":{"gitId":"dhanish265"},"content":"            handlePossibleEventExceptions(parameters);","lastModifiedDate":"2022-09-26"},{"lineNumber":103,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":104,"author":{"gitId":"dhanish265"},"content":"        if (command.equals(\"find\") \u0026\u0026 parameters.isEmpty()) {","lastModifiedDate":"2022-09-26"},{"lineNumber":105,"author":{"gitId":"dhanish265"},"content":"            throw new IncorrectFormatException(Ui.MISSING_FIND_KEYWORD_ERROR_MESSAGE);","lastModifiedDate":"2022-09-26"},{"lineNumber":106,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":107,"author":{"gitId":"dhanish265"},"content":"        if (parameters.isEmpty()) {","lastModifiedDate":"2022-09-26"},{"lineNumber":108,"author":{"gitId":"dhanish265"},"content":"            throw new IncorrectFormatException(Ui.MISSING_TODO_DESCRIPTION_ERROR_MESSAGE);","lastModifiedDate":"2022-09-26"},{"lineNumber":109,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":110,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":111,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":112,"author":{"gitId":"dhanish265"},"content":"    private static void handlePossibleEventExceptions(String parameters) throws IncorrectFormatException {","lastModifiedDate":"2022-09-28"},{"lineNumber":113,"author":{"gitId":"dhanish265"},"content":"        if (!parameters.contains(TaskList.EVENT_SEPERATOR.trim())) {","lastModifiedDate":"2022-09-26"},{"lineNumber":114,"author":{"gitId":"dhanish265"},"content":"            throw new IncorrectFormatException(Ui.EVENT_SEPERATOR_ERROR_MESSAGE);","lastModifiedDate":"2022-09-26"},{"lineNumber":115,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":116,"author":{"gitId":"dhanish265"},"content":"        if (parameters.trim().equals(TaskList.EVENT_SEPERATOR.trim())) {","lastModifiedDate":"2022-09-26"},{"lineNumber":117,"author":{"gitId":"dhanish265"},"content":"            throw new IncorrectFormatException(Ui.EVENT_SEPERATOR_ERROR_MESSAGE);","lastModifiedDate":"2022-09-26"},{"lineNumber":118,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":119,"author":{"gitId":"dhanish265"},"content":"        if (retrieveTaskDescription(parameters, TaskList.EVENT_SEPERATOR.trim()).isEmpty()) {","lastModifiedDate":"2022-09-26"},{"lineNumber":120,"author":{"gitId":"dhanish265"},"content":"            throw new IncorrectFormatException(Ui.MISSING_EVENT_DESCRIPTION_ERROR_MESSAGE);","lastModifiedDate":"2022-09-26"},{"lineNumber":121,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":122,"author":{"gitId":"dhanish265"},"content":"        if (retrieveTime(parameters, TaskList.EVENT_SEPERATOR).isEmpty()) {","lastModifiedDate":"2022-09-26"},{"lineNumber":123,"author":{"gitId":"dhanish265"},"content":"            throw new IncorrectFormatException(Ui.MISSING_EVENT_TIME_ERROR_MESSAGE);","lastModifiedDate":"2022-09-26"},{"lineNumber":124,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":125,"author":{"gitId":"dhanish265"},"content":"        if (!isValidTime(retrieveTime(parameters, TaskList.EVENT_SEPERATOR))) {","lastModifiedDate":"2022-09-26"},{"lineNumber":126,"author":{"gitId":"dhanish265"},"content":"            throw new IncorrectFormatException(\"Error! The time entered is not valid!\");","lastModifiedDate":"2022-09-26"},{"lineNumber":127,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":128,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":129,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":130,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":131,"author":{"gitId":"dhanish265"},"content":"    private static void handlePossibleDeadlineExceptions(String parameters) throws IncorrectFormatException {","lastModifiedDate":"2022-09-28"},{"lineNumber":132,"author":{"gitId":"dhanish265"},"content":"        if (!parameters.contains(TaskList.DEADLINE_SEPERATOR.trim())) {","lastModifiedDate":"2022-09-26"},{"lineNumber":133,"author":{"gitId":"dhanish265"},"content":"            throw new IncorrectFormatException(Ui.DEADLINE_SEPERATOR_ERROR_MESSAGE);","lastModifiedDate":"2022-09-26"},{"lineNumber":134,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":135,"author":{"gitId":"dhanish265"},"content":"        if (parameters.trim().equals(TaskList.DEADLINE_SEPERATOR.trim())) {","lastModifiedDate":"2022-09-26"},{"lineNumber":136,"author":{"gitId":"dhanish265"},"content":"            throw new IncorrectFormatException(Ui.DEADLINE_SEPERATOR_ERROR_MESSAGE);","lastModifiedDate":"2022-09-26"},{"lineNumber":137,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":138,"author":{"gitId":"dhanish265"},"content":"        if (retrieveTaskDescription(parameters, TaskList.DEADLINE_SEPERATOR.trim()).isEmpty()) {","lastModifiedDate":"2022-09-26"},{"lineNumber":139,"author":{"gitId":"dhanish265"},"content":"            throw new IncorrectFormatException(Ui.MISSING_DEADLINE_DESCRIPTION_ERROR_MESSAGE);","lastModifiedDate":"2022-09-26"},{"lineNumber":140,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":141,"author":{"gitId":"dhanish265"},"content":"        if (retrieveTime(parameters, TaskList.DEADLINE_SEPERATOR).isEmpty()) {","lastModifiedDate":"2022-09-26"},{"lineNumber":142,"author":{"gitId":"dhanish265"},"content":"            throw new IncorrectFormatException(Ui.MISSING_DEADLINE_TIME_ERROR_MESSAGE);","lastModifiedDate":"2022-09-26"},{"lineNumber":143,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":144,"author":{"gitId":"dhanish265"},"content":"        if (!isValidTime(retrieveTime(parameters, TaskList.DEADLINE_SEPERATOR))) {","lastModifiedDate":"2022-09-26"},{"lineNumber":145,"author":{"gitId":"dhanish265"},"content":"            throw new IncorrectFormatException(Ui.INVALID_TIME_FORMAT_ERROR_MESSAGE);","lastModifiedDate":"2022-09-26"},{"lineNumber":146,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":147,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":148,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":149,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":150,"author":{"gitId":"dhanish265"},"content":"     * Given user input with a valid command, this method parses the input and extracts the command name and parameters","lastModifiedDate":"2022-09-28"},{"lineNumber":151,"author":{"gitId":"dhanish265"},"content":"     * It then checks if the given command and parameters are in valid format","lastModifiedDate":"2022-09-28"},{"lineNumber":152,"author":{"gitId":"dhanish265"},"content":"     * If yes, it returns the corresponding {@code Command} object","lastModifiedDate":"2022-09-28"},{"lineNumber":153,"author":{"gitId":"dhanish265"},"content":"     * Else, an exception is caught and the method terminates","lastModifiedDate":"2022-09-28"},{"lineNumber":154,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":155,"author":{"gitId":"dhanish265"},"content":"     * @param input - user input with validated command","lastModifiedDate":"2022-09-28"},{"lineNumber":156,"author":{"gitId":"dhanish265"},"content":"     * @return - corresponding {@code Command} object to be executed","lastModifiedDate":"2022-09-28"},{"lineNumber":157,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":158,"author":{"gitId":"dhanish265"},"content":"    public static Command parse(String input) {","lastModifiedDate":"2022-09-26"},{"lineNumber":159,"author":{"gitId":"dhanish265"},"content":"        Command command \u003d null;","lastModifiedDate":"2022-09-26"},{"lineNumber":160,"author":{"gitId":"dhanish265"},"content":"        String commandName \u003d Parser.retrieveCommand(input);","lastModifiedDate":"2022-09-26"},{"lineNumber":161,"author":{"gitId":"dhanish265"},"content":"        String parameters \u003d Parser.retrieveParameters(input);","lastModifiedDate":"2022-09-26"},{"lineNumber":162,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":163,"author":{"gitId":"dhanish265"},"content":"        try {","lastModifiedDate":"2022-09-26"},{"lineNumber":164,"author":{"gitId":"dhanish265"},"content":"            Parser.validateFormat(commandName, parameters);","lastModifiedDate":"2022-09-26"},{"lineNumber":165,"author":{"gitId":"dhanish265"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-09-26"},{"lineNumber":166,"author":{"gitId":"dhanish265"},"content":"            Ui.showErrorMessage(Ui.INVALID_TASK_NUMBER_ERROR_MESSAGE);","lastModifiedDate":"2022-09-26"},{"lineNumber":167,"author":{"gitId":"dhanish265"},"content":"            return command;","lastModifiedDate":"2022-09-26"},{"lineNumber":168,"author":{"gitId":"dhanish265"},"content":"        } catch (IncorrectFormatException e) {","lastModifiedDate":"2022-09-26"},{"lineNumber":169,"author":{"gitId":"dhanish265"},"content":"            Ui.showErrorMessage(e.getMessage());","lastModifiedDate":"2022-09-26"},{"lineNumber":170,"author":{"gitId":"dhanish265"},"content":"            return command;","lastModifiedDate":"2022-09-26"},{"lineNumber":171,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":172,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":173,"author":{"gitId":"dhanish265"},"content":"        return createCommand(commandName, parameters);","lastModifiedDate":"2022-09-26"},{"lineNumber":174,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":175,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":176,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":177,"author":{"gitId":"dhanish265"},"content":"     * Takes in a {@code String} representation of a time, and returns the corresponding {@code LocalDateTime} object","lastModifiedDate":"2022-09-28"},{"lineNumber":178,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":179,"author":{"gitId":"dhanish265"},"content":"     * @param time - text representation of time","lastModifiedDate":"2022-09-28"},{"lineNumber":180,"author":{"gitId":"dhanish265"},"content":"     * @return - the corresponding {@code LocalDateTime} object","lastModifiedDate":"2022-09-28"},{"lineNumber":181,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":182,"author":{"gitId":"dhanish265"},"content":"    public static LocalDateTime parseDateTime(String time) {","lastModifiedDate":"2022-09-26"},{"lineNumber":183,"author":{"gitId":"dhanish265"},"content":"        return LocalDateTime.from(DateTimeFormatter.ofPattern(DATA_TIME_FORMAT).withResolverStyle(ResolverStyle.STRICT).parse(time));","lastModifiedDate":"2022-09-26"},{"lineNumber":184,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":185,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":186,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":187,"author":{"gitId":"dhanish265"},"content":"     * Takes in a {@code LocalDateTime} object and formats it into a textual representation according to the desired format.","lastModifiedDate":"2022-09-28"},{"lineNumber":188,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":189,"author":{"gitId":"dhanish265"},"content":"     * @param dateTime - the {@code LocalDateTime} object","lastModifiedDate":"2022-09-28"},{"lineNumber":190,"author":{"gitId":"dhanish265"},"content":"     * @param format   - the desired format","lastModifiedDate":"2022-09-28"},{"lineNumber":191,"author":{"gitId":"dhanish265"},"content":"     * @return - a textual representation of the {@code LocalDateTime} object in the desired format.","lastModifiedDate":"2022-09-28"},{"lineNumber":192,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":193,"author":{"gitId":"dhanish265"},"content":"    public static String getFormattedTime(LocalDateTime dateTime, String format) {","lastModifiedDate":"2022-09-26"},{"lineNumber":194,"author":{"gitId":"dhanish265"},"content":"        return dateTime.format(DateTimeFormatter.ofPattern(format));","lastModifiedDate":"2022-09-26"},{"lineNumber":195,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":196,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":197,"author":{"gitId":"dhanish265"},"content":"    private static Command createCommand(String commandName, String parameters) {","lastModifiedDate":"2022-09-26"},{"lineNumber":198,"author":{"gitId":"dhanish265"},"content":"        Command command \u003d null;","lastModifiedDate":"2022-09-26"},{"lineNumber":199,"author":{"gitId":"dhanish265"},"content":"        String deadline;","lastModifiedDate":"2022-09-26"},{"lineNumber":200,"author":{"gitId":"dhanish265"},"content":"        String description;","lastModifiedDate":"2022-09-26"},{"lineNumber":201,"author":{"gitId":"dhanish265"},"content":"        int taskNumber;","lastModifiedDate":"2022-09-26"},{"lineNumber":202,"author":{"gitId":"dhanish265"},"content":"        Task task \u003d null;","lastModifiedDate":"2022-09-26"},{"lineNumber":203,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":204,"author":{"gitId":"dhanish265"},"content":"        switch (commandName) {","lastModifiedDate":"2022-09-26"},{"lineNumber":205,"author":{"gitId":"dhanish265"},"content":"        case \"bye\":","lastModifiedDate":"2022-09-26"},{"lineNumber":206,"author":{"gitId":"dhanish265"},"content":"            command \u003d new ExitCommand();","lastModifiedDate":"2022-09-26"},{"lineNumber":207,"author":{"gitId":"dhanish265"},"content":"            return command;","lastModifiedDate":"2022-09-26"},{"lineNumber":208,"author":{"gitId":"dhanish265"},"content":"        case \"help\":","lastModifiedDate":"2022-09-26"},{"lineNumber":209,"author":{"gitId":"dhanish265"},"content":"            command \u003d new HelpCommand();","lastModifiedDate":"2022-09-26"},{"lineNumber":210,"author":{"gitId":"dhanish265"},"content":"            return command;","lastModifiedDate":"2022-09-26"},{"lineNumber":211,"author":{"gitId":"dhanish265"},"content":"        case \"list\":","lastModifiedDate":"2022-09-26"},{"lineNumber":212,"author":{"gitId":"dhanish265"},"content":"            command \u003d new ListCommand();","lastModifiedDate":"2022-09-26"},{"lineNumber":213,"author":{"gitId":"dhanish265"},"content":"            return command;","lastModifiedDate":"2022-09-26"},{"lineNumber":214,"author":{"gitId":"dhanish265"},"content":"        case \"mark\":","lastModifiedDate":"2022-09-26"},{"lineNumber":215,"author":{"gitId":"dhanish265"},"content":"            taskNumber \u003d Parser.retrieveTaskNumber(parameters);","lastModifiedDate":"2022-09-26"},{"lineNumber":216,"author":{"gitId":"dhanish265"},"content":"            command \u003d new MarkCommand(taskNumber);","lastModifiedDate":"2022-09-26"},{"lineNumber":217,"author":{"gitId":"dhanish265"},"content":"            return command;","lastModifiedDate":"2022-09-26"},{"lineNumber":218,"author":{"gitId":"dhanish265"},"content":"        case \"unmark\":","lastModifiedDate":"2022-09-26"},{"lineNumber":219,"author":{"gitId":"dhanish265"},"content":"            taskNumber \u003d Parser.retrieveTaskNumber(parameters);","lastModifiedDate":"2022-09-26"},{"lineNumber":220,"author":{"gitId":"dhanish265"},"content":"            command \u003d new UnmarkCommand(taskNumber);","lastModifiedDate":"2022-09-26"},{"lineNumber":221,"author":{"gitId":"dhanish265"},"content":"            return command;","lastModifiedDate":"2022-09-26"},{"lineNumber":222,"author":{"gitId":"dhanish265"},"content":"        case \"delete\":","lastModifiedDate":"2022-09-26"},{"lineNumber":223,"author":{"gitId":"dhanish265"},"content":"            taskNumber \u003d Parser.retrieveTaskNumber(parameters);","lastModifiedDate":"2022-09-26"},{"lineNumber":224,"author":{"gitId":"dhanish265"},"content":"            command \u003d new DeleteCommand(taskNumber);","lastModifiedDate":"2022-09-26"},{"lineNumber":225,"author":{"gitId":"dhanish265"},"content":"            return command;","lastModifiedDate":"2022-09-26"},{"lineNumber":226,"author":{"gitId":"dhanish265"},"content":"        case \"find\":","lastModifiedDate":"2022-09-26"},{"lineNumber":227,"author":{"gitId":"dhanish265"},"content":"            command \u003d new FindCommand(parameters);","lastModifiedDate":"2022-09-26"},{"lineNumber":228,"author":{"gitId":"dhanish265"},"content":"            return command;","lastModifiedDate":"2022-09-26"},{"lineNumber":229,"author":{"gitId":"dhanish265"},"content":"        case \"todo\":","lastModifiedDate":"2022-09-26"},{"lineNumber":230,"author":{"gitId":"dhanish265"},"content":"            task \u003d new Todo(parameters);","lastModifiedDate":"2022-09-26"},{"lineNumber":231,"author":{"gitId":"dhanish265"},"content":"            break;","lastModifiedDate":"2022-09-26"},{"lineNumber":232,"author":{"gitId":"dhanish265"},"content":"        case \"deadline\":","lastModifiedDate":"2022-09-26"},{"lineNumber":233,"author":{"gitId":"dhanish265"},"content":"            description \u003d Parser.retrieveTaskDescription(parameters, TaskList.DEADLINE_SEPERATOR);","lastModifiedDate":"2022-09-26"},{"lineNumber":234,"author":{"gitId":"dhanish265"},"content":"            deadline \u003d Parser.retrieveTime(parameters, TaskList.DEADLINE_SEPERATOR);","lastModifiedDate":"2022-09-26"},{"lineNumber":235,"author":{"gitId":"dhanish265"},"content":"            task \u003d new Deadline(description, deadline);","lastModifiedDate":"2022-09-26"},{"lineNumber":236,"author":{"gitId":"dhanish265"},"content":"            break;","lastModifiedDate":"2022-09-26"},{"lineNumber":237,"author":{"gitId":"dhanish265"},"content":"        case \"event\":","lastModifiedDate":"2022-09-26"},{"lineNumber":238,"author":{"gitId":"dhanish265"},"content":"            description \u003d Parser.retrieveTaskDescription(parameters, TaskList.EVENT_SEPERATOR);","lastModifiedDate":"2022-09-26"},{"lineNumber":239,"author":{"gitId":"dhanish265"},"content":"            deadline \u003d Parser.retrieveTime(parameters, TaskList.EVENT_SEPERATOR);","lastModifiedDate":"2022-09-26"},{"lineNumber":240,"author":{"gitId":"dhanish265"},"content":"            task \u003d new Event(description, deadline);","lastModifiedDate":"2022-09-26"},{"lineNumber":241,"author":{"gitId":"dhanish265"},"content":"            break;","lastModifiedDate":"2022-09-26"},{"lineNumber":242,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":243,"author":{"gitId":"dhanish265"},"content":"        command \u003d new AddCommand(task);","lastModifiedDate":"2022-09-26"},{"lineNumber":244,"author":{"gitId":"dhanish265"},"content":"        return command;","lastModifiedDate":"2022-09-26"},{"lineNumber":245,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":246,"author":{"gitId":"dhanish265"},"content":"}","lastModifiedDate":"2022-09-26"}],"authorContributionMap":{"dhanish265":246}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dhanish265"},"content":"package duke;","lastModifiedDate":"2022-09-26"},{"lineNumber":2,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":3,"author":{"gitId":"dhanish265"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2022-09-26"},{"lineNumber":4,"author":{"gitId":"dhanish265"},"content":"import duke.tasks.Event;","lastModifiedDate":"2022-09-26"},{"lineNumber":5,"author":{"gitId":"dhanish265"},"content":"import duke.tasks.Task;","lastModifiedDate":"2022-09-26"},{"lineNumber":6,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":7,"author":{"gitId":"dhanish265"},"content":"import java.io.File;","lastModifiedDate":"2022-09-26"},{"lineNumber":8,"author":{"gitId":"dhanish265"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2022-09-26"},{"lineNumber":9,"author":{"gitId":"dhanish265"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-09-26"},{"lineNumber":10,"author":{"gitId":"dhanish265"},"content":"import java.io.IOException;","lastModifiedDate":"2022-09-26"},{"lineNumber":11,"author":{"gitId":"dhanish265"},"content":"import java.nio.file.Files;","lastModifiedDate":"2022-09-26"},{"lineNumber":12,"author":{"gitId":"dhanish265"},"content":"import java.nio.file.Path;","lastModifiedDate":"2022-09-26"},{"lineNumber":13,"author":{"gitId":"dhanish265"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2022-09-26"},{"lineNumber":14,"author":{"gitId":"dhanish265"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-09-26"},{"lineNumber":15,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":16,"author":{"gitId":"dhanish265"},"content":"/**","lastModifiedDate":"2022-09-28"},{"lineNumber":17,"author":{"gitId":"dhanish265"},"content":" * This class contains the main mechanism to read and write into datafiles, and hence acts as the program\u0027s way of saving user data.","lastModifiedDate":"2022-09-28"},{"lineNumber":18,"author":{"gitId":"dhanish265"},"content":" *","lastModifiedDate":"2022-09-28"},{"lineNumber":19,"author":{"gitId":"dhanish265"},"content":" * @author Dhanish","lastModifiedDate":"2022-09-28"},{"lineNumber":20,"author":{"gitId":"dhanish265"},"content":" */","lastModifiedDate":"2022-09-28"},{"lineNumber":21,"author":{"gitId":"dhanish265"},"content":"public class Storage {","lastModifiedDate":"2022-09-26"},{"lineNumber":22,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":23,"author":{"gitId":"dhanish265"},"content":"    private static final String TEXT_FILE_NAME \u003d \"/duke.txt\";","lastModifiedDate":"2022-09-26"},{"lineNumber":24,"author":{"gitId":"dhanish265"},"content":"    private static final int TASK_TYPE_INDEX \u003d 0;","lastModifiedDate":"2022-09-26"},{"lineNumber":25,"author":{"gitId":"dhanish265"},"content":"    private static final int STATUS_INDEX \u003d 1;","lastModifiedDate":"2022-09-26"},{"lineNumber":26,"author":{"gitId":"dhanish265"},"content":"    private static final int DESCRIPTION_INDEX \u003d 2;","lastModifiedDate":"2022-09-26"},{"lineNumber":27,"author":{"gitId":"dhanish265"},"content":"    private static final int TIME_INDEX \u003d 3;","lastModifiedDate":"2022-09-26"},{"lineNumber":28,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":29,"author":{"gitId":"dhanish265"},"content":"    private File dataFile;","lastModifiedDate":"2022-09-28"},{"lineNumber":30,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":31,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":32,"author":{"gitId":"dhanish265"},"content":"     * Constructor used to initialize file path of data file","lastModifiedDate":"2022-09-28"},{"lineNumber":33,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":34,"author":{"gitId":"dhanish265"},"content":"    public Storage() {","lastModifiedDate":"2022-09-26"},{"lineNumber":35,"author":{"gitId":"dhanish265"},"content":"        String filePath \u003d retrieveFilePath();","lastModifiedDate":"2022-09-26"},{"lineNumber":36,"author":{"gitId":"dhanish265"},"content":"        dataFile \u003d new File(filePath);","lastModifiedDate":"2022-09-26"},{"lineNumber":37,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":38,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":39,"author":{"gitId":"dhanish265"},"content":"    private static String retrieveFilePath() {","lastModifiedDate":"2022-09-28"},{"lineNumber":40,"author":{"gitId":"dhanish265"},"content":"        Path path \u003d Paths.get(\"src\", \"main\", \"java\", \"duke\", \"data\");","lastModifiedDate":"2022-09-26"},{"lineNumber":41,"author":{"gitId":"dhanish265"},"content":"        boolean directoryExists \u003d Files.exists(path);","lastModifiedDate":"2022-09-26"},{"lineNumber":42,"author":{"gitId":"dhanish265"},"content":"        if (!directoryExists) {","lastModifiedDate":"2022-09-26"},{"lineNumber":43,"author":{"gitId":"dhanish265"},"content":"            new File(path.toString()).mkdirs();","lastModifiedDate":"2022-09-26"},{"lineNumber":44,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":45,"author":{"gitId":"dhanish265"},"content":"        return path + TEXT_FILE_NAME;","lastModifiedDate":"2022-09-26"},{"lineNumber":46,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":47,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":48,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":49,"author":{"gitId":"dhanish265"},"content":"     * This method takes in an empty {@code TaskList}, reads the data from the data file and loads the data into the {@code TaskList}.","lastModifiedDate":"2022-09-28"},{"lineNumber":50,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":51,"author":{"gitId":"dhanish265"},"content":"     * @param taskList - empty {@code TaskList} in which the data in the data file is to be loaded","lastModifiedDate":"2022-09-28"},{"lineNumber":52,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":53,"author":{"gitId":"dhanish265"},"content":"    public void loadData(TaskList taskList) {","lastModifiedDate":"2022-09-26"},{"lineNumber":54,"author":{"gitId":"dhanish265"},"content":"        if (!dataFile.exists()) {","lastModifiedDate":"2022-09-26"},{"lineNumber":55,"author":{"gitId":"dhanish265"},"content":"            createDataFile();","lastModifiedDate":"2022-09-26"},{"lineNumber":56,"author":{"gitId":"dhanish265"},"content":"            return;","lastModifiedDate":"2022-09-26"},{"lineNumber":57,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":58,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":59,"author":{"gitId":"dhanish265"},"content":"        Ui.printLine();","lastModifiedDate":"2022-09-26"},{"lineNumber":60,"author":{"gitId":"dhanish265"},"content":"        System.out.println(\"\\tLoading existing data...\");","lastModifiedDate":"2022-09-26"},{"lineNumber":61,"author":{"gitId":"dhanish265"},"content":"        Ui.printLine();","lastModifiedDate":"2022-09-26"},{"lineNumber":62,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":63,"author":{"gitId":"dhanish265"},"content":"        Scanner fileScanner \u003d initializeScanner();","lastModifiedDate":"2022-09-26"},{"lineNumber":64,"author":{"gitId":"dhanish265"},"content":"        if (fileScanner \u003d\u003d null) {","lastModifiedDate":"2022-09-26"},{"lineNumber":65,"author":{"gitId":"dhanish265"},"content":"            return;","lastModifiedDate":"2022-09-26"},{"lineNumber":66,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":67,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":68,"author":{"gitId":"dhanish265"},"content":"        while (fileScanner.hasNext()) {","lastModifiedDate":"2022-09-26"},{"lineNumber":69,"author":{"gitId":"dhanish265"},"content":"            loadNextTask(taskList, fileScanner);","lastModifiedDate":"2022-09-26"},{"lineNumber":70,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":71,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":72,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":73,"author":{"gitId":"dhanish265"},"content":"    private static void loadNextTask(TaskList taskList, Scanner fileScanner) {","lastModifiedDate":"2022-09-26"},{"lineNumber":74,"author":{"gitId":"dhanish265"},"content":"        String[] inputs;","lastModifiedDate":"2022-09-26"},{"lineNumber":75,"author":{"gitId":"dhanish265"},"content":"        String taskType, description, status, time \u003d \"\";","lastModifiedDate":"2022-09-26"},{"lineNumber":76,"author":{"gitId":"dhanish265"},"content":"        inputs \u003d acceptAndProcessInput(fileScanner);","lastModifiedDate":"2022-09-26"},{"lineNumber":77,"author":{"gitId":"dhanish265"},"content":"        taskType \u003d inputs[TASK_TYPE_INDEX];","lastModifiedDate":"2022-09-26"},{"lineNumber":78,"author":{"gitId":"dhanish265"},"content":"        status \u003d inputs[STATUS_INDEX];","lastModifiedDate":"2022-09-26"},{"lineNumber":79,"author":{"gitId":"dhanish265"},"content":"        description \u003d inputs[DESCRIPTION_INDEX];","lastModifiedDate":"2022-09-26"},{"lineNumber":80,"author":{"gitId":"dhanish265"},"content":"        if (inputs.length \u003e 3) {","lastModifiedDate":"2022-09-26"},{"lineNumber":81,"author":{"gitId":"dhanish265"},"content":"            time \u003d inputs[TIME_INDEX];","lastModifiedDate":"2022-09-26"},{"lineNumber":82,"author":{"gitId":"dhanish265"},"content":"            if (!Parser.isValidTime(time)) {","lastModifiedDate":"2022-09-26"},{"lineNumber":83,"author":{"gitId":"dhanish265"},"content":"                Ui.showErrorMessage(\"Error! Data file contains invalid times!\");","lastModifiedDate":"2022-09-26"},{"lineNumber":84,"author":{"gitId":"dhanish265"},"content":"                Duke.exit(-1);","lastModifiedDate":"2022-09-26"},{"lineNumber":85,"author":{"gitId":"dhanish265"},"content":"            }","lastModifiedDate":"2022-09-26"},{"lineNumber":86,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":87,"author":{"gitId":"dhanish265"},"content":"        Task task \u003d TaskList.initialiseTaskFromParameters(taskType, description, status, time);","lastModifiedDate":"2022-09-26"},{"lineNumber":88,"author":{"gitId":"dhanish265"},"content":"        taskList.loadTask(task);","lastModifiedDate":"2022-09-26"},{"lineNumber":89,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":90,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":91,"author":{"gitId":"dhanish265"},"content":"    private Scanner initializeScanner() {","lastModifiedDate":"2022-09-28"},{"lineNumber":92,"author":{"gitId":"dhanish265"},"content":"        Scanner fileScanner \u003d null;","lastModifiedDate":"2022-09-26"},{"lineNumber":93,"author":{"gitId":"dhanish265"},"content":"        try {","lastModifiedDate":"2022-09-26"},{"lineNumber":94,"author":{"gitId":"dhanish265"},"content":"            fileScanner \u003d new Scanner(dataFile);","lastModifiedDate":"2022-09-26"},{"lineNumber":95,"author":{"gitId":"dhanish265"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2022-09-26"},{"lineNumber":96,"author":{"gitId":"dhanish265"},"content":"            Ui.showErrorMessage(\"Error! Data file cannot be found!\");","lastModifiedDate":"2022-09-26"},{"lineNumber":97,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":98,"author":{"gitId":"dhanish265"},"content":"        return fileScanner;","lastModifiedDate":"2022-09-26"},{"lineNumber":99,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":100,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":101,"author":{"gitId":"dhanish265"},"content":"    private void createDataFile() {","lastModifiedDate":"2022-09-28"},{"lineNumber":102,"author":{"gitId":"dhanish265"},"content":"        try {","lastModifiedDate":"2022-09-26"},{"lineNumber":103,"author":{"gitId":"dhanish265"},"content":"            dataFile.createNewFile();","lastModifiedDate":"2022-09-26"},{"lineNumber":104,"author":{"gitId":"dhanish265"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-09-26"},{"lineNumber":105,"author":{"gitId":"dhanish265"},"content":"            Ui.showErrorMessage(\"Error! Data file to store tasks cannot be created!\");","lastModifiedDate":"2022-09-26"},{"lineNumber":106,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":107,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":108,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":109,"author":{"gitId":"dhanish265"},"content":"    private static String[] acceptAndProcessInput(Scanner fileScanner) {","lastModifiedDate":"2022-09-26"},{"lineNumber":110,"author":{"gitId":"dhanish265"},"content":"        String input \u003d fileScanner.nextLine().trim();","lastModifiedDate":"2022-09-26"},{"lineNumber":111,"author":{"gitId":"dhanish265"},"content":"        return input.split(\" \\\\| \", 4);","lastModifiedDate":"2022-09-26"},{"lineNumber":112,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":113,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":114,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":115,"author":{"gitId":"dhanish265"},"content":"     * This method processes the {@code Task}s in the {@code TaskList} one by one, and logs them into a data file.","lastModifiedDate":"2022-09-28"},{"lineNumber":116,"author":{"gitId":"dhanish265"},"content":"     * It is usually called after the {@code TaskList} is changed one way or another.","lastModifiedDate":"2022-09-28"},{"lineNumber":117,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":118,"author":{"gitId":"dhanish265"},"content":"     * @param taskList - {@code TaskList} that contains {@code Task}s to be saved and logged into a data file.","lastModifiedDate":"2022-09-28"},{"lineNumber":119,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":120,"author":{"gitId":"dhanish265"},"content":"    public void saveData(TaskList taskList) {","lastModifiedDate":"2022-09-26"},{"lineNumber":121,"author":{"gitId":"dhanish265"},"content":"        FileWriter fileWriter \u003d null;","lastModifiedDate":"2022-09-26"},{"lineNumber":122,"author":{"gitId":"dhanish265"},"content":"        try {","lastModifiedDate":"2022-09-26"},{"lineNumber":123,"author":{"gitId":"dhanish265"},"content":"            fileWriter \u003d new FileWriter(dataFile);","lastModifiedDate":"2022-09-26"},{"lineNumber":124,"author":{"gitId":"dhanish265"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-09-26"},{"lineNumber":125,"author":{"gitId":"dhanish265"},"content":"            Ui.showErrorMessage(\"Error! File writer could not be created!\");","lastModifiedDate":"2022-09-26"},{"lineNumber":126,"author":{"gitId":"dhanish265"},"content":"            Duke.exit(-1);","lastModifiedDate":"2022-09-26"},{"lineNumber":127,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":128,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":129,"author":{"gitId":"dhanish265"},"content":"        try {","lastModifiedDate":"2022-09-26"},{"lineNumber":130,"author":{"gitId":"dhanish265"},"content":"            for (Task task : taskList.getTasks()) {","lastModifiedDate":"2022-09-26"},{"lineNumber":131,"author":{"gitId":"dhanish265"},"content":"                logTaskIntoDataFile(fileWriter, task);","lastModifiedDate":"2022-09-26"},{"lineNumber":132,"author":{"gitId":"dhanish265"},"content":"            }","lastModifiedDate":"2022-09-26"},{"lineNumber":133,"author":{"gitId":"dhanish265"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-09-26"},{"lineNumber":134,"author":{"gitId":"dhanish265"},"content":"            Ui.showErrorMessage(\"Error! Data could not be written into data file!\");","lastModifiedDate":"2022-09-26"},{"lineNumber":135,"author":{"gitId":"dhanish265"},"content":"            Duke.exit(-1);","lastModifiedDate":"2022-09-26"},{"lineNumber":136,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":137,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":138,"author":{"gitId":"dhanish265"},"content":"        try {","lastModifiedDate":"2022-09-26"},{"lineNumber":139,"author":{"gitId":"dhanish265"},"content":"            fileWriter.close();","lastModifiedDate":"2022-09-26"},{"lineNumber":140,"author":{"gitId":"dhanish265"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-09-26"},{"lineNumber":141,"author":{"gitId":"dhanish265"},"content":"            Ui.showErrorMessage(\"Error! File writer could not be closed!\");","lastModifiedDate":"2022-09-26"},{"lineNumber":142,"author":{"gitId":"dhanish265"},"content":"            Duke.exit(-1);","lastModifiedDate":"2022-09-26"},{"lineNumber":143,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":144,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":145,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":146,"author":{"gitId":"dhanish265"},"content":"    private static void logTaskIntoDataFile(FileWriter fileWriter, Task task) throws IOException {","lastModifiedDate":"2022-09-26"},{"lineNumber":147,"author":{"gitId":"dhanish265"},"content":"        fileWriter.write(task.getTaskType());","lastModifiedDate":"2022-09-26"},{"lineNumber":148,"author":{"gitId":"dhanish265"},"content":"        fileWriter.write(\" | \");","lastModifiedDate":"2022-09-26"},{"lineNumber":149,"author":{"gitId":"dhanish265"},"content":"        fileWriter.write(task.getStatusIcon());","lastModifiedDate":"2022-09-26"},{"lineNumber":150,"author":{"gitId":"dhanish265"},"content":"        fileWriter.write(\" | \");","lastModifiedDate":"2022-09-26"},{"lineNumber":151,"author":{"gitId":"dhanish265"},"content":"        fileWriter.write(task.getDescription());","lastModifiedDate":"2022-09-26"},{"lineNumber":152,"author":{"gitId":"dhanish265"},"content":"        if (task instanceof Event) {","lastModifiedDate":"2022-09-26"},{"lineNumber":153,"author":{"gitId":"dhanish265"},"content":"            fileWriter.write(\" | \");","lastModifiedDate":"2022-09-26"},{"lineNumber":154,"author":{"gitId":"dhanish265"},"content":"            fileWriter.write(((Event) task).getTime(Parser.DATA_TIME_FORMAT));","lastModifiedDate":"2022-09-26"},{"lineNumber":155,"author":{"gitId":"dhanish265"},"content":"        } else if (task instanceof Deadline) {","lastModifiedDate":"2022-09-26"},{"lineNumber":156,"author":{"gitId":"dhanish265"},"content":"            fileWriter.write(\" | \");","lastModifiedDate":"2022-09-26"},{"lineNumber":157,"author":{"gitId":"dhanish265"},"content":"            fileWriter.write(((Deadline) task).getDeadline(Parser.DATA_TIME_FORMAT));","lastModifiedDate":"2022-09-26"},{"lineNumber":158,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":159,"author":{"gitId":"dhanish265"},"content":"        fileWriter.write(System.lineSeparator());","lastModifiedDate":"2022-09-26"},{"lineNumber":160,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":161,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":162,"author":{"gitId":"dhanish265"},"content":"}","lastModifiedDate":"2022-09-26"}],"authorContributionMap":{"dhanish265":162}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dhanish265"},"content":"package duke;","lastModifiedDate":"2022-09-06"},{"lineNumber":2,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-06"},{"lineNumber":3,"author":{"gitId":"dhanish265"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2022-09-12"},{"lineNumber":4,"author":{"gitId":"dhanish265"},"content":"import duke.tasks.Event;","lastModifiedDate":"2022-09-12"},{"lineNumber":5,"author":{"gitId":"dhanish265"},"content":"import duke.tasks.Task;","lastModifiedDate":"2022-09-06"},{"lineNumber":6,"author":{"gitId":"dhanish265"},"content":"import duke.tasks.Todo;","lastModifiedDate":"2022-09-12"},{"lineNumber":7,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-06"},{"lineNumber":8,"author":{"gitId":"dhanish265"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-09-11"},{"lineNumber":9,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-11"},{"lineNumber":10,"author":{"gitId":"dhanish265"},"content":"/**","lastModifiedDate":"2022-09-28"},{"lineNumber":11,"author":{"gitId":"dhanish265"},"content":" * This class contains an {@code ArrayList} of {@code Task}s, and contains methods to do a variety of methods involving these tasks.","lastModifiedDate":"2022-09-28"},{"lineNumber":12,"author":{"gitId":"dhanish265"},"content":" * These include adding, removing, deleting, marking and unmarking as done, and finding.","lastModifiedDate":"2022-09-28"},{"lineNumber":13,"author":{"gitId":"dhanish265"},"content":" *","lastModifiedDate":"2022-09-28"},{"lineNumber":14,"author":{"gitId":"dhanish265"},"content":" * @author Dhanish","lastModifiedDate":"2022-09-28"},{"lineNumber":15,"author":{"gitId":"dhanish265"},"content":" */","lastModifiedDate":"2022-09-28"},{"lineNumber":16,"author":{"gitId":"dhanish265"},"content":"public class TaskList {","lastModifiedDate":"2022-09-26"},{"lineNumber":17,"author":{"gitId":"dhanish265"},"content":"    private final ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2022-09-28"},{"lineNumber":18,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":19,"author":{"gitId":"dhanish265"},"content":"    static final String[] LIST_OF_COMMANDS \u003d {\"help\", \"todo\", \"mark\", \"unmark\", \"list\", \"bye\", \"deadline\", \"event\", \"delete\", \"find\"};","lastModifiedDate":"2022-09-26"},{"lineNumber":20,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-04"},{"lineNumber":21,"author":{"gitId":"dhanish265"},"content":"    public static final String DEADLINE_SEPERATOR \u003d \" /by \";","lastModifiedDate":"2022-08-29"},{"lineNumber":22,"author":{"gitId":"dhanish265"},"content":"    public static final String EVENT_SEPERATOR \u003d \" /at \";","lastModifiedDate":"2022-08-29"},{"lineNumber":23,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-08-29"},{"lineNumber":24,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":25,"author":{"gitId":"dhanish265"},"content":"     * Constructor that initialises an empty {@code ArrayList} of {@code Task}s.","lastModifiedDate":"2022-09-28"},{"lineNumber":26,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":27,"author":{"gitId":"dhanish265"},"content":"    public TaskList() {","lastModifiedDate":"2022-09-26"},{"lineNumber":28,"author":{"gitId":"dhanish265"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-09-11"},{"lineNumber":29,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-08-28"},{"lineNumber":30,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":31,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":32,"author":{"gitId":"dhanish265"},"content":"     * Retrieves the {@code Task} corresponding to the input task number.","lastModifiedDate":"2022-09-28"},{"lineNumber":33,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":34,"author":{"gitId":"dhanish265"},"content":"     * @param taskNumber - number of the {@code Task} to be retrieved.","lastModifiedDate":"2022-09-28"},{"lineNumber":35,"author":{"gitId":"dhanish265"},"content":"     * @return the corresponding {@code Task}.","lastModifiedDate":"2022-09-28"},{"lineNumber":36,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":37,"author":{"gitId":"dhanish265"},"content":"    public Task getTask(int taskNumber) {","lastModifiedDate":"2022-09-12"},{"lineNumber":38,"author":{"gitId":"dhanish265"},"content":"        return tasks.get(taskNumber);","lastModifiedDate":"2022-09-12"},{"lineNumber":39,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-12"},{"lineNumber":40,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-12"},{"lineNumber":41,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":42,"author":{"gitId":"dhanish265"},"content":"     * Checks if input command {@code String} is a valid command","lastModifiedDate":"2022-09-28"},{"lineNumber":43,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":44,"author":{"gitId":"dhanish265"},"content":"     * @param command - {@code String} to be checked whether it is a valid command","lastModifiedDate":"2022-09-28"},{"lineNumber":45,"author":{"gitId":"dhanish265"},"content":"     * @return {@code true} if input {@code String} is a valid command, {@code false} otherwise.","lastModifiedDate":"2022-09-28"},{"lineNumber":46,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":47,"author":{"gitId":"dhanish265"},"content":"    public static boolean isValidCommand(String command) {","lastModifiedDate":"2022-09-04"},{"lineNumber":48,"author":{"gitId":"dhanish265"},"content":"        for (String validCommand : LIST_OF_COMMANDS) {","lastModifiedDate":"2022-09-04"},{"lineNumber":49,"author":{"gitId":"dhanish265"},"content":"            if (command.equals(validCommand))","lastModifiedDate":"2022-09-04"},{"lineNumber":50,"author":{"gitId":"dhanish265"},"content":"                return true;","lastModifiedDate":"2022-09-04"},{"lineNumber":51,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-04"},{"lineNumber":52,"author":{"gitId":"dhanish265"},"content":"        return false;","lastModifiedDate":"2022-09-04"},{"lineNumber":53,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-04"},{"lineNumber":54,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-04"},{"lineNumber":55,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":56,"author":{"gitId":"dhanish265"},"content":"     * @return the {@code ArrayList} of {@code Task}s in this {@code TaskList}.","lastModifiedDate":"2022-09-28"},{"lineNumber":57,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":58,"author":{"gitId":"dhanish265"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2022-09-11"},{"lineNumber":59,"author":{"gitId":"dhanish265"},"content":"        return tasks;","lastModifiedDate":"2022-08-28"},{"lineNumber":60,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-08-28"},{"lineNumber":61,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":62,"author":{"gitId":"dhanish265"},"content":"    private int getTotalNumberOfTasks() {","lastModifiedDate":"2022-09-28"},{"lineNumber":63,"author":{"gitId":"dhanish265"},"content":"        return tasks.size();","lastModifiedDate":"2022-09-11"},{"lineNumber":64,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-11"},{"lineNumber":65,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-11"},{"lineNumber":66,"author":{"gitId":"dhanish265"},"content":"    private boolean isEmpty() {","lastModifiedDate":"2022-09-28"},{"lineNumber":67,"author":{"gitId":"dhanish265"},"content":"        return tasks.isEmpty();","lastModifiedDate":"2022-09-11"},{"lineNumber":68,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-11"},{"lineNumber":69,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-11"},{"lineNumber":70,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":71,"author":{"gitId":"dhanish265"},"content":"     * This method adds the input {@code Task} into the {@code TaskList} and notifies the user that the {@code Task} has been added.","lastModifiedDate":"2022-09-28"},{"lineNumber":72,"author":{"gitId":"dhanish265"},"content":"     * It also prints the total number of tasks after adding.","lastModifiedDate":"2022-09-28"},{"lineNumber":73,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":74,"author":{"gitId":"dhanish265"},"content":"     * @param task - {@code Task} to be added into he {@code TaskList}.","lastModifiedDate":"2022-09-28"},{"lineNumber":75,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":76,"author":{"gitId":"dhanish265"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2022-08-28"},{"lineNumber":77,"author":{"gitId":"dhanish265"},"content":"        tasks.add(task);","lastModifiedDate":"2022-09-11"},{"lineNumber":78,"author":{"gitId":"dhanish265"},"content":"        System.out.println(\"\\tGot it. I\u0027ve added this task:\");","lastModifiedDate":"2022-08-28"},{"lineNumber":79,"author":{"gitId":"dhanish265"},"content":"        System.out.println(\"\\t  \" + task);","lastModifiedDate":"2022-08-28"},{"lineNumber":80,"author":{"gitId":"dhanish265"},"content":"        System.out.println(\"\\tNow you have \" + (getTotalNumberOfTasks()) + \" task(s) in the list.\");","lastModifiedDate":"2022-09-11"},{"lineNumber":81,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-08-28"},{"lineNumber":82,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":83,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":84,"author":{"gitId":"dhanish265"},"content":"     * This method checks if the input task number corresponds to a valid {@code Task} in the {@code TaskList}","lastModifiedDate":"2022-09-28"},{"lineNumber":85,"author":{"gitId":"dhanish265"},"content":"     * If yes, it removes the corresponding {@code Task} from the {@code TaskList}","lastModifiedDate":"2022-09-28"},{"lineNumber":86,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":87,"author":{"gitId":"dhanish265"},"content":"     * @param taskNumber - number of the {@code Task} to be removed from the {@code TaskList}","lastModifiedDate":"2022-09-28"},{"lineNumber":88,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":89,"author":{"gitId":"dhanish265"},"content":"    public void removeTask(int taskNumber) {","lastModifiedDate":"2022-09-11"},{"lineNumber":90,"author":{"gitId":"dhanish265"},"content":"        if (taskNumber \u003e\u003d getTotalNumberOfTasks() || taskNumber \u003c 0) {","lastModifiedDate":"2022-09-11"},{"lineNumber":91,"author":{"gitId":"dhanish265"},"content":"            System.out.println(\"\\tInvalid input! Please key in an existing task number!\");","lastModifiedDate":"2022-09-11"},{"lineNumber":92,"author":{"gitId":"dhanish265"},"content":"            return;","lastModifiedDate":"2022-09-11"},{"lineNumber":93,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-11"},{"lineNumber":94,"author":{"gitId":"dhanish265"},"content":"        Task task \u003d tasks.get(taskNumber);","lastModifiedDate":"2022-09-11"},{"lineNumber":95,"author":{"gitId":"dhanish265"},"content":"        tasks.remove(taskNumber);","lastModifiedDate":"2022-09-11"},{"lineNumber":96,"author":{"gitId":"dhanish265"},"content":"        System.out.println(\"\\tNoted. I\u0027ve removed this task:\");","lastModifiedDate":"2022-09-11"},{"lineNumber":97,"author":{"gitId":"dhanish265"},"content":"        System.out.println(\"\\t  \" + task);","lastModifiedDate":"2022-09-11"},{"lineNumber":98,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-11"},{"lineNumber":99,"author":{"gitId":"dhanish265"},"content":"        if (isEmpty()) {","lastModifiedDate":"2022-09-11"},{"lineNumber":100,"author":{"gitId":"dhanish265"},"content":"            System.out.println(\"Nothing in list right now!\");","lastModifiedDate":"2022-09-11"},{"lineNumber":101,"author":{"gitId":"dhanish265"},"content":"        } else {","lastModifiedDate":"2022-09-11"},{"lineNumber":102,"author":{"gitId":"dhanish265"},"content":"            System.out.println(\"\\tNow you have \" + (getTotalNumberOfTasks()) + \" task(s) in the list.\");","lastModifiedDate":"2022-09-11"},{"lineNumber":103,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-11"},{"lineNumber":104,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-11"},{"lineNumber":105,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-11"},{"lineNumber":106,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-12"},{"lineNumber":107,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":108,"author":{"gitId":"dhanish265"},"content":"     * adds a {@code Task} into the {@code TaskList} \u0027silently\u0027, without printing any output.","lastModifiedDate":"2022-09-28"},{"lineNumber":109,"author":{"gitId":"dhanish265"},"content":"     * Used when appropriate (such as initial loading of {@code Task}s from data file.","lastModifiedDate":"2022-09-28"},{"lineNumber":110,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":111,"author":{"gitId":"dhanish265"},"content":"     * @param task - {@code Task} to be added into the {@code TaskList} \u0027silently\u0027.","lastModifiedDate":"2022-09-28"},{"lineNumber":112,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":113,"author":{"gitId":"dhanish265"},"content":"    public void loadTask(Task task) {","lastModifiedDate":"2022-09-12"},{"lineNumber":114,"author":{"gitId":"dhanish265"},"content":"        tasks.add(task);","lastModifiedDate":"2022-09-12"},{"lineNumber":115,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-12"},{"lineNumber":116,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-12"},{"lineNumber":117,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":118,"author":{"gitId":"dhanish265"},"content":"     * This method marks a {@code Task} as done.","lastModifiedDate":"2022-09-28"},{"lineNumber":119,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":120,"author":{"gitId":"dhanish265"},"content":"     * @param taskNumber - the number of the {@code Task} to be marked as done.","lastModifiedDate":"2022-09-28"},{"lineNumber":121,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":122,"author":{"gitId":"dhanish265"},"content":"    public void markTaskAsDone(int taskNumber) {","lastModifiedDate":"2022-08-28"},{"lineNumber":123,"author":{"gitId":"dhanish265"},"content":"        if (taskNumber \u003e\u003d getTotalNumberOfTasks() || taskNumber \u003c 0) {","lastModifiedDate":"2022-09-11"},{"lineNumber":124,"author":{"gitId":"dhanish265"},"content":"            System.out.println(\"\\tInvalid input! Please key in an existing task number!\");","lastModifiedDate":"2022-08-28"},{"lineNumber":125,"author":{"gitId":"dhanish265"},"content":"            return;","lastModifiedDate":"2022-09-11"},{"lineNumber":126,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-11"},{"lineNumber":127,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-11"},{"lineNumber":128,"author":{"gitId":"dhanish265"},"content":"        if (tasks.get(taskNumber).isDone()) {","lastModifiedDate":"2022-09-11"},{"lineNumber":129,"author":{"gitId":"dhanish265"},"content":"            System.out.println(\"\\tThis task has already been marked as done!\");","lastModifiedDate":"2022-08-28"},{"lineNumber":130,"author":{"gitId":"dhanish265"},"content":"            return;","lastModifiedDate":"2022-09-11"},{"lineNumber":131,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-11"},{"lineNumber":132,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-11"},{"lineNumber":133,"author":{"gitId":"dhanish265"},"content":"        System.out.println(\"\\tNice! I\u0027ve marked this task as done: \");","lastModifiedDate":"2022-08-28"},{"lineNumber":134,"author":{"gitId":"dhanish265"},"content":"        tasks.get(taskNumber).markAsDone();","lastModifiedDate":"2022-09-11"},{"lineNumber":135,"author":{"gitId":"dhanish265"},"content":"        System.out.println(\"\\t  \" + getTask(taskNumber));","lastModifiedDate":"2022-09-28"},{"lineNumber":136,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-08-28"},{"lineNumber":137,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":138,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":139,"author":{"gitId":"dhanish265"},"content":"     * This method marks a {@code Task} as undone.","lastModifiedDate":"2022-09-28"},{"lineNumber":140,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":141,"author":{"gitId":"dhanish265"},"content":"     * @param taskNumber - the number of the {@code Task} to be marked undone.","lastModifiedDate":"2022-09-28"},{"lineNumber":142,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":143,"author":{"gitId":"dhanish265"},"content":"    public void markTaskAsUndone(int taskNumber) {","lastModifiedDate":"2022-08-28"},{"lineNumber":144,"author":{"gitId":"dhanish265"},"content":"        if (taskNumber \u003e\u003d getTotalNumberOfTasks() || taskNumber \u003c 0) {","lastModifiedDate":"2022-09-11"},{"lineNumber":145,"author":{"gitId":"dhanish265"},"content":"            System.out.println(\"\\tInvalid input! Please key in an existing task number!\");","lastModifiedDate":"2022-08-28"},{"lineNumber":146,"author":{"gitId":"dhanish265"},"content":"            return;","lastModifiedDate":"2022-09-11"},{"lineNumber":147,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-11"},{"lineNumber":148,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-11"},{"lineNumber":149,"author":{"gitId":"dhanish265"},"content":"        if (!tasks.get(taskNumber).isDone()) {","lastModifiedDate":"2022-09-11"},{"lineNumber":150,"author":{"gitId":"dhanish265"},"content":"            System.out.println(\"\\tThis task has already been marked as not done!\");","lastModifiedDate":"2022-08-28"},{"lineNumber":151,"author":{"gitId":"dhanish265"},"content":"            return;","lastModifiedDate":"2022-09-11"},{"lineNumber":152,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-11"},{"lineNumber":153,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-11"},{"lineNumber":154,"author":{"gitId":"dhanish265"},"content":"        System.out.println(\"\\tOK, I\u0027ve marked this task as not done yet: \");","lastModifiedDate":"2022-08-28"},{"lineNumber":155,"author":{"gitId":"dhanish265"},"content":"        tasks.get(taskNumber).markAsUndone();","lastModifiedDate":"2022-09-11"},{"lineNumber":156,"author":{"gitId":"dhanish265"},"content":"        System.out.println(\"\\t  \" + getTask(taskNumber));","lastModifiedDate":"2022-09-28"},{"lineNumber":157,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-11"},{"lineNumber":158,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-08-28"},{"lineNumber":159,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":160,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":161,"author":{"gitId":"dhanish265"},"content":"     * Lists all the present {@code Task}s in a numbered list.","lastModifiedDate":"2022-09-28"},{"lineNumber":162,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":163,"author":{"gitId":"dhanish265"},"content":"    public void listTasks() {","lastModifiedDate":"2022-08-28"},{"lineNumber":164,"author":{"gitId":"dhanish265"},"content":"        if (isEmpty()) {","lastModifiedDate":"2022-09-11"},{"lineNumber":165,"author":{"gitId":"dhanish265"},"content":"            System.out.println(\"\\tNothing in list right now!\");","lastModifiedDate":"2022-08-28"},{"lineNumber":166,"author":{"gitId":"dhanish265"},"content":"            return;","lastModifiedDate":"2022-09-04"},{"lineNumber":167,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-08-28"},{"lineNumber":168,"author":{"gitId":"dhanish265"},"content":"        System.out.println(\"\\tHere are the tasks in your list: \");","lastModifiedDate":"2022-08-28"},{"lineNumber":169,"author":{"gitId":"dhanish265"},"content":"        for (int taskNumber \u003d 0; taskNumber \u003c getTotalNumberOfTasks(); taskNumber++) {","lastModifiedDate":"2022-09-11"},{"lineNumber":170,"author":{"gitId":"dhanish265"},"content":"            System.out.println(\"\\t\" + (taskNumber + 1) + \". \" + getTask(taskNumber));","lastModifiedDate":"2022-09-28"},{"lineNumber":171,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-08-28"},{"lineNumber":172,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-08-28"},{"lineNumber":173,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":174,"author":{"gitId":"dhanish265"},"content":"    private void listMatchingTasks() {","lastModifiedDate":"2022-09-28"},{"lineNumber":175,"author":{"gitId":"dhanish265"},"content":"        if (isEmpty()) {","lastModifiedDate":"2022-09-26"},{"lineNumber":176,"author":{"gitId":"dhanish265"},"content":"            System.out.println(\"\\tNothing in the list matches your search keyword!\");","lastModifiedDate":"2022-09-26"},{"lineNumber":177,"author":{"gitId":"dhanish265"},"content":"            return;","lastModifiedDate":"2022-09-26"},{"lineNumber":178,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":179,"author":{"gitId":"dhanish265"},"content":"        System.out.println(\"\\tHere are the matching tasks in your list: \");","lastModifiedDate":"2022-09-26"},{"lineNumber":180,"author":{"gitId":"dhanish265"},"content":"        for (int taskNumber \u003d 0; taskNumber \u003c getTotalNumberOfTasks(); taskNumber++) {","lastModifiedDate":"2022-09-26"},{"lineNumber":181,"author":{"gitId":"dhanish265"},"content":"            System.out.println(\"\\t\" + (taskNumber + 1) + \". \" + tasks.get(taskNumber));","lastModifiedDate":"2022-09-26"},{"lineNumber":182,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":183,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":184,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":185,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":186,"author":{"gitId":"dhanish265"},"content":"     * Finds all {@code Task}s that match the input keyword, and presents them in a numbered list.","lastModifiedDate":"2022-09-28"},{"lineNumber":187,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":188,"author":{"gitId":"dhanish265"},"content":"     * @param keyword - the word to search for in the descriptions of each of the {@code Task}s.","lastModifiedDate":"2022-09-28"},{"lineNumber":189,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":190,"author":{"gitId":"dhanish265"},"content":"    public void find(String keyword) { //keyword will be made lower case before the function is called","lastModifiedDate":"2022-09-26"},{"lineNumber":191,"author":{"gitId":"dhanish265"},"content":"        TaskList matchingTaskList \u003d new TaskList();","lastModifiedDate":"2022-09-26"},{"lineNumber":192,"author":{"gitId":"dhanish265"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2022-09-26"},{"lineNumber":193,"author":{"gitId":"dhanish265"},"content":"            String taskName \u003d task.toString().toLowerCase();","lastModifiedDate":"2022-09-26"},{"lineNumber":194,"author":{"gitId":"dhanish265"},"content":"            if (taskName.contains(keyword)) {","lastModifiedDate":"2022-09-26"},{"lineNumber":195,"author":{"gitId":"dhanish265"},"content":"                matchingTaskList.loadTask(task);","lastModifiedDate":"2022-09-26"},{"lineNumber":196,"author":{"gitId":"dhanish265"},"content":"            }","lastModifiedDate":"2022-09-26"},{"lineNumber":197,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":198,"author":{"gitId":"dhanish265"},"content":"        matchingTaskList.listMatchingTasks();","lastModifiedDate":"2022-09-26"},{"lineNumber":199,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":200,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":201,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":202,"author":{"gitId":"dhanish265"},"content":"     * Given the type of {@code Task}, the description of the {@code Task}, the completion status of the {@code Task} and time (if any),","lastModifiedDate":"2022-09-28"},{"lineNumber":203,"author":{"gitId":"dhanish265"},"content":"     * this method creates a {@code Task} that encapsulates the above data and returns it","lastModifiedDate":"2022-09-28"},{"lineNumber":204,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":205,"author":{"gitId":"dhanish265"},"content":"     * @param taskType","lastModifiedDate":"2022-09-28"},{"lineNumber":206,"author":{"gitId":"dhanish265"},"content":"     * @param description","lastModifiedDate":"2022-09-28"},{"lineNumber":207,"author":{"gitId":"dhanish265"},"content":"     * @param status","lastModifiedDate":"2022-09-28"},{"lineNumber":208,"author":{"gitId":"dhanish265"},"content":"     * @param time","lastModifiedDate":"2022-09-28"},{"lineNumber":209,"author":{"gitId":"dhanish265"},"content":"     * @return the {@code Task} that contains the above information.","lastModifiedDate":"2022-09-28"},{"lineNumber":210,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":211,"author":{"gitId":"dhanish265"},"content":"    public static Task initialiseTaskFromParameters(String taskType, String description, String status, String time) {","lastModifiedDate":"2022-09-12"},{"lineNumber":212,"author":{"gitId":"dhanish265"},"content":"        Task task;","lastModifiedDate":"2022-09-12"},{"lineNumber":213,"author":{"gitId":"dhanish265"},"content":"        switch (taskType) {","lastModifiedDate":"2022-09-12"},{"lineNumber":214,"author":{"gitId":"dhanish265"},"content":"        case Todo.TASK_TYPE:","lastModifiedDate":"2022-09-12"},{"lineNumber":215,"author":{"gitId":"dhanish265"},"content":"            task \u003d new Todo(description);","lastModifiedDate":"2022-09-12"},{"lineNumber":216,"author":{"gitId":"dhanish265"},"content":"            break;","lastModifiedDate":"2022-09-12"},{"lineNumber":217,"author":{"gitId":"dhanish265"},"content":"        case Event.TASK_TYPE:","lastModifiedDate":"2022-09-12"},{"lineNumber":218,"author":{"gitId":"dhanish265"},"content":"            task \u003d new Event(description, time);","lastModifiedDate":"2022-09-12"},{"lineNumber":219,"author":{"gitId":"dhanish265"},"content":"            break;","lastModifiedDate":"2022-09-12"},{"lineNumber":220,"author":{"gitId":"dhanish265"},"content":"        case Deadline.TASK_TYPE:","lastModifiedDate":"2022-09-12"},{"lineNumber":221,"author":{"gitId":"dhanish265"},"content":"            task \u003d new Deadline(description, time);","lastModifiedDate":"2022-09-12"},{"lineNumber":222,"author":{"gitId":"dhanish265"},"content":"            break;","lastModifiedDate":"2022-09-12"},{"lineNumber":223,"author":{"gitId":"dhanish265"},"content":"        default:","lastModifiedDate":"2022-09-12"},{"lineNumber":224,"author":{"gitId":"dhanish265"},"content":"            System.out.println(\"Error in data file!\");","lastModifiedDate":"2022-09-12"},{"lineNumber":225,"author":{"gitId":"dhanish265"},"content":"            Duke.exit(-1);","lastModifiedDate":"2022-09-12"},{"lineNumber":226,"author":{"gitId":"dhanish265"},"content":"            return null;","lastModifiedDate":"2022-09-12"},{"lineNumber":227,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-12"},{"lineNumber":228,"author":{"gitId":"dhanish265"},"content":"        if (status.equals(Task.getDoneIcon())) {","lastModifiedDate":"2022-09-12"},{"lineNumber":229,"author":{"gitId":"dhanish265"},"content":"            task.markAsDone();","lastModifiedDate":"2022-09-12"},{"lineNumber":230,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-12"},{"lineNumber":231,"author":{"gitId":"dhanish265"},"content":"        return task;","lastModifiedDate":"2022-09-12"},{"lineNumber":232,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-12"},{"lineNumber":233,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-12"},{"lineNumber":234,"author":{"gitId":"dhanish265"},"content":"}","lastModifiedDate":"2022-08-28"}],"authorContributionMap":{"dhanish265":234}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dhanish265"},"content":"package duke;","lastModifiedDate":"2022-09-26"},{"lineNumber":2,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":3,"author":{"gitId":"dhanish265"},"content":"import duke.exceptions.UnrecognizedCommandException;","lastModifiedDate":"2022-09-26"},{"lineNumber":4,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":5,"author":{"gitId":"dhanish265"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-09-26"},{"lineNumber":6,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":7,"author":{"gitId":"dhanish265"},"content":"/**","lastModifiedDate":"2022-09-28"},{"lineNumber":8,"author":{"gitId":"dhanish265"},"content":" * This class manages everything that has to do with accepting user input, as well as providing important helper functions for output.","lastModifiedDate":"2022-09-28"},{"lineNumber":9,"author":{"gitId":"dhanish265"},"content":" *","lastModifiedDate":"2022-09-28"},{"lineNumber":10,"author":{"gitId":"dhanish265"},"content":" * @author Dhanish","lastModifiedDate":"2022-09-28"},{"lineNumber":11,"author":{"gitId":"dhanish265"},"content":" */","lastModifiedDate":"2022-09-28"},{"lineNumber":12,"author":{"gitId":"dhanish265"},"content":"public class Ui {","lastModifiedDate":"2022-09-26"},{"lineNumber":13,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":14,"author":{"gitId":"dhanish265"},"content":"    public static final String DUKE_LOGO \u003d \" ____        _        \\n\"","lastModifiedDate":"2022-09-26"},{"lineNumber":15,"author":{"gitId":"dhanish265"},"content":"            + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2022-09-26"},{"lineNumber":16,"author":{"gitId":"dhanish265"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2022-09-26"},{"lineNumber":17,"author":{"gitId":"dhanish265"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2022-09-26"},{"lineNumber":18,"author":{"gitId":"dhanish265"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2022-09-26"},{"lineNumber":19,"author":{"gitId":"dhanish265"},"content":"    public static final String DEADLINE_SEPERATOR_ERROR_MESSAGE \u003d \"Incorrect format! Deadline must contain a task and its deadline separated by \u0027/by\u0027! Refer to \u0027help\u0027 for more details!\";","lastModifiedDate":"2022-09-26"},{"lineNumber":20,"author":{"gitId":"dhanish265"},"content":"    public static final String MISSING_DEADLINE_DESCRIPTION_ERROR_MESSAGE \u003d \"Incorrect format! The description of a deadline cannot be empty!\";","lastModifiedDate":"2022-09-26"},{"lineNumber":21,"author":{"gitId":"dhanish265"},"content":"    public static final String MISSING_DEADLINE_TIME_ERROR_MESSAGE \u003d \"Incorrect format! The deadline of a deadline cannot be empty!\";","lastModifiedDate":"2022-09-26"},{"lineNumber":22,"author":{"gitId":"dhanish265"},"content":"    public static final String MISSING_EVENT_DESCRIPTION_ERROR_MESSAGE \u003d \"Incorrect format! The description of an event cannot be empty!\";","lastModifiedDate":"2022-09-26"},{"lineNumber":23,"author":{"gitId":"dhanish265"},"content":"    public static final String EVENT_SEPERATOR_ERROR_MESSAGE \u003d \"Incorrect format! Event must contain a task and its time separated by \u0027/at\u0027! Refer to \u0027help\u0027 for more details!\";","lastModifiedDate":"2022-09-26"},{"lineNumber":24,"author":{"gitId":"dhanish265"},"content":"    public static final String MISSING_EVENT_TIME_ERROR_MESSAGE \u003d \"Incorrect format! The time of an event cannot be empty!\";","lastModifiedDate":"2022-09-26"},{"lineNumber":25,"author":{"gitId":"dhanish265"},"content":"    public static final String MISSING_TODO_DESCRIPTION_ERROR_MESSAGE \u003d \"Incorrect format! The description of a todo cannot be empty!\";","lastModifiedDate":"2022-09-26"},{"lineNumber":26,"author":{"gitId":"dhanish265"},"content":"    public static final String MISSING_TASK_NUMBER_ERROR_MESSAGE \u003d \"Incorrect format! The task number that is to be marked as done/not done cannot be empty!\";","lastModifiedDate":"2022-09-26"},{"lineNumber":27,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":28,"author":{"gitId":"dhanish265"},"content":"    public static final String HELP_MESSAGE","lastModifiedDate":"2022-09-26"},{"lineNumber":29,"author":{"gitId":"dhanish265"},"content":"            \u003d \"\\tlist of valid commands\" +","lastModifiedDate":"2022-09-26"},{"lineNumber":30,"author":{"gitId":"dhanish265"},"content":"            \"\\n\\t----------------------\" +","lastModifiedDate":"2022-09-26"},{"lineNumber":31,"author":{"gitId":"dhanish265"},"content":"            \"\\n\\n\\ttodo \" +","lastModifiedDate":"2022-09-26"},{"lineNumber":32,"author":{"gitId":"dhanish265"},"content":"            \"\\n\\t----\" +","lastModifiedDate":"2022-09-26"},{"lineNumber":33,"author":{"gitId":"dhanish265"},"content":"            \"\\n\\trecord a generic task without a deadline; format: \u0027todo\u0027 [name of task]\" +","lastModifiedDate":"2022-09-26"},{"lineNumber":34,"author":{"gitId":"dhanish265"},"content":"            \"\\n\\n\\tdeadline \" +","lastModifiedDate":"2022-09-26"},{"lineNumber":35,"author":{"gitId":"dhanish265"},"content":"            \"\\n\\t--------\" +","lastModifiedDate":"2022-09-26"},{"lineNumber":36,"author":{"gitId":"dhanish265"},"content":"            \"\\n\\trecord a task with a specific deadline; format: \u0027deadline\u0027 [name of task] \u0027/by\u0027 [deadline]\" +","lastModifiedDate":"2022-09-26"},{"lineNumber":37,"author":{"gitId":"dhanish265"},"content":"            \"\\n\\n\\tevent \" +","lastModifiedDate":"2022-09-26"},{"lineNumber":38,"author":{"gitId":"dhanish265"},"content":"            \"\\n\\t-----\" +","lastModifiedDate":"2022-09-26"},{"lineNumber":39,"author":{"gitId":"dhanish265"},"content":"            \"\\n\\trecord a task happening at a specific time; format: \u0027event\u0027 [name of event] \u0027/at\u0027 [time]\" +","lastModifiedDate":"2022-09-26"},{"lineNumber":40,"author":{"gitId":"dhanish265"},"content":"            \"\\n\\n\\tmark \" +","lastModifiedDate":"2022-09-26"},{"lineNumber":41,"author":{"gitId":"dhanish265"},"content":"            \"\\n\\t----\" +","lastModifiedDate":"2022-09-26"},{"lineNumber":42,"author":{"gitId":"dhanish265"},"content":"            \"\\n\\tmark a specific task as done; format: \u0027mark\u0027 [number of task]\" +","lastModifiedDate":"2022-09-26"},{"lineNumber":43,"author":{"gitId":"dhanish265"},"content":"            \"\\n\\n\\tunmark\" +","lastModifiedDate":"2022-09-26"},{"lineNumber":44,"author":{"gitId":"dhanish265"},"content":"            \"\\n\\t------\" +","lastModifiedDate":"2022-09-26"},{"lineNumber":45,"author":{"gitId":"dhanish265"},"content":"            \"\\n\\tmark a specific task as not done; format: \u0027unmark\u0027 [number of task]\" +","lastModifiedDate":"2022-09-26"},{"lineNumber":46,"author":{"gitId":"dhanish265"},"content":"            \"\\n\\n\\tdelete\" +","lastModifiedDate":"2022-09-26"},{"lineNumber":47,"author":{"gitId":"dhanish265"},"content":"            \"\\n\\t------\" +","lastModifiedDate":"2022-09-26"},{"lineNumber":48,"author":{"gitId":"dhanish265"},"content":"            \"\\n\\tdelete a specific task from the list of tasks; format: \u0027delete\u0027 [number of task]\" +","lastModifiedDate":"2022-09-26"},{"lineNumber":49,"author":{"gitId":"dhanish265"},"content":"            \"\\n\\n\\tlist\" +","lastModifiedDate":"2022-09-26"},{"lineNumber":50,"author":{"gitId":"dhanish265"},"content":"            \"\\n\\t----\" +","lastModifiedDate":"2022-09-26"},{"lineNumber":51,"author":{"gitId":"dhanish265"},"content":"            \" \\n\\tlist out all tasks and their completion status\" +","lastModifiedDate":"2022-09-26"},{"lineNumber":52,"author":{"gitId":"dhanish265"},"content":"            \"\\n\\n\\tfind\" +","lastModifiedDate":"2022-09-26"},{"lineNumber":53,"author":{"gitId":"dhanish265"},"content":"            \"\\n\\t----\" +","lastModifiedDate":"2022-09-26"},{"lineNumber":54,"author":{"gitId":"dhanish265"},"content":"            \" \\n\\tshortlist tasks with a specific keyword; format \u0027find\u0027 [keyword]\" +","lastModifiedDate":"2022-09-26"},{"lineNumber":55,"author":{"gitId":"dhanish265"},"content":"            \"\\n\\n\\tbye\" +","lastModifiedDate":"2022-09-26"},{"lineNumber":56,"author":{"gitId":"dhanish265"},"content":"            \"\\n\\t---\" +","lastModifiedDate":"2022-09-26"},{"lineNumber":57,"author":{"gitId":"dhanish265"},"content":"            \" \\n\\texit the program\";","lastModifiedDate":"2022-09-26"},{"lineNumber":58,"author":{"gitId":"dhanish265"},"content":"    public static final String MISSING_FIND_KEYWORD_ERROR_MESSAGE \u003d \"Incorrect format! The search keyword for a find command cannot be empty!\";","lastModifiedDate":"2022-09-26"},{"lineNumber":59,"author":{"gitId":"dhanish265"},"content":"    public static final String INVALID_TASK_NUMBER_ERROR_MESSAGE \u003d \"Incorrect format! Please enter a valid integer number to mark a task as done or not done!\";","lastModifiedDate":"2022-09-26"},{"lineNumber":60,"author":{"gitId":"dhanish265"},"content":"    public static final String INVALID_TIME_FORMAT_ERROR_MESSAGE \u003d \"Incorrect format! The time entered is not a valid date or is not in the correct format (uuuu-MM-dd H:mm)!\";","lastModifiedDate":"2022-09-26"},{"lineNumber":61,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":62,"author":{"gitId":"dhanish265"},"content":"    Scanner scanner;","lastModifiedDate":"2022-09-26"},{"lineNumber":63,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":64,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":65,"author":{"gitId":"dhanish265"},"content":"     * Constructor that initializes the Scanner that will be used to read input from user throughout the program.","lastModifiedDate":"2022-09-28"},{"lineNumber":66,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":67,"author":{"gitId":"dhanish265"},"content":"    public Ui() {","lastModifiedDate":"2022-09-26"},{"lineNumber":68,"author":{"gitId":"dhanish265"},"content":"        scanner \u003d new Scanner(System.in);","lastModifiedDate":"2022-09-26"},{"lineNumber":69,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":70,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":71,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":72,"author":{"gitId":"dhanish265"},"content":"     * This method is used to print error messages in a neat format.","lastModifiedDate":"2022-09-28"},{"lineNumber":73,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":74,"author":{"gitId":"dhanish265"},"content":"     * @param errorMessage - error message to be printed.","lastModifiedDate":"2022-09-28"},{"lineNumber":75,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":76,"author":{"gitId":"dhanish265"},"content":"    public static void showErrorMessage(String errorMessage) {","lastModifiedDate":"2022-09-28"},{"lineNumber":77,"author":{"gitId":"dhanish265"},"content":"        printLine();","lastModifiedDate":"2022-09-26"},{"lineNumber":78,"author":{"gitId":"dhanish265"},"content":"        System.out.println(\"\\t \" + errorMessage);","lastModifiedDate":"2022-09-28"},{"lineNumber":79,"author":{"gitId":"dhanish265"},"content":"        printLine();","lastModifiedDate":"2022-09-26"},{"lineNumber":80,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":81,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":82,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":83,"author":{"gitId":"dhanish265"},"content":"     * This method first accepts user input through other helper functions.","lastModifiedDate":"2022-09-28"},{"lineNumber":84,"author":{"gitId":"dhanish265"},"content":"     * It then processes it to retrieve the command keyword, and validates it. If the input is not valid, an exception is caught.","lastModifiedDate":"2022-09-28"},{"lineNumber":85,"author":{"gitId":"dhanish265"},"content":"     * It repeates the process until a valid input is obtained.","lastModifiedDate":"2022-09-28"},{"lineNumber":86,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":87,"author":{"gitId":"dhanish265"},"content":"     * @return - the valid input obtained at the end of the method.","lastModifiedDate":"2022-09-28"},{"lineNumber":88,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":89,"author":{"gitId":"dhanish265"},"content":"    public String acceptAndValidateInput() {","lastModifiedDate":"2022-09-26"},{"lineNumber":90,"author":{"gitId":"dhanish265"},"content":"        boolean isInputValid \u003d false;","lastModifiedDate":"2022-09-26"},{"lineNumber":91,"author":{"gitId":"dhanish265"},"content":"        String input \u003d \"\";","lastModifiedDate":"2022-09-26"},{"lineNumber":92,"author":{"gitId":"dhanish265"},"content":"        String command \u003d \"\";","lastModifiedDate":"2022-09-26"},{"lineNumber":93,"author":{"gitId":"dhanish265"},"content":"        while (!isInputValid) {","lastModifiedDate":"2022-09-26"},{"lineNumber":94,"author":{"gitId":"dhanish265"},"content":"            try {","lastModifiedDate":"2022-09-26"},{"lineNumber":95,"author":{"gitId":"dhanish265"},"content":"                input \u003d readLine();","lastModifiedDate":"2022-09-26"},{"lineNumber":96,"author":{"gitId":"dhanish265"},"content":"                command \u003d Parser.retrieveCommand(input);","lastModifiedDate":"2022-09-26"},{"lineNumber":97,"author":{"gitId":"dhanish265"},"content":"                Parser.validateCommand(command);","lastModifiedDate":"2022-09-26"},{"lineNumber":98,"author":{"gitId":"dhanish265"},"content":"                isInputValid \u003d true;","lastModifiedDate":"2022-09-26"},{"lineNumber":99,"author":{"gitId":"dhanish265"},"content":"            } catch (UnrecognizedCommandException e) {","lastModifiedDate":"2022-09-26"},{"lineNumber":100,"author":{"gitId":"dhanish265"},"content":"                printLine();","lastModifiedDate":"2022-09-26"},{"lineNumber":101,"author":{"gitId":"dhanish265"},"content":"                System.out.println(\"\\t\" + e.getMessage());","lastModifiedDate":"2022-09-26"},{"lineNumber":102,"author":{"gitId":"dhanish265"},"content":"                printLine();","lastModifiedDate":"2022-09-26"},{"lineNumber":103,"author":{"gitId":"dhanish265"},"content":"            }","lastModifiedDate":"2022-09-26"},{"lineNumber":104,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":105,"author":{"gitId":"dhanish265"},"content":"        return input;","lastModifiedDate":"2022-09-26"},{"lineNumber":106,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":107,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":108,"author":{"gitId":"dhanish265"},"content":"    private String readLine() {","lastModifiedDate":"2022-09-28"},{"lineNumber":109,"author":{"gitId":"dhanish265"},"content":"        return scanner.nextLine().trim();","lastModifiedDate":"2022-09-26"},{"lineNumber":110,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":111,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":112,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":113,"author":{"gitId":"dhanish265"},"content":"     * Prints a help message containing all the valid commands and their formats.","lastModifiedDate":"2022-09-28"},{"lineNumber":114,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":115,"author":{"gitId":"dhanish265"},"content":"    public void printHelpMessage() {","lastModifiedDate":"2022-09-26"},{"lineNumber":116,"author":{"gitId":"dhanish265"},"content":"        System.out.println(HELP_MESSAGE);","lastModifiedDate":"2022-09-26"},{"lineNumber":117,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":118,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":119,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":120,"author":{"gitId":"dhanish265"},"content":"     * Useful helper method to print a solid underline.","lastModifiedDate":"2022-09-28"},{"lineNumber":121,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":122,"author":{"gitId":"dhanish265"},"content":"    public static void printLine() {","lastModifiedDate":"2022-09-26"},{"lineNumber":123,"author":{"gitId":"dhanish265"},"content":"        System.out.print(\"\\t\");","lastModifiedDate":"2022-09-26"},{"lineNumber":124,"author":{"gitId":"dhanish265"},"content":"        for (int i \u003d 0; i \u003c 60; i++) {","lastModifiedDate":"2022-09-26"},{"lineNumber":125,"author":{"gitId":"dhanish265"},"content":"            System.out.print(\"\\u2500\");","lastModifiedDate":"2022-09-26"},{"lineNumber":126,"author":{"gitId":"dhanish265"},"content":"        }","lastModifiedDate":"2022-09-26"},{"lineNumber":127,"author":{"gitId":"dhanish265"},"content":"        System.out.println();","lastModifiedDate":"2022-09-26"},{"lineNumber":128,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":129,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":130,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":131,"author":{"gitId":"dhanish265"},"content":"     * Prints a welcome message to the user at the start of the program.","lastModifiedDate":"2022-09-28"},{"lineNumber":132,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":133,"author":{"gitId":"dhanish265"},"content":"    public void greet() {","lastModifiedDate":"2022-09-26"},{"lineNumber":134,"author":{"gitId":"dhanish265"},"content":"        System.out.println(\"\\nHello from\\n\" + Ui.DUKE_LOGO);","lastModifiedDate":"2022-09-26"},{"lineNumber":135,"author":{"gitId":"dhanish265"},"content":"        printLine();","lastModifiedDate":"2022-09-26"},{"lineNumber":136,"author":{"gitId":"dhanish265"},"content":"        System.out.println(\"\\tHello! I\u0027m Duke!\");","lastModifiedDate":"2022-09-26"},{"lineNumber":137,"author":{"gitId":"dhanish265"},"content":"        System.out.println(\"\\tWhat can I do for you?\");","lastModifiedDate":"2022-09-26"},{"lineNumber":138,"author":{"gitId":"dhanish265"},"content":"        printLine();","lastModifiedDate":"2022-09-26"},{"lineNumber":139,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":140,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":141,"author":{"gitId":"dhanish265"},"content":"}","lastModifiedDate":"2022-09-26"}],"authorContributionMap":{"dhanish265":141}},{"path":"src/main/java/duke/commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dhanish265"},"content":"package duke.commands;","lastModifiedDate":"2022-09-26"},{"lineNumber":2,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":3,"author":{"gitId":"dhanish265"},"content":"import duke.Storage;","lastModifiedDate":"2022-09-26"},{"lineNumber":4,"author":{"gitId":"dhanish265"},"content":"import duke.TaskList;","lastModifiedDate":"2022-09-26"},{"lineNumber":5,"author":{"gitId":"dhanish265"},"content":"import duke.Ui;","lastModifiedDate":"2022-09-26"},{"lineNumber":6,"author":{"gitId":"dhanish265"},"content":"import duke.tasks.Task;","lastModifiedDate":"2022-09-26"},{"lineNumber":7,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":8,"author":{"gitId":"dhanish265"},"content":"/**","lastModifiedDate":"2022-09-28"},{"lineNumber":9,"author":{"gitId":"dhanish265"},"content":" * This class is a subclass of {@code Command} that provides an implementation for adding {@code Task}s into the current list of {@code Task}s.","lastModifiedDate":"2022-09-28"},{"lineNumber":10,"author":{"gitId":"dhanish265"},"content":" *","lastModifiedDate":"2022-09-28"},{"lineNumber":11,"author":{"gitId":"dhanish265"},"content":" * @author Dhanish","lastModifiedDate":"2022-09-28"},{"lineNumber":12,"author":{"gitId":"dhanish265"},"content":" */","lastModifiedDate":"2022-09-28"},{"lineNumber":13,"author":{"gitId":"dhanish265"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2022-09-26"},{"lineNumber":14,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":15,"author":{"gitId":"dhanish265"},"content":"    private final Task taskToBeAdded;","lastModifiedDate":"2022-09-28"},{"lineNumber":16,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":17,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":18,"author":{"gitId":"dhanish265"},"content":"     * Constructor that takes in the {@code Task} to be added and instantiates the {@code AddCommand} accordingly.","lastModifiedDate":"2022-09-28"},{"lineNumber":19,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":20,"author":{"gitId":"dhanish265"},"content":"     * @param taskToBeAdded - the {@code Task} to be added to the list of {@code Task}s.","lastModifiedDate":"2022-09-28"},{"lineNumber":21,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":22,"author":{"gitId":"dhanish265"},"content":"    public AddCommand(Task taskToBeAdded) {","lastModifiedDate":"2022-09-26"},{"lineNumber":23,"author":{"gitId":"dhanish265"},"content":"        super(false);","lastModifiedDate":"2022-09-26"},{"lineNumber":24,"author":{"gitId":"dhanish265"},"content":"        this.taskToBeAdded \u003d taskToBeAdded;","lastModifiedDate":"2022-09-26"},{"lineNumber":25,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":26,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":27,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":28,"author":{"gitId":"dhanish265"},"content":"     * This method adds the {@code Task} that it was instantiated with into the list of {@code Task}s, and saves the data accordingly.","lastModifiedDate":"2022-09-28"},{"lineNumber":29,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":30,"author":{"gitId":"dhanish265"},"content":"     * @param tasks   - list of {@code Task}s currently in the system","lastModifiedDate":"2022-09-28"},{"lineNumber":31,"author":{"gitId":"dhanish265"},"content":"     * @param ui      - an object that deals with user input and interaction","lastModifiedDate":"2022-09-28"},{"lineNumber":32,"author":{"gitId":"dhanish265"},"content":"     * @param storage - an object that contains the most up-to-date data of the tasks and offers methods for reading and re-writing file data.","lastModifiedDate":"2022-09-28"},{"lineNumber":33,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":34,"author":{"gitId":"dhanish265"},"content":"    @Override","lastModifiedDate":"2022-09-26"},{"lineNumber":35,"author":{"gitId":"dhanish265"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2022-09-26"},{"lineNumber":36,"author":{"gitId":"dhanish265"},"content":"        ui.printLine();","lastModifiedDate":"2022-09-26"},{"lineNumber":37,"author":{"gitId":"dhanish265"},"content":"        tasks.addTask(taskToBeAdded);","lastModifiedDate":"2022-09-26"},{"lineNumber":38,"author":{"gitId":"dhanish265"},"content":"        storage.saveData(tasks);","lastModifiedDate":"2022-09-26"},{"lineNumber":39,"author":{"gitId":"dhanish265"},"content":"        ui.printLine();","lastModifiedDate":"2022-09-26"},{"lineNumber":40,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":41,"author":{"gitId":"dhanish265"},"content":"}","lastModifiedDate":"2022-09-26"}],"authorContributionMap":{"dhanish265":41}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dhanish265"},"content":"package duke.commands;","lastModifiedDate":"2022-09-26"},{"lineNumber":2,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":3,"author":{"gitId":"dhanish265"},"content":"import duke.Storage;","lastModifiedDate":"2022-09-26"},{"lineNumber":4,"author":{"gitId":"dhanish265"},"content":"import duke.TaskList;","lastModifiedDate":"2022-09-26"},{"lineNumber":5,"author":{"gitId":"dhanish265"},"content":"import duke.Ui;","lastModifiedDate":"2022-09-26"},{"lineNumber":6,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":7,"author":{"gitId":"dhanish265"},"content":"/**","lastModifiedDate":"2022-09-28"},{"lineNumber":8,"author":{"gitId":"dhanish265"},"content":" * This abstract class provides a template for other, specialised {@code Command}s to build upon.","lastModifiedDate":"2022-09-28"},{"lineNumber":9,"author":{"gitId":"dhanish265"},"content":" * It provides information on whether the {@code Command} is an exiting {@code Command},","lastModifiedDate":"2022-09-28"},{"lineNumber":10,"author":{"gitId":"dhanish265"},"content":" * and an abstract method that allows its subclasses to implement the {@code Command}\u0027s execution.","lastModifiedDate":"2022-09-28"},{"lineNumber":11,"author":{"gitId":"dhanish265"},"content":" *","lastModifiedDate":"2022-09-28"},{"lineNumber":12,"author":{"gitId":"dhanish265"},"content":" * @author Dhanish","lastModifiedDate":"2022-09-28"},{"lineNumber":13,"author":{"gitId":"dhanish265"},"content":" */","lastModifiedDate":"2022-09-28"},{"lineNumber":14,"author":{"gitId":"dhanish265"},"content":"public abstract class Command {","lastModifiedDate":"2022-09-26"},{"lineNumber":15,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":16,"author":{"gitId":"dhanish265"},"content":"    private final boolean isExit;","lastModifiedDate":"2022-09-28"},{"lineNumber":17,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":18,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":19,"author":{"gitId":"dhanish265"},"content":"     * Constructor that instantiates the method based off the input boolean value.","lastModifiedDate":"2022-09-28"},{"lineNumber":20,"author":{"gitId":"dhanish265"},"content":"     * Note that this constructor can only be called from this class\u0027 subclasses","lastModifiedDate":"2022-09-28"},{"lineNumber":21,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":22,"author":{"gitId":"dhanish265"},"content":"     * @param isExit - a boolean variable that indicates if this {@code Command} is an exit {@code Command}.","lastModifiedDate":"2022-09-28"},{"lineNumber":23,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":24,"author":{"gitId":"dhanish265"},"content":"    public Command(boolean isExit) {","lastModifiedDate":"2022-09-26"},{"lineNumber":25,"author":{"gitId":"dhanish265"},"content":"        this.isExit \u003d isExit;","lastModifiedDate":"2022-09-26"},{"lineNumber":26,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":27,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":28,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":29,"author":{"gitId":"dhanish265"},"content":"     * This abstract method forces each of this class\u0027 subclasses to provide an implementation of their specific {@code Command}s.","lastModifiedDate":"2022-09-28"},{"lineNumber":30,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":31,"author":{"gitId":"dhanish265"},"content":"     * @param tasks   - list of {@code Task}s currently in the system","lastModifiedDate":"2022-09-28"},{"lineNumber":32,"author":{"gitId":"dhanish265"},"content":"     * @param ui      - an object that deals with user input and interaction","lastModifiedDate":"2022-09-28"},{"lineNumber":33,"author":{"gitId":"dhanish265"},"content":"     * @param storage - an object that contains the most up-to-date data of the tasks and offers methods for reading and re-writing file data.","lastModifiedDate":"2022-09-28"},{"lineNumber":34,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":35,"author":{"gitId":"dhanish265"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage);","lastModifiedDate":"2022-09-26"},{"lineNumber":36,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":37,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":38,"author":{"gitId":"dhanish265"},"content":"     * @return true if this method is an {@code ExitCommand}, false otherwise.","lastModifiedDate":"2022-09-28"},{"lineNumber":39,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":40,"author":{"gitId":"dhanish265"},"content":"    public boolean isExit() {","lastModifiedDate":"2022-09-26"},{"lineNumber":41,"author":{"gitId":"dhanish265"},"content":"        return isExit;","lastModifiedDate":"2022-09-26"},{"lineNumber":42,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":43,"author":{"gitId":"dhanish265"},"content":"}","lastModifiedDate":"2022-09-26"}],"authorContributionMap":{"dhanish265":43}},{"path":"src/main/java/duke/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dhanish265"},"content":"package duke.commands;","lastModifiedDate":"2022-09-26"},{"lineNumber":2,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":3,"author":{"gitId":"dhanish265"},"content":"import duke.Storage;","lastModifiedDate":"2022-09-26"},{"lineNumber":4,"author":{"gitId":"dhanish265"},"content":"import duke.TaskList;","lastModifiedDate":"2022-09-26"},{"lineNumber":5,"author":{"gitId":"dhanish265"},"content":"import duke.Ui;","lastModifiedDate":"2022-09-26"},{"lineNumber":6,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":7,"author":{"gitId":"dhanish265"},"content":"/**","lastModifiedDate":"2022-09-28"},{"lineNumber":8,"author":{"gitId":"dhanish265"},"content":" * This class is a subclass of {@code Command} that provides an implementation for deleting a {@code Task} from the list of {@code Task}s.","lastModifiedDate":"2022-09-28"},{"lineNumber":9,"author":{"gitId":"dhanish265"},"content":" *","lastModifiedDate":"2022-09-28"},{"lineNumber":10,"author":{"gitId":"dhanish265"},"content":" * @author Dhanish","lastModifiedDate":"2022-09-28"},{"lineNumber":11,"author":{"gitId":"dhanish265"},"content":" */","lastModifiedDate":"2022-09-28"},{"lineNumber":12,"author":{"gitId":"dhanish265"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2022-09-26"},{"lineNumber":13,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":14,"author":{"gitId":"dhanish265"},"content":"    private final int taskNumber;","lastModifiedDate":"2022-09-28"},{"lineNumber":15,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":16,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":17,"author":{"gitId":"dhanish265"},"content":"     * Constructor that takes in the number of the {@code Task} to be removed from the list of {@code Task}s","lastModifiedDate":"2022-09-28"},{"lineNumber":18,"author":{"gitId":"dhanish265"},"content":"     * and instantiates the {@code Command} accordingly.","lastModifiedDate":"2022-09-28"},{"lineNumber":19,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":20,"author":{"gitId":"dhanish265"},"content":"     * @param taskNumber - number of the {@code Task} to be deleted.","lastModifiedDate":"2022-09-28"},{"lineNumber":21,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":22,"author":{"gitId":"dhanish265"},"content":"    public DeleteCommand(int taskNumber) {","lastModifiedDate":"2022-09-26"},{"lineNumber":23,"author":{"gitId":"dhanish265"},"content":"        super(false);","lastModifiedDate":"2022-09-26"},{"lineNumber":24,"author":{"gitId":"dhanish265"},"content":"        this.taskNumber \u003d taskNumber;","lastModifiedDate":"2022-09-26"},{"lineNumber":25,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":26,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":27,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":28,"author":{"gitId":"dhanish265"},"content":"     * This method deletes the {@code Task} corresponding to the input task number (if possible) from the list of {@code Task}s, and saves the data accordingly.","lastModifiedDate":"2022-09-28"},{"lineNumber":29,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":30,"author":{"gitId":"dhanish265"},"content":"     * @param tasks   - list of {@code Task}s currently in the system","lastModifiedDate":"2022-09-28"},{"lineNumber":31,"author":{"gitId":"dhanish265"},"content":"     * @param ui      - an object that deals with user input and interaction","lastModifiedDate":"2022-09-28"},{"lineNumber":32,"author":{"gitId":"dhanish265"},"content":"     * @param storage - an object that contains the most up-to-date data of the tasks and offers methods for reading and re-writing file data.","lastModifiedDate":"2022-09-28"},{"lineNumber":33,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":34,"author":{"gitId":"dhanish265"},"content":"    @Override","lastModifiedDate":"2022-09-26"},{"lineNumber":35,"author":{"gitId":"dhanish265"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2022-09-26"},{"lineNumber":36,"author":{"gitId":"dhanish265"},"content":"        ui.printLine();","lastModifiedDate":"2022-09-26"},{"lineNumber":37,"author":{"gitId":"dhanish265"},"content":"        tasks.removeTask(taskNumber);","lastModifiedDate":"2022-09-26"},{"lineNumber":38,"author":{"gitId":"dhanish265"},"content":"        storage.saveData(tasks);","lastModifiedDate":"2022-09-26"},{"lineNumber":39,"author":{"gitId":"dhanish265"},"content":"        ui.printLine();","lastModifiedDate":"2022-09-26"},{"lineNumber":40,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":41,"author":{"gitId":"dhanish265"},"content":"}","lastModifiedDate":"2022-09-26"}],"authorContributionMap":{"dhanish265":41}},{"path":"src/main/java/duke/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dhanish265"},"content":"package duke.commands;","lastModifiedDate":"2022-09-26"},{"lineNumber":2,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":3,"author":{"gitId":"dhanish265"},"content":"import duke.Storage;","lastModifiedDate":"2022-09-26"},{"lineNumber":4,"author":{"gitId":"dhanish265"},"content":"import duke.TaskList;","lastModifiedDate":"2022-09-26"},{"lineNumber":5,"author":{"gitId":"dhanish265"},"content":"import duke.Ui;","lastModifiedDate":"2022-09-26"},{"lineNumber":6,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":7,"author":{"gitId":"dhanish265"},"content":"/**","lastModifiedDate":"2022-09-28"},{"lineNumber":8,"author":{"gitId":"dhanish265"},"content":" * This class is a subclass of {@code Command} that prepares the program to exit.","lastModifiedDate":"2022-09-28"},{"lineNumber":9,"author":{"gitId":"dhanish265"},"content":" *","lastModifiedDate":"2022-09-28"},{"lineNumber":10,"author":{"gitId":"dhanish265"},"content":" * @author Dhanish","lastModifiedDate":"2022-09-28"},{"lineNumber":11,"author":{"gitId":"dhanish265"},"content":" */","lastModifiedDate":"2022-09-28"},{"lineNumber":12,"author":{"gitId":"dhanish265"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2022-09-26"},{"lineNumber":13,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":14,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":15,"author":{"gitId":"dhanish265"},"content":"     * Constructor that instantiates the {@code ExitCommand} by letting the value of {@code isExit} to be true.","lastModifiedDate":"2022-09-28"},{"lineNumber":16,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":17,"author":{"gitId":"dhanish265"},"content":"    public ExitCommand() {","lastModifiedDate":"2022-09-26"},{"lineNumber":18,"author":{"gitId":"dhanish265"},"content":"        super(true);","lastModifiedDate":"2022-09-26"},{"lineNumber":19,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":20,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":21,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":22,"author":{"gitId":"dhanish265"},"content":"     * This method does nothing in particular as the exiting logic is handled elsewhere in the code.","lastModifiedDate":"2022-09-28"},{"lineNumber":23,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":24,"author":{"gitId":"dhanish265"},"content":"     * @param tasks   - list of {@code Task}s currently in the system","lastModifiedDate":"2022-09-28"},{"lineNumber":25,"author":{"gitId":"dhanish265"},"content":"     * @param ui      - an object that deals with user input and interaction","lastModifiedDate":"2022-09-28"},{"lineNumber":26,"author":{"gitId":"dhanish265"},"content":"     * @param storage - an object that contains the most up-to-date data of the tasks and offers methods for reading and re-writing file data.","lastModifiedDate":"2022-09-28"},{"lineNumber":27,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":28,"author":{"gitId":"dhanish265"},"content":"    @Override","lastModifiedDate":"2022-09-26"},{"lineNumber":29,"author":{"gitId":"dhanish265"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2022-09-26"},{"lineNumber":30,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":31,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":32,"author":{"gitId":"dhanish265"},"content":"}","lastModifiedDate":"2022-09-26"}],"authorContributionMap":{"dhanish265":32}},{"path":"src/main/java/duke/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dhanish265"},"content":"package duke.commands;","lastModifiedDate":"2022-09-26"},{"lineNumber":2,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":3,"author":{"gitId":"dhanish265"},"content":"import duke.Storage;","lastModifiedDate":"2022-09-26"},{"lineNumber":4,"author":{"gitId":"dhanish265"},"content":"import duke.TaskList;","lastModifiedDate":"2022-09-26"},{"lineNumber":5,"author":{"gitId":"dhanish265"},"content":"import duke.Ui;","lastModifiedDate":"2022-09-26"},{"lineNumber":6,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":7,"author":{"gitId":"dhanish265"},"content":"/**","lastModifiedDate":"2022-09-28"},{"lineNumber":8,"author":{"gitId":"dhanish265"},"content":" * This class is a subclass of {@code Command} that provides an implementation for finding all {@code Task}s in the list of {@code Task}s that","lastModifiedDate":"2022-09-28"},{"lineNumber":9,"author":{"gitId":"dhanish265"},"content":" * match a given keyword.","lastModifiedDate":"2022-09-28"},{"lineNumber":10,"author":{"gitId":"dhanish265"},"content":" *","lastModifiedDate":"2022-09-28"},{"lineNumber":11,"author":{"gitId":"dhanish265"},"content":" * @author Dhanish.","lastModifiedDate":"2022-09-28"},{"lineNumber":12,"author":{"gitId":"dhanish265"},"content":" */","lastModifiedDate":"2022-09-28"},{"lineNumber":13,"author":{"gitId":"dhanish265"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2022-09-26"},{"lineNumber":14,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":15,"author":{"gitId":"dhanish265"},"content":"    private String keyword;","lastModifiedDate":"2022-09-26"},{"lineNumber":16,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":17,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":18,"author":{"gitId":"dhanish265"},"content":"     * Constructor that takes in a keyword and initialises the {@code FindCommand} object accordingly.","lastModifiedDate":"2022-09-28"},{"lineNumber":19,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":20,"author":{"gitId":"dhanish265"},"content":"     * @param keyword","lastModifiedDate":"2022-09-28"},{"lineNumber":21,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":22,"author":{"gitId":"dhanish265"},"content":"    public FindCommand(String keyword) {","lastModifiedDate":"2022-09-26"},{"lineNumber":23,"author":{"gitId":"dhanish265"},"content":"        super(false);","lastModifiedDate":"2022-09-26"},{"lineNumber":24,"author":{"gitId":"dhanish265"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2022-09-26"},{"lineNumber":25,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":26,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":27,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":28,"author":{"gitId":"dhanish265"},"content":"     * Method that finds all {@code Task}s that match with the keyword provided during initialisation and presents them for the user\u0027s purview.","lastModifiedDate":"2022-09-28"},{"lineNumber":29,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":30,"author":{"gitId":"dhanish265"},"content":"     * @param tasks   - list of {@code Task}s currently in the system","lastModifiedDate":"2022-09-28"},{"lineNumber":31,"author":{"gitId":"dhanish265"},"content":"     * @param ui      - an object that deals with user input and interaction","lastModifiedDate":"2022-09-28"},{"lineNumber":32,"author":{"gitId":"dhanish265"},"content":"     * @param storage - an object that contains the most up-to-date data of the tasks and offers methods for reading and re-writing file data.","lastModifiedDate":"2022-09-28"},{"lineNumber":33,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":34,"author":{"gitId":"dhanish265"},"content":"    @Override","lastModifiedDate":"2022-09-26"},{"lineNumber":35,"author":{"gitId":"dhanish265"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2022-09-26"},{"lineNumber":36,"author":{"gitId":"dhanish265"},"content":"        ui.printLine();","lastModifiedDate":"2022-09-26"},{"lineNumber":37,"author":{"gitId":"dhanish265"},"content":"        tasks.find(keyword.toLowerCase());","lastModifiedDate":"2022-09-26"},{"lineNumber":38,"author":{"gitId":"dhanish265"},"content":"        ui.printLine();","lastModifiedDate":"2022-09-26"},{"lineNumber":39,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":40,"author":{"gitId":"dhanish265"},"content":"}","lastModifiedDate":"2022-09-26"}],"authorContributionMap":{"dhanish265":40}},{"path":"src/main/java/duke/commands/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dhanish265"},"content":"package duke.commands;","lastModifiedDate":"2022-09-26"},{"lineNumber":2,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":3,"author":{"gitId":"dhanish265"},"content":"import duke.Storage;","lastModifiedDate":"2022-09-26"},{"lineNumber":4,"author":{"gitId":"dhanish265"},"content":"import duke.TaskList;","lastModifiedDate":"2022-09-26"},{"lineNumber":5,"author":{"gitId":"dhanish265"},"content":"import duke.Ui;","lastModifiedDate":"2022-09-26"},{"lineNumber":6,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":7,"author":{"gitId":"dhanish265"},"content":"/**","lastModifiedDate":"2022-09-28"},{"lineNumber":8,"author":{"gitId":"dhanish265"},"content":" * This class is a simple subclass of {@code Command} that assists in the displaying of the various commands to the user.","lastModifiedDate":"2022-09-28"},{"lineNumber":9,"author":{"gitId":"dhanish265"},"content":" *","lastModifiedDate":"2022-09-28"},{"lineNumber":10,"author":{"gitId":"dhanish265"},"content":" * @author Dhanish","lastModifiedDate":"2022-09-28"},{"lineNumber":11,"author":{"gitId":"dhanish265"},"content":" */","lastModifiedDate":"2022-09-28"},{"lineNumber":12,"author":{"gitId":"dhanish265"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2022-09-26"},{"lineNumber":13,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":14,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":15,"author":{"gitId":"dhanish265"},"content":"     * Constructor that instantiates the {@code HelpCommand} by letting the value of {@code isExit} to be false.","lastModifiedDate":"2022-09-28"},{"lineNumber":16,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":17,"author":{"gitId":"dhanish265"},"content":"    public HelpCommand() {","lastModifiedDate":"2022-09-26"},{"lineNumber":18,"author":{"gitId":"dhanish265"},"content":"        super(false);","lastModifiedDate":"2022-09-26"},{"lineNumber":19,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":20,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":21,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":22,"author":{"gitId":"dhanish265"},"content":"     * This method uses the {@code Ui} object to print a help message.","lastModifiedDate":"2022-09-28"},{"lineNumber":23,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":24,"author":{"gitId":"dhanish265"},"content":"     * @param tasks   - list of {@code Task}s currently in the system","lastModifiedDate":"2022-09-28"},{"lineNumber":25,"author":{"gitId":"dhanish265"},"content":"     * @param ui      - an object that deals with user input and interaction","lastModifiedDate":"2022-09-28"},{"lineNumber":26,"author":{"gitId":"dhanish265"},"content":"     * @param storage - an object that contains the most up-to-date data of the tasks and offers methods for reading and re-writing file data.","lastModifiedDate":"2022-09-28"},{"lineNumber":27,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":28,"author":{"gitId":"dhanish265"},"content":"    @Override","lastModifiedDate":"2022-09-26"},{"lineNumber":29,"author":{"gitId":"dhanish265"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2022-09-26"},{"lineNumber":30,"author":{"gitId":"dhanish265"},"content":"        ui.printLine();","lastModifiedDate":"2022-09-26"},{"lineNumber":31,"author":{"gitId":"dhanish265"},"content":"        ui.printHelpMessage();","lastModifiedDate":"2022-09-26"},{"lineNumber":32,"author":{"gitId":"dhanish265"},"content":"        ui.printLine();","lastModifiedDate":"2022-09-26"},{"lineNumber":33,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":34,"author":{"gitId":"dhanish265"},"content":"}","lastModifiedDate":"2022-09-26"}],"authorContributionMap":{"dhanish265":34}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dhanish265"},"content":"package duke.commands;","lastModifiedDate":"2022-09-26"},{"lineNumber":2,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":3,"author":{"gitId":"dhanish265"},"content":"import duke.Storage;","lastModifiedDate":"2022-09-26"},{"lineNumber":4,"author":{"gitId":"dhanish265"},"content":"import duke.TaskList;","lastModifiedDate":"2022-09-26"},{"lineNumber":5,"author":{"gitId":"dhanish265"},"content":"import duke.Ui;","lastModifiedDate":"2022-09-26"},{"lineNumber":6,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":7,"author":{"gitId":"dhanish265"},"content":"/**","lastModifiedDate":"2022-09-28"},{"lineNumber":8,"author":{"gitId":"dhanish265"},"content":" * This class is a subclass of {@Command} that provides an implementation of listing all the current {@code Task}s.","lastModifiedDate":"2022-09-28"},{"lineNumber":9,"author":{"gitId":"dhanish265"},"content":" *","lastModifiedDate":"2022-09-28"},{"lineNumber":10,"author":{"gitId":"dhanish265"},"content":" * @author Dhanish","lastModifiedDate":"2022-09-28"},{"lineNumber":11,"author":{"gitId":"dhanish265"},"content":" */","lastModifiedDate":"2022-09-28"},{"lineNumber":12,"author":{"gitId":"dhanish265"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2022-09-26"},{"lineNumber":13,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":14,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":15,"author":{"gitId":"dhanish265"},"content":"     * Constructor that initialises the {@code ListCommand} object by setting the value of {@code isExit} to be false.","lastModifiedDate":"2022-09-28"},{"lineNumber":16,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":17,"author":{"gitId":"dhanish265"},"content":"    public ListCommand() {","lastModifiedDate":"2022-09-26"},{"lineNumber":18,"author":{"gitId":"dhanish265"},"content":"        super(false);","lastModifiedDate":"2022-09-26"},{"lineNumber":19,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":20,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":21,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":22,"author":{"gitId":"dhanish265"},"content":"     * This method uses the {@code TaskList} object to list all the current {@code Task}s.","lastModifiedDate":"2022-09-28"},{"lineNumber":23,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":24,"author":{"gitId":"dhanish265"},"content":"     * @param tasks   - list of {@code Task}s currently in the system","lastModifiedDate":"2022-09-28"},{"lineNumber":25,"author":{"gitId":"dhanish265"},"content":"     * @param ui      - an object that deals with user input and interaction","lastModifiedDate":"2022-09-28"},{"lineNumber":26,"author":{"gitId":"dhanish265"},"content":"     * @param storage - an object that contains the most up-to-date data of the tasks and offers methods for reading and re-writing file data.","lastModifiedDate":"2022-09-28"},{"lineNumber":27,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":28,"author":{"gitId":"dhanish265"},"content":"    @Override","lastModifiedDate":"2022-09-26"},{"lineNumber":29,"author":{"gitId":"dhanish265"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2022-09-26"},{"lineNumber":30,"author":{"gitId":"dhanish265"},"content":"        ui.printLine();","lastModifiedDate":"2022-09-26"},{"lineNumber":31,"author":{"gitId":"dhanish265"},"content":"        tasks.listTasks();","lastModifiedDate":"2022-09-26"},{"lineNumber":32,"author":{"gitId":"dhanish265"},"content":"        ui.printLine();","lastModifiedDate":"2022-09-26"},{"lineNumber":33,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":34,"author":{"gitId":"dhanish265"},"content":"}","lastModifiedDate":"2022-09-26"}],"authorContributionMap":{"dhanish265":34}},{"path":"src/main/java/duke/commands/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dhanish265"},"content":"package duke.commands;","lastModifiedDate":"2022-09-26"},{"lineNumber":2,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":3,"author":{"gitId":"dhanish265"},"content":"import duke.Storage;","lastModifiedDate":"2022-09-26"},{"lineNumber":4,"author":{"gitId":"dhanish265"},"content":"import duke.TaskList;","lastModifiedDate":"2022-09-26"},{"lineNumber":5,"author":{"gitId":"dhanish265"},"content":"import duke.Ui;","lastModifiedDate":"2022-09-26"},{"lineNumber":6,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":7,"author":{"gitId":"dhanish265"},"content":"/**","lastModifiedDate":"2022-09-28"},{"lineNumber":8,"author":{"gitId":"dhanish265"},"content":" * This class is a subclass of {@code Command} that provides an implementation for marking a specific {@code Task} as done","lastModifiedDate":"2022-09-28"},{"lineNumber":9,"author":{"gitId":"dhanish265"},"content":" * in the list of {@code Task}s.","lastModifiedDate":"2022-09-28"},{"lineNumber":10,"author":{"gitId":"dhanish265"},"content":" *","lastModifiedDate":"2022-09-28"},{"lineNumber":11,"author":{"gitId":"dhanish265"},"content":" * @author Dhanish","lastModifiedDate":"2022-09-28"},{"lineNumber":12,"author":{"gitId":"dhanish265"},"content":" */","lastModifiedDate":"2022-09-28"},{"lineNumber":13,"author":{"gitId":"dhanish265"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2022-09-26"},{"lineNumber":14,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":15,"author":{"gitId":"dhanish265"},"content":"    private final int taskNumber;","lastModifiedDate":"2022-09-28"},{"lineNumber":16,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":17,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":18,"author":{"gitId":"dhanish265"},"content":"     * Constructor that takes in the number of the {@code Task} to be marked as done","lastModifiedDate":"2022-09-28"},{"lineNumber":19,"author":{"gitId":"dhanish265"},"content":"     * and instantiates the {@code MarkCommand} object accordingly.","lastModifiedDate":"2022-09-28"},{"lineNumber":20,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":21,"author":{"gitId":"dhanish265"},"content":"     * @param taskNumber - the number of the {@code Task} to be marked as done.","lastModifiedDate":"2022-09-28"},{"lineNumber":22,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":23,"author":{"gitId":"dhanish265"},"content":"    public MarkCommand(int taskNumber) {","lastModifiedDate":"2022-09-26"},{"lineNumber":24,"author":{"gitId":"dhanish265"},"content":"        super(false);","lastModifiedDate":"2022-09-26"},{"lineNumber":25,"author":{"gitId":"dhanish265"},"content":"        this.taskNumber \u003d taskNumber;","lastModifiedDate":"2022-09-26"},{"lineNumber":26,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":27,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":28,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":29,"author":{"gitId":"dhanish265"},"content":"     * This method marks the {@code Task} corresponding to the input number as done, if possible, and saves the data accordingly.","lastModifiedDate":"2022-09-28"},{"lineNumber":30,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":31,"author":{"gitId":"dhanish265"},"content":"     * @param tasks   - list of {@code Task}s currently in the system","lastModifiedDate":"2022-09-28"},{"lineNumber":32,"author":{"gitId":"dhanish265"},"content":"     * @param ui      - an object that deals with user input and interaction","lastModifiedDate":"2022-09-28"},{"lineNumber":33,"author":{"gitId":"dhanish265"},"content":"     * @param storage - an object that contains the most up-to-date data of the tasks and offers methods for reading and re-writing file data.","lastModifiedDate":"2022-09-28"},{"lineNumber":34,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":35,"author":{"gitId":"dhanish265"},"content":"    @Override","lastModifiedDate":"2022-09-26"},{"lineNumber":36,"author":{"gitId":"dhanish265"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2022-09-26"},{"lineNumber":37,"author":{"gitId":"dhanish265"},"content":"        ui.printLine();","lastModifiedDate":"2022-09-26"},{"lineNumber":38,"author":{"gitId":"dhanish265"},"content":"        tasks.markTaskAsDone(taskNumber);","lastModifiedDate":"2022-09-26"},{"lineNumber":39,"author":{"gitId":"dhanish265"},"content":"        storage.saveData(tasks);","lastModifiedDate":"2022-09-26"},{"lineNumber":40,"author":{"gitId":"dhanish265"},"content":"        ui.printLine();","lastModifiedDate":"2022-09-26"},{"lineNumber":41,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":42,"author":{"gitId":"dhanish265"},"content":"}","lastModifiedDate":"2022-09-26"}],"authorContributionMap":{"dhanish265":42}},{"path":"src/main/java/duke/commands/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dhanish265"},"content":"package duke.commands;","lastModifiedDate":"2022-09-26"},{"lineNumber":2,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":3,"author":{"gitId":"dhanish265"},"content":"import duke.Storage;","lastModifiedDate":"2022-09-26"},{"lineNumber":4,"author":{"gitId":"dhanish265"},"content":"import duke.TaskList;","lastModifiedDate":"2022-09-26"},{"lineNumber":5,"author":{"gitId":"dhanish265"},"content":"import duke.Ui;","lastModifiedDate":"2022-09-26"},{"lineNumber":6,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":7,"author":{"gitId":"dhanish265"},"content":"/**","lastModifiedDate":"2022-09-28"},{"lineNumber":8,"author":{"gitId":"dhanish265"},"content":" * This class is a subclass of {@code Command} that provides an implementation for marking a specific {@code Task} as not done","lastModifiedDate":"2022-09-28"},{"lineNumber":9,"author":{"gitId":"dhanish265"},"content":" * in the list of {@code Task}s.","lastModifiedDate":"2022-09-28"},{"lineNumber":10,"author":{"gitId":"dhanish265"},"content":" *","lastModifiedDate":"2022-09-28"},{"lineNumber":11,"author":{"gitId":"dhanish265"},"content":" * @author Dhanish","lastModifiedDate":"2022-09-28"},{"lineNumber":12,"author":{"gitId":"dhanish265"},"content":" */","lastModifiedDate":"2022-09-28"},{"lineNumber":13,"author":{"gitId":"dhanish265"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2022-09-26"},{"lineNumber":14,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":15,"author":{"gitId":"dhanish265"},"content":"    private final int taskNumber;","lastModifiedDate":"2022-09-28"},{"lineNumber":16,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":17,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":18,"author":{"gitId":"dhanish265"},"content":"     * Constructor that takes in the number of the {@code Task} to be marked as not done","lastModifiedDate":"2022-09-28"},{"lineNumber":19,"author":{"gitId":"dhanish265"},"content":"     * and instantiates the {@code MarkCommand} object accordingly.","lastModifiedDate":"2022-09-28"},{"lineNumber":20,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":21,"author":{"gitId":"dhanish265"},"content":"     * @param taskNumber - the number of the {@code Task} to be marked as not done.","lastModifiedDate":"2022-09-28"},{"lineNumber":22,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":23,"author":{"gitId":"dhanish265"},"content":"    public UnmarkCommand(int taskNumber) {","lastModifiedDate":"2022-09-26"},{"lineNumber":24,"author":{"gitId":"dhanish265"},"content":"        super(false);","lastModifiedDate":"2022-09-26"},{"lineNumber":25,"author":{"gitId":"dhanish265"},"content":"        this.taskNumber \u003d taskNumber;","lastModifiedDate":"2022-09-26"},{"lineNumber":26,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":27,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":28,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":29,"author":{"gitId":"dhanish265"},"content":"     * This method marks the {@code Task} corresponding to the input number as not done, if possible, and saves the data accordingly.","lastModifiedDate":"2022-09-28"},{"lineNumber":30,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":31,"author":{"gitId":"dhanish265"},"content":"     * @param tasks   - list of {@code Task}s currently in the system","lastModifiedDate":"2022-09-28"},{"lineNumber":32,"author":{"gitId":"dhanish265"},"content":"     * @param ui      - an object that deals with user input and interaction","lastModifiedDate":"2022-09-28"},{"lineNumber":33,"author":{"gitId":"dhanish265"},"content":"     * @param storage - an object that contains the most up-to-date data of the tasks and offers methods for reading and re-writing file data.","lastModifiedDate":"2022-09-28"},{"lineNumber":34,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":35,"author":{"gitId":"dhanish265"},"content":"    @Override","lastModifiedDate":"2022-09-26"},{"lineNumber":36,"author":{"gitId":"dhanish265"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2022-09-26"},{"lineNumber":37,"author":{"gitId":"dhanish265"},"content":"        ui.printLine();","lastModifiedDate":"2022-09-26"},{"lineNumber":38,"author":{"gitId":"dhanish265"},"content":"        tasks.markTaskAsUndone(taskNumber);","lastModifiedDate":"2022-09-26"},{"lineNumber":39,"author":{"gitId":"dhanish265"},"content":"        storage.saveData(tasks);","lastModifiedDate":"2022-09-26"},{"lineNumber":40,"author":{"gitId":"dhanish265"},"content":"        ui.printLine();","lastModifiedDate":"2022-09-26"},{"lineNumber":41,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-26"},{"lineNumber":42,"author":{"gitId":"dhanish265"},"content":"}","lastModifiedDate":"2022-09-26"}],"authorContributionMap":{"dhanish265":42}},{"path":"src/main/java/duke/data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"dhanish265"},"content":"T | X | read book","lastModifiedDate":"2022-09-12"},{"lineNumber":2,"author":{"gitId":"dhanish265"},"content":"D |   | return book | 2022-06-12 12:00","lastModifiedDate":"2022-09-26"},{"lineNumber":3,"author":{"gitId":"dhanish265"},"content":"E |   | project meeting | 2022-08-22 18:00","lastModifiedDate":"2022-09-26"},{"lineNumber":4,"author":{"gitId":"dhanish265"},"content":"T | X | join sports club","lastModifiedDate":"2022-09-12"}],"authorContributionMap":{"dhanish265":4}},{"path":"src/main/java/duke/exceptions/IncorrectFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dhanish265"},"content":"package duke.exceptions;","lastModifiedDate":"2022-09-06"},{"lineNumber":2,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-06"},{"lineNumber":3,"author":{"gitId":"dhanish265"},"content":"public class IncorrectFormatException extends Exception {","lastModifiedDate":"2022-09-06"},{"lineNumber":4,"author":{"gitId":"dhanish265"},"content":"    public IncorrectFormatException(String message) {","lastModifiedDate":"2022-09-06"},{"lineNumber":5,"author":{"gitId":"dhanish265"},"content":"        super(message);","lastModifiedDate":"2022-09-06"},{"lineNumber":6,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-06"},{"lineNumber":7,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-06"},{"lineNumber":8,"author":{"gitId":"dhanish265"},"content":"}","lastModifiedDate":"2022-09-06"}],"authorContributionMap":{"dhanish265":8}},{"path":"src/main/java/duke/exceptions/UnrecognizedCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dhanish265"},"content":"package duke.exceptions;","lastModifiedDate":"2022-09-06"},{"lineNumber":2,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-06"},{"lineNumber":3,"author":{"gitId":"dhanish265"},"content":"public class UnrecognizedCommandException extends Exception {","lastModifiedDate":"2022-09-04"},{"lineNumber":4,"author":{"gitId":"dhanish265"},"content":"    private final String errorMessage \u003d \"That command is unrecognized! Please enter a valid command or \u0027help\u0027 for a list of valid commands!\";","lastModifiedDate":"2022-09-04"},{"lineNumber":5,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-04"},{"lineNumber":6,"author":{"gitId":"dhanish265"},"content":"    @Override","lastModifiedDate":"2022-09-04"},{"lineNumber":7,"author":{"gitId":"dhanish265"},"content":"    public String getMessage() {","lastModifiedDate":"2022-09-04"},{"lineNumber":8,"author":{"gitId":"dhanish265"},"content":"        return errorMessage;","lastModifiedDate":"2022-09-04"},{"lineNumber":9,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-04"},{"lineNumber":10,"author":{"gitId":"dhanish265"},"content":"}","lastModifiedDate":"2022-09-04"}],"authorContributionMap":{"dhanish265":10}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dhanish265"},"content":"package duke.tasks;","lastModifiedDate":"2022-09-06"},{"lineNumber":2,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-06"},{"lineNumber":3,"author":{"gitId":"dhanish265"},"content":"import duke.Parser;","lastModifiedDate":"2022-09-26"},{"lineNumber":4,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":5,"author":{"gitId":"dhanish265"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-09-26"},{"lineNumber":6,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-12"},{"lineNumber":7,"author":{"gitId":"dhanish265"},"content":"/**","lastModifiedDate":"2022-09-28"},{"lineNumber":8,"author":{"gitId":"dhanish265"},"content":" * This class is a specific type of {@code Task}s that have a deadline.","lastModifiedDate":"2022-09-28"},{"lineNumber":9,"author":{"gitId":"dhanish265"},"content":" *","lastModifiedDate":"2022-09-28"},{"lineNumber":10,"author":{"gitId":"dhanish265"},"content":" * @author Dhanish","lastModifiedDate":"2022-09-28"},{"lineNumber":11,"author":{"gitId":"dhanish265"},"content":" */","lastModifiedDate":"2022-09-28"},{"lineNumber":12,"author":{"gitId":"dhanish265"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-08-28"},{"lineNumber":13,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-26"},{"lineNumber":14,"author":{"gitId":"dhanish265"},"content":"    private LocalDateTime by;","lastModifiedDate":"2022-09-26"},{"lineNumber":15,"author":{"gitId":"dhanish265"},"content":"    public static final String TASK_TYPE \u003d \"D\";","lastModifiedDate":"2022-09-12"},{"lineNumber":16,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-12"},{"lineNumber":17,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":18,"author":{"gitId":"dhanish265"},"content":"     * @return the time this {@code Deadline} is due by.","lastModifiedDate":"2022-09-28"},{"lineNumber":19,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":20,"author":{"gitId":"dhanish265"},"content":"    public String getDeadline(String format) {","lastModifiedDate":"2022-09-26"},{"lineNumber":21,"author":{"gitId":"dhanish265"},"content":"        return Parser.getFormattedTime(by, format);","lastModifiedDate":"2022-09-26"},{"lineNumber":22,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-12"},{"lineNumber":23,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-12"},{"lineNumber":24,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":25,"author":{"gitId":"dhanish265"},"content":"     * Constructor that initialises the {@code Deadline} based on its description and when it is due.","lastModifiedDate":"2022-09-28"},{"lineNumber":26,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":27,"author":{"gitId":"dhanish265"},"content":"     * @param description - a literal that describes the {@code Deadline}","lastModifiedDate":"2022-09-28"},{"lineNumber":28,"author":{"gitId":"dhanish265"},"content":"     * @param by          - the time by which this {@code Deadline} is due.","lastModifiedDate":"2022-09-28"},{"lineNumber":29,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":30,"author":{"gitId":"dhanish265"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2022-08-28"},{"lineNumber":31,"author":{"gitId":"dhanish265"},"content":"        super(description);","lastModifiedDate":"2022-08-28"},{"lineNumber":32,"author":{"gitId":"dhanish265"},"content":"        this.by \u003d Parser.parseDateTime(by);","lastModifiedDate":"2022-09-26"},{"lineNumber":33,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-08-28"},{"lineNumber":34,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":35,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":36,"author":{"gitId":"dhanish265"},"content":"     * @return - a textual representation of this {@code Deadline}","lastModifiedDate":"2022-09-28"},{"lineNumber":37,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":38,"author":{"gitId":"dhanish265"},"content":"    @Override","lastModifiedDate":"2022-08-28"},{"lineNumber":39,"author":{"gitId":"dhanish265"},"content":"    public String toString() {","lastModifiedDate":"2022-08-28"},{"lineNumber":40,"author":{"gitId":"dhanish265"},"content":"        return \"[\" + getTaskType() + \"]\" + super.toString() + \" (by: \" + getDeadline(Parser.PRINT_TIME_FORMAT) + \")\";","lastModifiedDate":"2022-09-26"},{"lineNumber":41,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-12"},{"lineNumber":42,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-12"},{"lineNumber":43,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":44,"author":{"gitId":"dhanish265"},"content":"     * @return a {@code String} constant that denotes the type of {@code Task} this {@code Deadline} is.","lastModifiedDate":"2022-09-28"},{"lineNumber":45,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":46,"author":{"gitId":"dhanish265"},"content":"    public String getTaskType() {","lastModifiedDate":"2022-09-12"},{"lineNumber":47,"author":{"gitId":"dhanish265"},"content":"        return TASK_TYPE;","lastModifiedDate":"2022-09-12"},{"lineNumber":48,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-08-28"},{"lineNumber":49,"author":{"gitId":"dhanish265"},"content":"}","lastModifiedDate":"2022-08-28"}],"authorContributionMap":{"dhanish265":49}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dhanish265"},"content":"package duke.tasks;","lastModifiedDate":"2022-09-06"},{"lineNumber":2,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-06"},{"lineNumber":3,"author":{"gitId":"dhanish265"},"content":"import duke.Parser;","lastModifiedDate":"2022-09-26"},{"lineNumber":4,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":5,"author":{"gitId":"dhanish265"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-09-26"},{"lineNumber":6,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-12"},{"lineNumber":7,"author":{"gitId":"dhanish265"},"content":"/**","lastModifiedDate":"2022-09-28"},{"lineNumber":8,"author":{"gitId":"dhanish265"},"content":" * This class is a specific type of {@code Task} that allows users to store events that are happening at a specific time","lastModifiedDate":"2022-09-28"},{"lineNumber":9,"author":{"gitId":"dhanish265"},"content":" *","lastModifiedDate":"2022-09-28"},{"lineNumber":10,"author":{"gitId":"dhanish265"},"content":" * @author Dhanish","lastModifiedDate":"2022-09-28"},{"lineNumber":11,"author":{"gitId":"dhanish265"},"content":" */","lastModifiedDate":"2022-09-28"},{"lineNumber":12,"author":{"gitId":"dhanish265"},"content":"public class Event extends Task {","lastModifiedDate":"2022-08-28"},{"lineNumber":13,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":14,"author":{"gitId":"dhanish265"},"content":"    private LocalDateTime at;","lastModifiedDate":"2022-09-26"},{"lineNumber":15,"author":{"gitId":"dhanish265"},"content":"    public static final String TASK_TYPE \u003d \"E\";","lastModifiedDate":"2022-09-12"},{"lineNumber":16,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-12"},{"lineNumber":17,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":18,"author":{"gitId":"dhanish265"},"content":"     * @return the time the {@code Event} is scheduled at.","lastModifiedDate":"2022-09-28"},{"lineNumber":19,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":20,"author":{"gitId":"dhanish265"},"content":"    public String getTime(String format) {","lastModifiedDate":"2022-09-26"},{"lineNumber":21,"author":{"gitId":"dhanish265"},"content":"        return Parser.getFormattedTime(at, format);","lastModifiedDate":"2022-09-26"},{"lineNumber":22,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-12"},{"lineNumber":23,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-12"},{"lineNumber":24,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-12"},{"lineNumber":25,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":26,"author":{"gitId":"dhanish265"},"content":"     * Constructor that initialises the {@code Event} based on its description and the time it is happening","lastModifiedDate":"2022-09-28"},{"lineNumber":27,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":28,"author":{"gitId":"dhanish265"},"content":"     * @param description - a literal that describes the {@code Event}","lastModifiedDate":"2022-09-28"},{"lineNumber":29,"author":{"gitId":"dhanish265"},"content":"     * @param at          - the time the {@code Event} is scheduled to take place","lastModifiedDate":"2022-09-28"},{"lineNumber":30,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":31,"author":{"gitId":"dhanish265"},"content":"    public Event(String description, String at) {","lastModifiedDate":"2022-08-28"},{"lineNumber":32,"author":{"gitId":"dhanish265"},"content":"        super(description);","lastModifiedDate":"2022-08-28"},{"lineNumber":33,"author":{"gitId":"dhanish265"},"content":"        this.at \u003d Parser.parseDateTime(at);","lastModifiedDate":"2022-09-26"},{"lineNumber":34,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-08-28"},{"lineNumber":35,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":36,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":37,"author":{"gitId":"dhanish265"},"content":"     * @return - a textual representation of the {@code Event}","lastModifiedDate":"2022-09-28"},{"lineNumber":38,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":39,"author":{"gitId":"dhanish265"},"content":"    public String toString() {","lastModifiedDate":"2022-08-28"},{"lineNumber":40,"author":{"gitId":"dhanish265"},"content":"        return \"[\" + getTaskType() + \"]\" + super.toString() + \" (at: \" + getTime(Parser.PRINT_TIME_FORMAT) + \")\";","lastModifiedDate":"2022-09-26"},{"lineNumber":41,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-12"},{"lineNumber":42,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-12"},{"lineNumber":43,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":44,"author":{"gitId":"dhanish265"},"content":"     * @return - a {@code String} constant that denotes the type of {@code Task} this {@code Event} is.","lastModifiedDate":"2022-09-28"},{"lineNumber":45,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":46,"author":{"gitId":"dhanish265"},"content":"    public String getTaskType() {","lastModifiedDate":"2022-09-12"},{"lineNumber":47,"author":{"gitId":"dhanish265"},"content":"        return TASK_TYPE;","lastModifiedDate":"2022-09-12"},{"lineNumber":48,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-08-28"},{"lineNumber":49,"author":{"gitId":"dhanish265"},"content":"}","lastModifiedDate":"2022-08-28"}],"authorContributionMap":{"dhanish265":49}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dhanish265"},"content":"package duke.tasks;","lastModifiedDate":"2022-09-06"},{"lineNumber":2,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-06"},{"lineNumber":3,"author":{"gitId":"dhanish265"},"content":"/**","lastModifiedDate":"2022-09-28"},{"lineNumber":4,"author":{"gitId":"dhanish265"},"content":" * This abstract class provides the template to create specialised {@code Task}s.","lastModifiedDate":"2022-09-28"},{"lineNumber":5,"author":{"gitId":"dhanish265"},"content":" *","lastModifiedDate":"2022-09-28"},{"lineNumber":6,"author":{"gitId":"dhanish265"},"content":" * @author Dhanish.","lastModifiedDate":"2022-09-28"},{"lineNumber":7,"author":{"gitId":"dhanish265"},"content":" */","lastModifiedDate":"2022-09-28"},{"lineNumber":8,"author":{"gitId":"dhanish265"},"content":"public abstract class Task {","lastModifiedDate":"2022-09-26"},{"lineNumber":9,"author":{"gitId":"dhanish265"},"content":"    private final String description;","lastModifiedDate":"2022-09-28"},{"lineNumber":10,"author":{"gitId":"dhanish265"},"content":"    private boolean isDone;","lastModifiedDate":"2022-09-28"},{"lineNumber":11,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-08-20"},{"lineNumber":12,"author":{"gitId":"dhanish265"},"content":"    private static final String DONE_ICON \u003d \"X\";","lastModifiedDate":"2022-09-06"},{"lineNumber":13,"author":{"gitId":"dhanish265"},"content":"    private static final String NOT_DONE_ICON \u003d \" \";","lastModifiedDate":"2022-09-06"},{"lineNumber":14,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-06"},{"lineNumber":15,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":16,"author":{"gitId":"dhanish265"},"content":"     * @return - the icon that indicates a task is done.","lastModifiedDate":"2022-09-28"},{"lineNumber":17,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":18,"author":{"gitId":"dhanish265"},"content":"    public static String getDoneIcon() {","lastModifiedDate":"2022-09-12"},{"lineNumber":19,"author":{"gitId":"dhanish265"},"content":"        return DONE_ICON;","lastModifiedDate":"2022-09-12"},{"lineNumber":20,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-12"},{"lineNumber":21,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-12"},{"lineNumber":22,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":23,"author":{"gitId":"dhanish265"},"content":"     * @return - the icon that indicates a task is yet to be done.","lastModifiedDate":"2022-09-28"},{"lineNumber":24,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":25,"author":{"gitId":"dhanish265"},"content":"    public static String getNotDoneIcon() {","lastModifiedDate":"2022-09-12"},{"lineNumber":26,"author":{"gitId":"dhanish265"},"content":"        return NOT_DONE_ICON;","lastModifiedDate":"2022-09-12"},{"lineNumber":27,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-12"},{"lineNumber":28,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-12"},{"lineNumber":29,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":30,"author":{"gitId":"dhanish265"},"content":"     * Constructor that initialises the {@code Task} with just a description of what the {@code Task} is","lastModifiedDate":"2022-09-28"},{"lineNumber":31,"author":{"gitId":"dhanish265"},"content":"     * Sets its completion status to not done.","lastModifiedDate":"2022-09-28"},{"lineNumber":32,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":33,"author":{"gitId":"dhanish265"},"content":"     * @param description - describes what the task is.","lastModifiedDate":"2022-09-28"},{"lineNumber":34,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":35,"author":{"gitId":"dhanish265"},"content":"    public Task(String description) {","lastModifiedDate":"2022-08-20"},{"lineNumber":36,"author":{"gitId":"dhanish265"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-08-20"},{"lineNumber":37,"author":{"gitId":"dhanish265"},"content":"        isDone \u003d false;","lastModifiedDate":"2022-08-20"},{"lineNumber":38,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-08-20"},{"lineNumber":39,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-08-20"},{"lineNumber":40,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":41,"author":{"gitId":"dhanish265"},"content":"     * @return the icon that corresponds to the completion status of the {@code Task}.","lastModifiedDate":"2022-09-28"},{"lineNumber":42,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":43,"author":{"gitId":"dhanish265"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2022-08-20"},{"lineNumber":44,"author":{"gitId":"dhanish265"},"content":"        return isDone ? DONE_ICON : NOT_DONE_ICON;","lastModifiedDate":"2022-09-06"},{"lineNumber":45,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-08-20"},{"lineNumber":46,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-08-20"},{"lineNumber":47,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":48,"author":{"gitId":"dhanish265"},"content":"     * Marks a {@code Task} as done.","lastModifiedDate":"2022-09-28"},{"lineNumber":49,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":50,"author":{"gitId":"dhanish265"},"content":"    public void markAsDone() {","lastModifiedDate":"2022-08-20"},{"lineNumber":51,"author":{"gitId":"dhanish265"},"content":"        isDone \u003d true;","lastModifiedDate":"2022-08-20"},{"lineNumber":52,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-08-20"},{"lineNumber":53,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-08-20"},{"lineNumber":54,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":55,"author":{"gitId":"dhanish265"},"content":"     * Marks a {@code Task} as not done.","lastModifiedDate":"2022-09-28"},{"lineNumber":56,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":57,"author":{"gitId":"dhanish265"},"content":"    public void markAsUndone() {","lastModifiedDate":"2022-08-20"},{"lineNumber":58,"author":{"gitId":"dhanish265"},"content":"        isDone \u003d false;","lastModifiedDate":"2022-08-20"},{"lineNumber":59,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-08-20"},{"lineNumber":60,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-08-20"},{"lineNumber":61,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":62,"author":{"gitId":"dhanish265"},"content":"     * @return - the description of the {@code Task}.","lastModifiedDate":"2022-09-28"},{"lineNumber":63,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":64,"author":{"gitId":"dhanish265"},"content":"    public String getDescription() {","lastModifiedDate":"2022-08-20"},{"lineNumber":65,"author":{"gitId":"dhanish265"},"content":"        return description;","lastModifiedDate":"2022-08-20"},{"lineNumber":66,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-08-20"},{"lineNumber":67,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-08-20"},{"lineNumber":68,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":69,"author":{"gitId":"dhanish265"},"content":"     * @return - the completion status of the {@code Task}.","lastModifiedDate":"2022-09-28"},{"lineNumber":70,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":71,"author":{"gitId":"dhanish265"},"content":"    public boolean isDone() {","lastModifiedDate":"2022-08-20"},{"lineNumber":72,"author":{"gitId":"dhanish265"},"content":"        return isDone;","lastModifiedDate":"2022-08-20"},{"lineNumber":73,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-08-20"},{"lineNumber":74,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-08-20"},{"lineNumber":75,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":76,"author":{"gitId":"dhanish265"},"content":"     * @return - a textual representation of the details of the {@code Task}.","lastModifiedDate":"2022-09-28"},{"lineNumber":77,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":78,"author":{"gitId":"dhanish265"},"content":"    @Override","lastModifiedDate":"2022-08-20"},{"lineNumber":79,"author":{"gitId":"dhanish265"},"content":"    public String toString() {","lastModifiedDate":"2022-08-20"},{"lineNumber":80,"author":{"gitId":"dhanish265"},"content":"        return \"[\" + getStatusIcon() + \"] \" + getDescription();","lastModifiedDate":"2022-08-20"},{"lineNumber":81,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-08-20"},{"lineNumber":82,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":83,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":84,"author":{"gitId":"dhanish265"},"content":"     * This abstract method forces any type of Task to be able to return a symbol that corresponds to its {@code Task} type.","lastModifiedDate":"2022-09-28"},{"lineNumber":85,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":86,"author":{"gitId":"dhanish265"},"content":"     * @return the type of {@code Task}.","lastModifiedDate":"2022-09-28"},{"lineNumber":87,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":88,"author":{"gitId":"dhanish265"},"content":"    public abstract String getTaskType();","lastModifiedDate":"2022-09-26"},{"lineNumber":89,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-12"},{"lineNumber":90,"author":{"gitId":"dhanish265"},"content":"}","lastModifiedDate":"2022-08-20"}],"authorContributionMap":{"dhanish265":90}},{"path":"src/main/java/duke/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dhanish265"},"content":"package duke.tasks;","lastModifiedDate":"2022-09-06"},{"lineNumber":2,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-06"},{"lineNumber":3,"author":{"gitId":"dhanish265"},"content":"/**","lastModifiedDate":"2022-09-28"},{"lineNumber":4,"author":{"gitId":"dhanish265"},"content":" * This class represents the most generic type of {@code Task} that can be instantiated, one with no times or deadlines.","lastModifiedDate":"2022-09-28"},{"lineNumber":5,"author":{"gitId":"dhanish265"},"content":" *","lastModifiedDate":"2022-09-28"},{"lineNumber":6,"author":{"gitId":"dhanish265"},"content":" * @author Dhanish","lastModifiedDate":"2022-09-28"},{"lineNumber":7,"author":{"gitId":"dhanish265"},"content":" */","lastModifiedDate":"2022-09-28"},{"lineNumber":8,"author":{"gitId":"dhanish265"},"content":"public class Todo extends Task {","lastModifiedDate":"2022-08-28"},{"lineNumber":9,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-12"},{"lineNumber":10,"author":{"gitId":"dhanish265"},"content":"    public static final String TASK_TYPE \u003d \"T\";","lastModifiedDate":"2022-09-12"},{"lineNumber":11,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-12"},{"lineNumber":12,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":13,"author":{"gitId":"dhanish265"},"content":"     * Constructor that initialises this {@code Todo} based off the input description","lastModifiedDate":"2022-09-28"},{"lineNumber":14,"author":{"gitId":"dhanish265"},"content":"     *","lastModifiedDate":"2022-09-28"},{"lineNumber":15,"author":{"gitId":"dhanish265"},"content":"     * @param description - a literal that describes the {@code Todo}","lastModifiedDate":"2022-09-28"},{"lineNumber":16,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":17,"author":{"gitId":"dhanish265"},"content":"    public Todo(String description) {","lastModifiedDate":"2022-08-28"},{"lineNumber":18,"author":{"gitId":"dhanish265"},"content":"        super(description);","lastModifiedDate":"2022-08-28"},{"lineNumber":19,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-08-28"},{"lineNumber":20,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-08-28"},{"lineNumber":21,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":22,"author":{"gitId":"dhanish265"},"content":"     * @return - a textual representation of what this {@code Todo} is.","lastModifiedDate":"2022-09-28"},{"lineNumber":23,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":24,"author":{"gitId":"dhanish265"},"content":"    @Override","lastModifiedDate":"2022-08-28"},{"lineNumber":25,"author":{"gitId":"dhanish265"},"content":"    public String toString() {","lastModifiedDate":"2022-08-28"},{"lineNumber":26,"author":{"gitId":"dhanish265"},"content":"        return \"[\" + getTaskType() + \"]\" + super.toString();","lastModifiedDate":"2022-09-12"},{"lineNumber":27,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-09-12"},{"lineNumber":28,"author":{"gitId":"dhanish265"},"content":"","lastModifiedDate":"2022-09-12"},{"lineNumber":29,"author":{"gitId":"dhanish265"},"content":"    /**","lastModifiedDate":"2022-09-28"},{"lineNumber":30,"author":{"gitId":"dhanish265"},"content":"     * @return - a {@code String} constant that describes the type of {@code Task} this {@code Todo} is.","lastModifiedDate":"2022-09-28"},{"lineNumber":31,"author":{"gitId":"dhanish265"},"content":"     */","lastModifiedDate":"2022-09-28"},{"lineNumber":32,"author":{"gitId":"dhanish265"},"content":"    public String getTaskType() {","lastModifiedDate":"2022-09-12"},{"lineNumber":33,"author":{"gitId":"dhanish265"},"content":"        return TASK_TYPE;","lastModifiedDate":"2022-09-12"},{"lineNumber":34,"author":{"gitId":"dhanish265"},"content":"    }","lastModifiedDate":"2022-08-28"},{"lineNumber":35,"author":{"gitId":"dhanish265"},"content":"}","lastModifiedDate":"2022-08-28"}],"authorContributionMap":{"dhanish265":35}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"dhanish265"},"content":"help","lastModifiedDate":"2022-09-11"},{"lineNumber":2,"author":{"gitId":"dhanish265"},"content":"list","lastModifiedDate":"2022-08-29"},{"lineNumber":3,"author":{"gitId":"dhanish265"},"content":"find book","lastModifiedDate":"2022-09-28"},{"lineNumber":4,"author":{"gitId":"dhanish265"},"content":"mark -1","lastModifiedDate":"2022-08-29"},{"lineNumber":5,"author":{"gitId":"dhanish265"},"content":"mark 2","lastModifiedDate":"2022-08-29"},{"lineNumber":6,"author":{"gitId":"dhanish265"},"content":"deadline finish assignment /by 2023-19-31 10:00","lastModifiedDate":"2022-09-28"},{"lineNumber":7,"author":{"gitId":"dhanish265"},"content":"deadline finish assignment /by 2023-01-31","lastModifiedDate":"2022-09-28"},{"lineNumber":8,"author":{"gitId":"dhanish265"},"content":"deadline finish BOOK /by 2022-10-15 10:00","lastModifiedDate":"2022-09-28"},{"lineNumber":9,"author":{"gitId":"dhanish265"},"content":"mark 5","lastModifiedDate":"2022-09-12"},{"lineNumber":10,"author":{"gitId":"dhanish265"},"content":"list","lastModifiedDate":"2022-08-29"},{"lineNumber":11,"author":{"gitId":"dhanish265"},"content":"find book","lastModifiedDate":"2022-09-28"},{"lineNumber":12,"author":{"gitId":"dhanish265"},"content":"unmark 2","lastModifiedDate":"2022-09-12"},{"lineNumber":13,"author":{"gitId":"dhanish265"},"content":"mark 6","lastModifiedDate":"2022-09-12"},{"lineNumber":14,"author":{"gitId":"dhanish265"},"content":"event soccer match /at 2022-11-11 11:11","lastModifiedDate":"2022-09-28"},{"lineNumber":15,"author":{"gitId":"dhanish265"},"content":"mark 6","lastModifiedDate":"2022-09-12"},{"lineNumber":16,"author":{"gitId":"dhanish265"},"content":"unmark 2","lastModifiedDate":"2022-08-29"},{"lineNumber":17,"author":{"gitId":"dhanish265"},"content":"list","lastModifiedDate":"2022-08-29"},{"lineNumber":18,"author":{"gitId":"dhanish265"},"content":"deadline","lastModifiedDate":"2022-09-06"},{"lineNumber":19,"author":{"gitId":"dhanish265"},"content":"event","lastModifiedDate":"2022-09-06"},{"lineNumber":20,"author":{"gitId":"dhanish265"},"content":"todo","lastModifiedDate":"2022-09-06"},{"lineNumber":21,"author":{"gitId":"dhanish265"},"content":"abc","lastModifiedDate":"2022-09-06"},{"lineNumber":22,"author":{"gitId":"dhanish265"},"content":"mark abc","lastModifiedDate":"2022-09-06"},{"lineNumber":23,"author":{"gitId":"dhanish265"},"content":"deadline /by","lastModifiedDate":"2022-09-06"},{"lineNumber":24,"author":{"gitId":"dhanish265"},"content":"deadline abc /by","lastModifiedDate":"2022-09-06"},{"lineNumber":25,"author":{"gitId":"dhanish265"},"content":"deadline /by abc","lastModifiedDate":"2022-09-06"},{"lineNumber":26,"author":{"gitId":"dhanish265"},"content":"event /at","lastModifiedDate":"2022-09-06"},{"lineNumber":27,"author":{"gitId":"dhanish265"},"content":"event /at abc","lastModifiedDate":"2022-09-06"},{"lineNumber":28,"author":{"gitId":"dhanish265"},"content":"event acb /at","lastModifiedDate":"2022-09-06"},{"lineNumber":29,"author":{"gitId":"dhanish265"},"content":"list","lastModifiedDate":"2022-09-06"},{"lineNumber":30,"author":{"gitId":"dhanish265"},"content":"delete -1","lastModifiedDate":"2022-09-11"},{"lineNumber":31,"author":{"gitId":"dhanish265"},"content":"delete 7","lastModifiedDate":"2022-09-12"},{"lineNumber":32,"author":{"gitId":"dhanish265"},"content":"delete 6","lastModifiedDate":"2022-09-12"},{"lineNumber":33,"author":{"gitId":"dhanish265"},"content":"delete 5","lastModifiedDate":"2022-09-12"},{"lineNumber":34,"author":{"gitId":"dhanish265"},"content":"list","lastModifiedDate":"2022-09-11"},{"lineNumber":35,"author":{"gitId":"dhanish265"},"content":"todo study for exam","lastModifiedDate":"2022-09-11"},{"lineNumber":36,"author":{"gitId":"dhanish265"},"content":"list","lastModifiedDate":"2022-09-11"},{"lineNumber":37,"author":{"gitId":"dhanish265"},"content":"delete 5","lastModifiedDate":"2022-09-12"},{"lineNumber":38,"author":{"gitId":"dhanish265"},"content":"list","lastModifiedDate":"2022-09-11"},{"lineNumber":39,"author":{"gitId":"dhanish265"},"content":"remove 2","lastModifiedDate":"2022-09-11"},{"lineNumber":40,"author":{"gitId":"dhanish265"},"content":"bye","lastModifiedDate":"2022-08-29"}],"authorContributionMap":{"dhanish265":40}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"dhanish265"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\exceptions\\*.java ..\\src\\main\\java\\duke\\tasks\\*.java ..\\src\\main\\java\\duke\\commands\\*.java","lastModifiedDate":"2022-09-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"dhanish265"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2022-09-06"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"dhanish265":2,"-":19}},{"path":"text-ui-test/src/main/java/duke/data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"dhanish265"},"content":"T | X | read book","lastModifiedDate":"2022-09-12"},{"lineNumber":2,"author":{"gitId":"dhanish265"},"content":"D |   | return book | 2022-06-12 12:00","lastModifiedDate":"2022-09-28"},{"lineNumber":3,"author":{"gitId":"dhanish265"},"content":"E |   | project meeting | 2022-08-22 18:00","lastModifiedDate":"2022-09-28"},{"lineNumber":4,"author":{"gitId":"dhanish265"},"content":"T | X | join sports club","lastModifiedDate":"2022-09-12"}],"authorContributionMap":{"dhanish265":4}}]
