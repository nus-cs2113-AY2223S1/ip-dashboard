[{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke;","lastModifiedDate":"2022-09-03"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"import duke.command.Command;","lastModifiedDate":"2022-09-18"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":"import duke.data.TaskList;","lastModifiedDate":"2022-09-17"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":"import duke.parser.CommandParser;","lastModifiedDate":"2022-09-18"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-09-17"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-09-03"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-09-17"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-19"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eDuke\u003c/code\u003e is the main class of the application containing the main method.","lastModifiedDate":"2022-09-19"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"    private Storage storage;","lastModifiedDate":"2022-09-17"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":"    private Ui ui;","lastModifiedDate":"2022-09-17"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":"    private TaskList tasks;","lastModifiedDate":"2022-09-17"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":"    private CommandParser commandParser;","lastModifiedDate":"2022-09-18"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":19,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":20,"author":{"gitId":"wcwy"},"content":"     * Constructor of \u003ccode\u003eDuke\u003c/code\u003e.","lastModifiedDate":"2022-09-19"},{"lineNumber":21,"author":{"gitId":"wcwy"},"content":"     * Initialise the program by creating a new storage, user interface and task list classes.","lastModifiedDate":"2022-09-19"},{"lineNumber":22,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":23,"author":{"gitId":"wcwy"},"content":"     * @param filePath The relative file path used to store the list of tasks","lastModifiedDate":"2022-09-19"},{"lineNumber":24,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":25,"author":{"gitId":"wcwy"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2022-09-17"},{"lineNumber":26,"author":{"gitId":"wcwy"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2022-09-17"},{"lineNumber":27,"author":{"gitId":"wcwy"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2022-09-17"},{"lineNumber":28,"author":{"gitId":"wcwy"},"content":"        commandParser \u003d new CommandParser();","lastModifiedDate":"2022-09-18"},{"lineNumber":29,"author":{"gitId":"wcwy"},"content":"        try {","lastModifiedDate":"2022-09-17"},{"lineNumber":30,"author":{"gitId":"wcwy"},"content":"            tasks \u003d new TaskList(storage.initialize());","lastModifiedDate":"2022-09-17"},{"lineNumber":31,"author":{"gitId":"wcwy"},"content":"        } catch (DukeException exception) {","lastModifiedDate":"2022-09-17"},{"lineNumber":32,"author":{"gitId":"wcwy"},"content":"            ui.displayErrorMessage(exception.getMessage());","lastModifiedDate":"2022-09-18"},{"lineNumber":33,"author":{"gitId":"wcwy"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2022-09-17"},{"lineNumber":34,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-17"},{"lineNumber":35,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-17"},{"lineNumber":36,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-17"},{"lineNumber":37,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":38,"author":{"gitId":"wcwy"},"content":"     * To execute the program in an infinite loop to received user\u0027s input,","lastModifiedDate":"2022-09-19"},{"lineNumber":39,"author":{"gitId":"wcwy"},"content":"     * parsing the user input into a valid command,","lastModifiedDate":"2022-09-19"},{"lineNumber":40,"author":{"gitId":"wcwy"},"content":"     * and execute the command until the user chooses to exit the program.","lastModifiedDate":"2022-09-19"},{"lineNumber":41,"author":{"gitId":"wcwy"},"content":"     * \u003cpr\u003e","lastModifiedDate":"2022-09-19"},{"lineNumber":42,"author":{"gitId":"wcwy"},"content":"     * Display the error message if an application exception is caught.","lastModifiedDate":"2022-09-19"},{"lineNumber":43,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":44,"author":{"gitId":"wcwy"},"content":"    public void run() {","lastModifiedDate":"2022-09-17"},{"lineNumber":45,"author":{"gitId":"wcwy"},"content":"        ui.displayGreetingMessage();","lastModifiedDate":"2022-09-17"},{"lineNumber":46,"author":{"gitId":"wcwy"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2022-09-18"},{"lineNumber":47,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-17"},{"lineNumber":48,"author":{"gitId":"wcwy"},"content":"        while (!isExit) {","lastModifiedDate":"2022-09-18"},{"lineNumber":49,"author":{"gitId":"wcwy"},"content":"            try {","lastModifiedDate":"2022-09-18"},{"lineNumber":50,"author":{"gitId":"wcwy"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2022-09-18"},{"lineNumber":51,"author":{"gitId":"wcwy"},"content":"                Command c \u003d commandParser.parse(fullCommand);","lastModifiedDate":"2022-09-18"},{"lineNumber":52,"author":{"gitId":"wcwy"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2022-09-18"},{"lineNumber":53,"author":{"gitId":"wcwy"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2022-09-18"},{"lineNumber":54,"author":{"gitId":"wcwy"},"content":"            } catch (DukeException exception) {","lastModifiedDate":"2022-09-18"},{"lineNumber":55,"author":{"gitId":"wcwy"},"content":"                ui.displayErrorMessage(exception.getMessage());","lastModifiedDate":"2022-09-18"},{"lineNumber":56,"author":{"gitId":"wcwy"},"content":"            }","lastModifiedDate":"2022-09-18"},{"lineNumber":57,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":58,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-17"},{"lineNumber":59,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-17"},{"lineNumber":60,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":61,"author":{"gitId":"wcwy"},"content":"     * Main method of the application.","lastModifiedDate":"2022-09-19"},{"lineNumber":62,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":63,"author":{"gitId":"wcwy"},"content":"     * @param args Unused","lastModifiedDate":"2022-09-19"},{"lineNumber":64,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":65,"author":{"gitId":"wcwy"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-09-17"},{"lineNumber":66,"author":{"gitId":"wcwy"},"content":"        new Duke(\"tasks.txt\").run();","lastModifiedDate":"2022-09-17"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"wcwy":65,"-":3}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.command;","lastModifiedDate":"2022-09-18"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"import duke.data.TaskList;","lastModifiedDate":"2022-09-18"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":"import duke.parser.DukeDateTimeParser;","lastModifiedDate":"2022-09-18"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-09-18"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-09-18"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-09-18"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-18"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eAddCommand\u003c/code\u003e is the abstract base class for the commands that add tasks to task list.","lastModifiedDate":"2022-09-18"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":" * \u003cp\u003e","lastModifiedDate":"2022-09-18"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":" * Extended by \u003ccode\u003eTodoCommand\u003c/code\u003e, \u003ccode\u003eDeadlineCommand\u003c/code\u003e and \u003ccode\u003eEventCommand\u003c/code\u003e.","lastModifiedDate":"2022-09-18"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":"public abstract class AddCommand extends Command {","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":"    public static String COMMAND_WORD;","lastModifiedDate":"2022-09-18"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":"    protected String taskName;","lastModifiedDate":"2022-09-18"},{"lineNumber":19,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":20,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":21,"author":{"gitId":"wcwy"},"content":"     * Constructor for \u003ccode\u003eAddCommand\u003c/code\u003e","lastModifiedDate":"2022-09-18"},{"lineNumber":22,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":23,"author":{"gitId":"wcwy"},"content":"    public AddCommand() {","lastModifiedDate":"2022-09-18"},{"lineNumber":24,"author":{"gitId":"wcwy"},"content":"        super();","lastModifiedDate":"2022-09-18"},{"lineNumber":25,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":26,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":27,"author":{"gitId":"wcwy"},"content":"    public abstract void checkAndSetParameters(String parameterInput) throws DukeException;","lastModifiedDate":"2022-09-18"},{"lineNumber":28,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":29,"author":{"gitId":"wcwy"},"content":"    protected abstract void checkParameters(String parameterInput) throws DukeException;","lastModifiedDate":"2022-09-18"},{"lineNumber":30,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":31,"author":{"gitId":"wcwy"},"content":"    protected abstract void setParameters(String parameterInput) throws DukeException;","lastModifiedDate":"2022-09-18"},{"lineNumber":32,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":33,"author":{"gitId":"wcwy"},"content":"    public abstract void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException;","lastModifiedDate":"2022-09-18"},{"lineNumber":34,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":35,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":36,"author":{"gitId":"wcwy"},"content":"     * Check if the user\u0027s input contains a task description.","lastModifiedDate":"2022-09-18"},{"lineNumber":37,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-18"},{"lineNumber":38,"author":{"gitId":"wcwy"},"content":"     * @param parameterInput The extracted part of user input after the command entered.","lastModifiedDate":"2022-09-18"},{"lineNumber":39,"author":{"gitId":"wcwy"},"content":"     * @param separator      The separator used to separate description and other parameter, such as /by or /at.","lastModifiedDate":"2022-09-18"},{"lineNumber":40,"author":{"gitId":"wcwy"},"content":"     * @return A boolean value to indicate if the parameterInput contains a task description","lastModifiedDate":"2022-09-18"},{"lineNumber":41,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":42,"author":{"gitId":"wcwy"},"content":"    protected boolean containsTaskDescription(String parameterInput, String separator) {","lastModifiedDate":"2022-09-18"},{"lineNumber":43,"author":{"gitId":"wcwy"},"content":"        boolean separatorIsEmpty \u003d separator.isEmpty();","lastModifiedDate":"2022-09-18"},{"lineNumber":44,"author":{"gitId":"wcwy"},"content":"        if (!separatorIsEmpty \u0026\u0026 startFromTimeSeparator(parameterInput, separator)) {","lastModifiedDate":"2022-09-18"},{"lineNumber":45,"author":{"gitId":"wcwy"},"content":"            return false;","lastModifiedDate":"2022-09-18"},{"lineNumber":46,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":47,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":48,"author":{"gitId":"wcwy"},"content":"        // Trim description from parameterInput","lastModifiedDate":"2022-09-18"},{"lineNumber":49,"author":{"gitId":"wcwy"},"content":"        String[] splits \u003d parameterInput.split(separator, 2);","lastModifiedDate":"2022-09-18"},{"lineNumber":50,"author":{"gitId":"wcwy"},"content":"        String description \u003d splits[0];","lastModifiedDate":"2022-09-18"},{"lineNumber":51,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":52,"author":{"gitId":"wcwy"},"content":"        // Check if description is empty or only contain whitespaces","lastModifiedDate":"2022-09-18"},{"lineNumber":53,"author":{"gitId":"wcwy"},"content":"        description \u003d description.replaceAll(\"\\\\s+\", \"\");","lastModifiedDate":"2022-09-18"},{"lineNumber":54,"author":{"gitId":"wcwy"},"content":"        if (description.equals(\"\")) {","lastModifiedDate":"2022-09-18"},{"lineNumber":55,"author":{"gitId":"wcwy"},"content":"            return false;","lastModifiedDate":"2022-09-18"},{"lineNumber":56,"author":{"gitId":"wcwy"},"content":"        } else {","lastModifiedDate":"2022-09-18"},{"lineNumber":57,"author":{"gitId":"wcwy"},"content":"            return true;","lastModifiedDate":"2022-09-18"},{"lineNumber":58,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":59,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":60,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":61,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":62,"author":{"gitId":"wcwy"},"content":"     * Check if the user\u0027s input contains a time after its separator.","lastModifiedDate":"2022-09-18"},{"lineNumber":63,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-18"},{"lineNumber":64,"author":{"gitId":"wcwy"},"content":"     * @param parameterInput The extracted part of user input after the command entered.","lastModifiedDate":"2022-09-18"},{"lineNumber":65,"author":{"gitId":"wcwy"},"content":"     * @param separator      The separator used to separate description and time, such as /by or /at.","lastModifiedDate":"2022-09-18"},{"lineNumber":66,"author":{"gitId":"wcwy"},"content":"     * @return A boolean value to indicate if the parameterInput contains a time.","lastModifiedDate":"2022-09-18"},{"lineNumber":67,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":68,"author":{"gitId":"wcwy"},"content":"    protected boolean containsTaskTime(String parameterInput, String separator) {","lastModifiedDate":"2022-09-18"},{"lineNumber":69,"author":{"gitId":"wcwy"},"content":"        // Trim time from parameterInput","lastModifiedDate":"2022-09-18"},{"lineNumber":70,"author":{"gitId":"wcwy"},"content":"        String[] splits \u003d parameterInput.split(separator, 2);","lastModifiedDate":"2022-09-18"},{"lineNumber":71,"author":{"gitId":"wcwy"},"content":"        String time \u003d splits[1];","lastModifiedDate":"2022-09-18"},{"lineNumber":72,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":73,"author":{"gitId":"wcwy"},"content":"        // Check if time is empty or only contain whitespaces","lastModifiedDate":"2022-09-18"},{"lineNumber":74,"author":{"gitId":"wcwy"},"content":"        time \u003d time.replaceAll(\"\\\\s+\", \"\");","lastModifiedDate":"2022-09-18"},{"lineNumber":75,"author":{"gitId":"wcwy"},"content":"        if (time.equals(\"\")) {","lastModifiedDate":"2022-09-18"},{"lineNumber":76,"author":{"gitId":"wcwy"},"content":"            return false;","lastModifiedDate":"2022-09-18"},{"lineNumber":77,"author":{"gitId":"wcwy"},"content":"        } else {","lastModifiedDate":"2022-09-18"},{"lineNumber":78,"author":{"gitId":"wcwy"},"content":"            return true;","lastModifiedDate":"2022-09-18"},{"lineNumber":79,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":80,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":81,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":82,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":83,"author":{"gitId":"wcwy"},"content":"     * Check if the user\u0027s input contains a separator.","lastModifiedDate":"2022-09-18"},{"lineNumber":84,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-18"},{"lineNumber":85,"author":{"gitId":"wcwy"},"content":"     * @param parameterInput The extracted part of user input after the command entered.","lastModifiedDate":"2022-09-18"},{"lineNumber":86,"author":{"gitId":"wcwy"},"content":"     * @param separator      The separator used to separate description and time, such as /by or /at.","lastModifiedDate":"2022-09-18"},{"lineNumber":87,"author":{"gitId":"wcwy"},"content":"     * @return A boolean value to indicate if the parameterInput contains the given time separator.","lastModifiedDate":"2022-09-18"},{"lineNumber":88,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":89,"author":{"gitId":"wcwy"},"content":"    protected boolean containsTimeSeparator(String parameterInput, String separator) {","lastModifiedDate":"2022-09-18"},{"lineNumber":90,"author":{"gitId":"wcwy"},"content":"        if (startFromTimeSeparator(parameterInput, separator)) {","lastModifiedDate":"2022-09-18"},{"lineNumber":91,"author":{"gitId":"wcwy"},"content":"            return true;","lastModifiedDate":"2022-09-18"},{"lineNumber":92,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":93,"author":{"gitId":"wcwy"},"content":"        if (!parameterInput.contains(separator)) {","lastModifiedDate":"2022-09-18"},{"lineNumber":94,"author":{"gitId":"wcwy"},"content":"            return false;","lastModifiedDate":"2022-09-18"},{"lineNumber":95,"author":{"gitId":"wcwy"},"content":"        } else {","lastModifiedDate":"2022-09-18"},{"lineNumber":96,"author":{"gitId":"wcwy"},"content":"            return true;","lastModifiedDate":"2022-09-18"},{"lineNumber":97,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":98,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":99,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":100,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":101,"author":{"gitId":"wcwy"},"content":"     * Check if the user\u0027s input starts from a separator.","lastModifiedDate":"2022-09-19"},{"lineNumber":102,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":103,"author":{"gitId":"wcwy"},"content":"     * @param parameterInput The extracted part of user input after the command entered.","lastModifiedDate":"2022-09-19"},{"lineNumber":104,"author":{"gitId":"wcwy"},"content":"     * @param separator The separator used to separate description and time, such as /by or /at.","lastModifiedDate":"2022-09-19"},{"lineNumber":105,"author":{"gitId":"wcwy"},"content":"     * @return A boolean value to indicate if the parameterInput starts with given time separator.","lastModifiedDate":"2022-09-19"},{"lineNumber":106,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":107,"author":{"gitId":"wcwy"},"content":"    private boolean startFromTimeSeparator(String parameterInput, String separator) {","lastModifiedDate":"2022-09-18"},{"lineNumber":108,"author":{"gitId":"wcwy"},"content":"        if (parameterInput.startsWith(separator.trim())) {","lastModifiedDate":"2022-09-18"},{"lineNumber":109,"author":{"gitId":"wcwy"},"content":"            return true;","lastModifiedDate":"2022-09-18"},{"lineNumber":110,"author":{"gitId":"wcwy"},"content":"        } else {","lastModifiedDate":"2022-09-18"},{"lineNumber":111,"author":{"gitId":"wcwy"},"content":"            return false;","lastModifiedDate":"2022-09-18"},{"lineNumber":112,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":113,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":114,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":115,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":116,"author":{"gitId":"wcwy"},"content":"     * \u003cui\u003e","lastModifiedDate":"2022-09-18"},{"lineNumber":117,"author":{"gitId":"wcwy"},"content":"     * Split the user input into two parts.","lastModifiedDate":"2022-09-18"},{"lineNumber":118,"author":{"gitId":"wcwy"},"content":"     * \u003cli\u003eFirst part contains the task description.\u003c/li\u003e","lastModifiedDate":"2022-09-18"},{"lineNumber":119,"author":{"gitId":"wcwy"},"content":"     * \u003cli\u003eSecond part contains the task time, if there\u0027s any.\u003c/li\u003e","lastModifiedDate":"2022-09-18"},{"lineNumber":120,"author":{"gitId":"wcwy"},"content":"     * \u003c/ui\u003e","lastModifiedDate":"2022-09-18"},{"lineNumber":121,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-18"},{"lineNumber":122,"author":{"gitId":"wcwy"},"content":"     * @param regex          The regular expression used to split the user\u0027s input","lastModifiedDate":"2022-09-18"},{"lineNumber":123,"author":{"gitId":"wcwy"},"content":"     * @param parameterInput The extracted part of user input after the command entered.","lastModifiedDate":"2022-09-18"},{"lineNumber":124,"author":{"gitId":"wcwy"},"content":"     * @return A string array of size 2 containing the task description and task time.","lastModifiedDate":"2022-09-18"},{"lineNumber":125,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":126,"author":{"gitId":"wcwy"},"content":"    protected static String[] splitTaskName(String regex, String parameterInput) {","lastModifiedDate":"2022-09-18"},{"lineNumber":127,"author":{"gitId":"wcwy"},"content":"        // Split the user input into [task description, task time]","lastModifiedDate":"2022-09-18"},{"lineNumber":128,"author":{"gitId":"wcwy"},"content":"        String[] splits \u003d parameterInput.split(regex, 2);","lastModifiedDate":"2022-09-18"},{"lineNumber":129,"author":{"gitId":"wcwy"},"content":"        if (splits.length \u003d\u003d 1) {","lastModifiedDate":"2022-09-18"},{"lineNumber":130,"author":{"gitId":"wcwy"},"content":"            // Populate an empty string into the array when the size is only 1 for code security","lastModifiedDate":"2022-09-18"},{"lineNumber":131,"author":{"gitId":"wcwy"},"content":"            return new String[]{splits[0], \"\"};","lastModifiedDate":"2022-09-18"},{"lineNumber":132,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":133,"author":{"gitId":"wcwy"},"content":"        return splits;","lastModifiedDate":"2022-09-18"},{"lineNumber":134,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":135,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":136,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":137,"author":{"gitId":"wcwy"},"content":"     * Parse the datetime in String extracted from the user input into a LocalDateTime object","lastModifiedDate":"2022-09-19"},{"lineNumber":138,"author":{"gitId":"wcwy"},"content":"     * @param parameterInput A string containing the datetime of the task","lastModifiedDate":"2022-09-19"},{"lineNumber":139,"author":{"gitId":"wcwy"},"content":"     * @return A parsed LocalDateTime object from the user input","lastModifiedDate":"2022-09-19"},{"lineNumber":140,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException Exception triggered on invalid LocalDateTime format.","lastModifiedDate":"2022-09-19"},{"lineNumber":141,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":142,"author":{"gitId":"wcwy"},"content":"    protected LocalDateTime convertStringToLocalDateTime(String parameterInput) throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":143,"author":{"gitId":"wcwy"},"content":"        DukeDateTimeParser parser \u003d new DukeDateTimeParser();","lastModifiedDate":"2022-09-18"},{"lineNumber":144,"author":{"gitId":"wcwy"},"content":"        LocalDateTime dateTimeInput \u003d parser.parse(parameterInput);","lastModifiedDate":"2022-09-18"},{"lineNumber":145,"author":{"gitId":"wcwy"},"content":"        return dateTimeInput;","lastModifiedDate":"2022-09-18"},{"lineNumber":146,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":147,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-09-18"}],"authorContributionMap":{"wcwy":147}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.command;","lastModifiedDate":"2022-09-18"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"import duke.data.TaskList;","lastModifiedDate":"2022-09-18"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-09-18"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-09-18"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-18"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eByeCommand\u003c/code\u003e is the command that triggers an exit of program.","lastModifiedDate":"2022-09-18"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-18"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2022-09-18"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":"    public static final String COMMAND_WORD \u003d \"BYE\";","lastModifiedDate":"2022-09-18"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":"     * Constructor of \u003ccode\u003eByeCommand\u003c/code\u003e","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":"    public ByeCommand() {","lastModifiedDate":"2022-09-18"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":"        super();","lastModifiedDate":"2022-09-18"},{"lineNumber":19,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":20,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":21,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":22,"author":{"gitId":"wcwy"},"content":"    public void checkAndSetParameters(String parameterInput) {","lastModifiedDate":"2022-09-18"},{"lineNumber":23,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":24,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":25,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":26,"author":{"gitId":"wcwy"},"content":"    protected void checkParameters(String parameterInput) {","lastModifiedDate":"2022-09-18"},{"lineNumber":27,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":28,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":29,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":30,"author":{"gitId":"wcwy"},"content":"    protected void setParameters(String parameterInput) {","lastModifiedDate":"2022-09-18"},{"lineNumber":31,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":32,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":33,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":34,"author":{"gitId":"wcwy"},"content":"     * Execute the bye command.","lastModifiedDate":"2022-09-18"},{"lineNumber":35,"author":{"gitId":"wcwy"},"content":"     * Set the exit boolean to true to exit the program from main method.","lastModifiedDate":"2022-09-18"},{"lineNumber":36,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-18"},{"lineNumber":37,"author":{"gitId":"wcwy"},"content":"     * @param taskList Unused.","lastModifiedDate":"2022-09-18"},{"lineNumber":38,"author":{"gitId":"wcwy"},"content":"     * @param ui       User Interface to display messages.","lastModifiedDate":"2022-09-18"},{"lineNumber":39,"author":{"gitId":"wcwy"},"content":"     * @param storage  Unused.","lastModifiedDate":"2022-09-18"},{"lineNumber":40,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException Unused.","lastModifiedDate":"2022-09-18"},{"lineNumber":41,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":42,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":43,"author":{"gitId":"wcwy"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":44,"author":{"gitId":"wcwy"},"content":"        setExit(true);","lastModifiedDate":"2022-09-18"},{"lineNumber":45,"author":{"gitId":"wcwy"},"content":"        ui.displayExitMessage();","lastModifiedDate":"2022-09-18"},{"lineNumber":46,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":47,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-09-18"}],"authorContributionMap":{"wcwy":47}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.command;","lastModifiedDate":"2022-09-18"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"import duke.data.TaskList;","lastModifiedDate":"2022-09-18"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-09-18"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-09-18"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-18"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eCommand\u003c/code\u003e is the abstract base class for the every available command in the application.","lastModifiedDate":"2022-09-18"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-18"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":"public abstract class Command {","lastModifiedDate":"2022-09-18"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":"    // The valid command word used to trigger the execution.","lastModifiedDate":"2022-09-18"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":"    public static String COMMAND_WORD;","lastModifiedDate":"2022-09-18"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"    // The boolean value to be checked by Duke to determine whether to exit the application.","lastModifiedDate":"2022-09-19"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":"    private static boolean isExit;","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":"     * Constructor of \u003ccode\u003eCommand\u003c/code\u003e. The isExit boolean is set to false by default.","lastModifiedDate":"2022-09-18"},{"lineNumber":19,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":20,"author":{"gitId":"wcwy"},"content":"    public Command() {","lastModifiedDate":"2022-09-18"},{"lineNumber":21,"author":{"gitId":"wcwy"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2022-09-18"},{"lineNumber":22,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":23,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":24,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":25,"author":{"gitId":"wcwy"},"content":"     * Get the is exit status.","lastModifiedDate":"2022-09-18"},{"lineNumber":26,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-18"},{"lineNumber":27,"author":{"gitId":"wcwy"},"content":"     * @return A boolean value to represent whether to exit the program.","lastModifiedDate":"2022-09-19"},{"lineNumber":28,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":29,"author":{"gitId":"wcwy"},"content":"    public boolean isExit() {","lastModifiedDate":"2022-09-18"},{"lineNumber":30,"author":{"gitId":"wcwy"},"content":"        return this.isExit;","lastModifiedDate":"2022-09-18"},{"lineNumber":31,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":32,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":33,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":34,"author":{"gitId":"wcwy"},"content":"     * Set the is exit status.","lastModifiedDate":"2022-09-18"},{"lineNumber":35,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-18"},{"lineNumber":36,"author":{"gitId":"wcwy"},"content":"     * @param isExit A boolean value to represents whether to exit the program.","lastModifiedDate":"2022-09-18"},{"lineNumber":37,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":38,"author":{"gitId":"wcwy"},"content":"    public void setExit(boolean isExit) {","lastModifiedDate":"2022-09-18"},{"lineNumber":39,"author":{"gitId":"wcwy"},"content":"        this.isExit \u003d isExit;","lastModifiedDate":"2022-09-18"},{"lineNumber":40,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":41,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":42,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":43,"author":{"gitId":"wcwy"},"content":"     * To check the user\u0027s input and store necessary parameters for execution.","lastModifiedDate":"2022-09-18"},{"lineNumber":44,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-18"},{"lineNumber":45,"author":{"gitId":"wcwy"},"content":"     * @param parameterInput The extracted part of user input after the command entered.","lastModifiedDate":"2022-09-18"},{"lineNumber":46,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException Exception triggered on invalid user input.","lastModifiedDate":"2022-09-18"},{"lineNumber":47,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":48,"author":{"gitId":"wcwy"},"content":"    public abstract void checkAndSetParameters(String parameterInput) throws DukeException;","lastModifiedDate":"2022-09-18"},{"lineNumber":49,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":50,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":51,"author":{"gitId":"wcwy"},"content":"     * To check the validity of the user\u0027s input. Throws exception on invalid input.","lastModifiedDate":"2022-09-18"},{"lineNumber":52,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-18"},{"lineNumber":53,"author":{"gitId":"wcwy"},"content":"     * @param parameterInput The extracted part of user input after the command entered.","lastModifiedDate":"2022-09-18"},{"lineNumber":54,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException Exception triggered on invalid user input.","lastModifiedDate":"2022-09-18"},{"lineNumber":55,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":56,"author":{"gitId":"wcwy"},"content":"    protected abstract void checkParameters(String parameterInput) throws DukeException;","lastModifiedDate":"2022-09-18"},{"lineNumber":57,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":58,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":59,"author":{"gitId":"wcwy"},"content":"     * To store the necessary parameters for execution.","lastModifiedDate":"2022-09-18"},{"lineNumber":60,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-18"},{"lineNumber":61,"author":{"gitId":"wcwy"},"content":"     * @param parameterInput The extracted part of user input after the command entered.","lastModifiedDate":"2022-09-18"},{"lineNumber":62,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException Exception triggered on invalid user input.","lastModifiedDate":"2022-09-19"},{"lineNumber":63,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":64,"author":{"gitId":"wcwy"},"content":"    protected abstract void setParameters(String parameterInput) throws DukeException;","lastModifiedDate":"2022-09-18"},{"lineNumber":65,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":66,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":67,"author":{"gitId":"wcwy"},"content":"     * To execute the command provided by the user.","lastModifiedDate":"2022-09-18"},{"lineNumber":68,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-18"},{"lineNumber":69,"author":{"gitId":"wcwy"},"content":"     * @param taskList List of tasks stored in current execution.","lastModifiedDate":"2022-09-18"},{"lineNumber":70,"author":{"gitId":"wcwy"},"content":"     * @param ui       User interface to display messages.","lastModifiedDate":"2022-09-18"},{"lineNumber":71,"author":{"gitId":"wcwy"},"content":"     * @param storage  File storage to read, append or rewrite file.","lastModifiedDate":"2022-09-18"},{"lineNumber":72,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException Exception triggered on invalid user input.","lastModifiedDate":"2022-09-18"},{"lineNumber":73,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":74,"author":{"gitId":"wcwy"},"content":"    public abstract void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException;","lastModifiedDate":"2022-09-18"},{"lineNumber":75,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-09-18"}],"authorContributionMap":{"wcwy":75}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.command;","lastModifiedDate":"2022-09-18"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"import duke.data.TaskList;","lastModifiedDate":"2022-09-18"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":"import duke.data.task.Task;","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":"import duke.exception.DeadlineMissingTagException;","lastModifiedDate":"2022-09-18"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":"import duke.exception.DeadlineMissingDescriptionException;","lastModifiedDate":"2022-09-18"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"import duke.exception.DeadlineMissingTimeException;","lastModifiedDate":"2022-09-18"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-09-18"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-09-18"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-09-18"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-09-18"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-18"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eDeadlineCommand\u003c/code\u003e is the command that adds a deadline task into the task list.","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":"public class DeadlineCommand extends AddCommand {","lastModifiedDate":"2022-09-18"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":"    public static final String COMMAND_WORD \u003d \"DEADLINE\";","lastModifiedDate":"2022-09-18"},{"lineNumber":19,"author":{"gitId":"wcwy"},"content":"    private LocalDateTime deadlineTime;","lastModifiedDate":"2022-09-18"},{"lineNumber":20,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":21,"author":{"gitId":"wcwy"},"content":"    public DeadlineCommand() {","lastModifiedDate":"2022-09-18"},{"lineNumber":22,"author":{"gitId":"wcwy"},"content":"        super();","lastModifiedDate":"2022-09-18"},{"lineNumber":23,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":24,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":25,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":26,"author":{"gitId":"wcwy"},"content":"     * Check the validity of user input and set the deadline description and time of the deadline.","lastModifiedDate":"2022-09-18"},{"lineNumber":27,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-18"},{"lineNumber":28,"author":{"gitId":"wcwy"},"content":"     * @param parameterInput The extracted part of user input after the command entered.","lastModifiedDate":"2022-09-18"},{"lineNumber":29,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException Exception triggered on invalid user input.","lastModifiedDate":"2022-09-18"},{"lineNumber":30,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":31,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":32,"author":{"gitId":"wcwy"},"content":"    public void checkAndSetParameters(String parameterInput) throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":33,"author":{"gitId":"wcwy"},"content":"        checkParameters(parameterInput);","lastModifiedDate":"2022-09-18"},{"lineNumber":34,"author":{"gitId":"wcwy"},"content":"        setParameters(parameterInput);","lastModifiedDate":"2022-09-18"},{"lineNumber":35,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":36,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":37,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":38,"author":{"gitId":"wcwy"},"content":"     * Check that user input contains a description, separator and a time.","lastModifiedDate":"2022-09-18"},{"lineNumber":39,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-18"},{"lineNumber":40,"author":{"gitId":"wcwy"},"content":"     * @param parameterInput The extracted part of user input after the command entered.","lastModifiedDate":"2022-09-18"},{"lineNumber":41,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException Exception triggered on invalid user input.","lastModifiedDate":"2022-09-18"},{"lineNumber":42,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":43,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":44,"author":{"gitId":"wcwy"},"content":"    protected void checkParameters(String parameterInput) throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":45,"author":{"gitId":"wcwy"},"content":"        if (!containsTimeSeparator(parameterInput, \" /by \")) {","lastModifiedDate":"2022-09-18"},{"lineNumber":46,"author":{"gitId":"wcwy"},"content":"            throw new DeadlineMissingTagException();","lastModifiedDate":"2022-09-18"},{"lineNumber":47,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":48,"author":{"gitId":"wcwy"},"content":"        if (!containsTaskDescription(parameterInput, \" /by \")) {","lastModifiedDate":"2022-09-18"},{"lineNumber":49,"author":{"gitId":"wcwy"},"content":"            throw new DeadlineMissingDescriptionException();","lastModifiedDate":"2022-09-18"},{"lineNumber":50,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":51,"author":{"gitId":"wcwy"},"content":"        if (!containsTaskTime(parameterInput, \" /by \")) {","lastModifiedDate":"2022-09-18"},{"lineNumber":52,"author":{"gitId":"wcwy"},"content":"            throw new DeadlineMissingTimeException();","lastModifiedDate":"2022-09-18"},{"lineNumber":53,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":54,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":55,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":56,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":57,"author":{"gitId":"wcwy"},"content":"     * Store the deadline description and time of the deadline.","lastModifiedDate":"2022-09-18"},{"lineNumber":58,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-18"},{"lineNumber":59,"author":{"gitId":"wcwy"},"content":"     * @param parameterInput The extracted part of user input after the command entered.","lastModifiedDate":"2022-09-18"},{"lineNumber":60,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":61,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":62,"author":{"gitId":"wcwy"},"content":"    protected void setParameters(String parameterInput) throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":63,"author":{"gitId":"wcwy"},"content":"        String[] splits \u003d splitTaskName(\" /by \", parameterInput);","lastModifiedDate":"2022-09-18"},{"lineNumber":64,"author":{"gitId":"wcwy"},"content":"        super.taskName \u003d splits[0];","lastModifiedDate":"2022-09-18"},{"lineNumber":65,"author":{"gitId":"wcwy"},"content":"        deadlineTime \u003d convertStringToLocalDateTime(splits[1]);","lastModifiedDate":"2022-09-18"},{"lineNumber":66,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":67,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":68,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":69,"author":{"gitId":"wcwy"},"content":"     * Create a deadline task and add it to the task list.","lastModifiedDate":"2022-09-18"},{"lineNumber":70,"author":{"gitId":"wcwy"},"content":"     * Display an addition successful message to user.","lastModifiedDate":"2022-09-18"},{"lineNumber":71,"author":{"gitId":"wcwy"},"content":"     * Append the deadline task to the file storage.","lastModifiedDate":"2022-09-18"},{"lineNumber":72,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-18"},{"lineNumber":73,"author":{"gitId":"wcwy"},"content":"     * @param taskList List of tasks stored in current execution.","lastModifiedDate":"2022-09-18"},{"lineNumber":74,"author":{"gitId":"wcwy"},"content":"     * @param ui       User interface to display messages.","lastModifiedDate":"2022-09-18"},{"lineNumber":75,"author":{"gitId":"wcwy"},"content":"     * @param storage  File storage to read, append or rewrite file.","lastModifiedDate":"2022-09-18"},{"lineNumber":76,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException Exception triggered on erroneous file operation.","lastModifiedDate":"2022-09-18"},{"lineNumber":77,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":78,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":79,"author":{"gitId":"wcwy"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":80,"author":{"gitId":"wcwy"},"content":"        Task task \u003d taskList.addDeadline(super.taskName, deadlineTime);","lastModifiedDate":"2022-09-18"},{"lineNumber":81,"author":{"gitId":"wcwy"},"content":"        ui.displayTaskAdditionMessage(task.getTaskFullDetails(), taskList.getSize());","lastModifiedDate":"2022-09-18"},{"lineNumber":82,"author":{"gitId":"wcwy"},"content":"        storage.appendDukeFile(taskList);","lastModifiedDate":"2022-09-18"},{"lineNumber":83,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":84,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-09-18"}],"authorContributionMap":{"wcwy":84}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.command;","lastModifiedDate":"2022-09-18"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"import duke.data.TaskList;","lastModifiedDate":"2022-09-18"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-09-18"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-09-18"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-18"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eDeleteCommand\u003c/code\u003e is the command that deletes a task based on an index given.","lastModifiedDate":"2022-09-18"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-18"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":"public class DeleteCommand extends ModifyCommand {","lastModifiedDate":"2022-09-18"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":"    public static final String COMMAND_WORD \u003d \"DELETE\";","lastModifiedDate":"2022-09-18"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"    public DeleteCommand() {","lastModifiedDate":"2022-09-18"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":"        super();","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":19,"author":{"gitId":"wcwy"},"content":"     * Check that the task index is within the valid range of task list.","lastModifiedDate":"2022-09-18"},{"lineNumber":20,"author":{"gitId":"wcwy"},"content":"     * Delete the task from task list.","lastModifiedDate":"2022-09-18"},{"lineNumber":21,"author":{"gitId":"wcwy"},"content":"     * Display a deletion successful message to user.","lastModifiedDate":"2022-09-18"},{"lineNumber":22,"author":{"gitId":"wcwy"},"content":"     * Rewrite the file storage based on new task list.","lastModifiedDate":"2022-09-18"},{"lineNumber":23,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-18"},{"lineNumber":24,"author":{"gitId":"wcwy"},"content":"     * @param taskList List of tasks stored in current execution.","lastModifiedDate":"2022-09-18"},{"lineNumber":25,"author":{"gitId":"wcwy"},"content":"     * @param ui       User interface to display messages.","lastModifiedDate":"2022-09-18"},{"lineNumber":26,"author":{"gitId":"wcwy"},"content":"     * @param storage  File storage to read, append or rewrite file.","lastModifiedDate":"2022-09-18"},{"lineNumber":27,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException Exception triggered on erroneous file operation.","lastModifiedDate":"2022-09-18"},{"lineNumber":28,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":29,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":30,"author":{"gitId":"wcwy"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":31,"author":{"gitId":"wcwy"},"content":"        checkTaskIndexRange(taskIndex, taskList.getSize());","lastModifiedDate":"2022-09-18"},{"lineNumber":32,"author":{"gitId":"wcwy"},"content":"        String taskDetail \u003d taskList.deleteTask(taskIndex);","lastModifiedDate":"2022-09-18"},{"lineNumber":33,"author":{"gitId":"wcwy"},"content":"        ui.displayTaskDeletionMessage(taskDetail, taskList.getSize());","lastModifiedDate":"2022-09-18"},{"lineNumber":34,"author":{"gitId":"wcwy"},"content":"        storage.rewriteDukeFile(taskList);","lastModifiedDate":"2022-09-18"},{"lineNumber":35,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":36,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-09-18"}],"authorContributionMap":{"wcwy":36}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.command;","lastModifiedDate":"2022-09-18"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"import duke.data.TaskList;","lastModifiedDate":"2022-09-18"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":"import duke.data.task.Task;","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-09-18"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":"import duke.exception.EventMissingDescriptionException;","lastModifiedDate":"2022-09-18"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"import duke.exception.EventMissingTagException;","lastModifiedDate":"2022-09-18"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"import duke.exception.EventMissingTimeException;","lastModifiedDate":"2022-09-18"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-09-18"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-09-18"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-09-18"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-18"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eEventCommand\u003c/code\u003e is the command that adds an event task into the task list.","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":"public class EventCommand extends AddCommand {","lastModifiedDate":"2022-09-18"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":"    public static final String COMMAND_WORD \u003d \"EVENT\";","lastModifiedDate":"2022-09-18"},{"lineNumber":19,"author":{"gitId":"wcwy"},"content":"    private LocalDateTime eventTime;","lastModifiedDate":"2022-09-18"},{"lineNumber":20,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":21,"author":{"gitId":"wcwy"},"content":"    public EventCommand() {","lastModifiedDate":"2022-09-18"},{"lineNumber":22,"author":{"gitId":"wcwy"},"content":"        super();","lastModifiedDate":"2022-09-18"},{"lineNumber":23,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":24,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":25,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":26,"author":{"gitId":"wcwy"},"content":"     * Check the validity of user input and set the event description and time of the event.","lastModifiedDate":"2022-09-18"},{"lineNumber":27,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-18"},{"lineNumber":28,"author":{"gitId":"wcwy"},"content":"     * @param parameterInput The extracted part of user input after the command entered.","lastModifiedDate":"2022-09-18"},{"lineNumber":29,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException Exception triggered on invalid user input.","lastModifiedDate":"2022-09-18"},{"lineNumber":30,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":31,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":32,"author":{"gitId":"wcwy"},"content":"    public void checkAndSetParameters(String parameterInput) throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":33,"author":{"gitId":"wcwy"},"content":"        checkParameters(parameterInput);","lastModifiedDate":"2022-09-18"},{"lineNumber":34,"author":{"gitId":"wcwy"},"content":"        setParameters(parameterInput);","lastModifiedDate":"2022-09-18"},{"lineNumber":35,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":36,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":37,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":38,"author":{"gitId":"wcwy"},"content":"     * Check that user input contains a description, separator and a time.","lastModifiedDate":"2022-09-18"},{"lineNumber":39,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-18"},{"lineNumber":40,"author":{"gitId":"wcwy"},"content":"     * @param parameterInput The extracted part of user input after the command entered.","lastModifiedDate":"2022-09-18"},{"lineNumber":41,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException Exception triggered on invalid user input.","lastModifiedDate":"2022-09-18"},{"lineNumber":42,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":43,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":44,"author":{"gitId":"wcwy"},"content":"    protected void checkParameters(String parameterInput) throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":45,"author":{"gitId":"wcwy"},"content":"        if (!containsTimeSeparator(parameterInput, \" /at \")) {","lastModifiedDate":"2022-09-18"},{"lineNumber":46,"author":{"gitId":"wcwy"},"content":"            throw new EventMissingTagException();","lastModifiedDate":"2022-09-18"},{"lineNumber":47,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":48,"author":{"gitId":"wcwy"},"content":"        if (!containsTaskDescription(parameterInput, \" /at \")) {","lastModifiedDate":"2022-09-18"},{"lineNumber":49,"author":{"gitId":"wcwy"},"content":"            throw new EventMissingDescriptionException();","lastModifiedDate":"2022-09-18"},{"lineNumber":50,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":51,"author":{"gitId":"wcwy"},"content":"        if (!containsTaskTime(parameterInput, \" /at \")) {","lastModifiedDate":"2022-09-18"},{"lineNumber":52,"author":{"gitId":"wcwy"},"content":"            throw new EventMissingTimeException();","lastModifiedDate":"2022-09-18"},{"lineNumber":53,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":54,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":55,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":56,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":57,"author":{"gitId":"wcwy"},"content":"     * Store the event description and time of the event.","lastModifiedDate":"2022-09-18"},{"lineNumber":58,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-18"},{"lineNumber":59,"author":{"gitId":"wcwy"},"content":"     * @param parameterInput The extracted part of user input after the command entered.","lastModifiedDate":"2022-09-18"},{"lineNumber":60,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":61,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":62,"author":{"gitId":"wcwy"},"content":"    protected void setParameters(String parameterInput) throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":63,"author":{"gitId":"wcwy"},"content":"        String[] splits \u003d splitTaskName(\" /at \", parameterInput);","lastModifiedDate":"2022-09-18"},{"lineNumber":64,"author":{"gitId":"wcwy"},"content":"        super.taskName \u003d splits[0];","lastModifiedDate":"2022-09-18"},{"lineNumber":65,"author":{"gitId":"wcwy"},"content":"        eventTime \u003d convertStringToLocalDateTime(splits[1]);","lastModifiedDate":"2022-09-18"},{"lineNumber":66,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":67,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":68,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":69,"author":{"gitId":"wcwy"},"content":"     * Create an event task and add it to the task list.","lastModifiedDate":"2022-09-18"},{"lineNumber":70,"author":{"gitId":"wcwy"},"content":"     * Display an addition successful message to user.","lastModifiedDate":"2022-09-18"},{"lineNumber":71,"author":{"gitId":"wcwy"},"content":"     * Append the event task to the file storage.","lastModifiedDate":"2022-09-18"},{"lineNumber":72,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-18"},{"lineNumber":73,"author":{"gitId":"wcwy"},"content":"     * @param taskList List of tasks stored in current execution.","lastModifiedDate":"2022-09-18"},{"lineNumber":74,"author":{"gitId":"wcwy"},"content":"     * @param ui       User interface to display messages.","lastModifiedDate":"2022-09-18"},{"lineNumber":75,"author":{"gitId":"wcwy"},"content":"     * @param storage  File storage to read, append or rewrite file.","lastModifiedDate":"2022-09-18"},{"lineNumber":76,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException Exception triggered on erroneous file operation.","lastModifiedDate":"2022-09-18"},{"lineNumber":77,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":78,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":79,"author":{"gitId":"wcwy"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":80,"author":{"gitId":"wcwy"},"content":"        Task task \u003d taskList.addEvent(super.taskName, eventTime);","lastModifiedDate":"2022-09-18"},{"lineNumber":81,"author":{"gitId":"wcwy"},"content":"        ui.displayTaskAdditionMessage(task.getTaskFullDetails(), taskList.getSize());","lastModifiedDate":"2022-09-18"},{"lineNumber":82,"author":{"gitId":"wcwy"},"content":"        storage.appendDukeFile(taskList);","lastModifiedDate":"2022-09-18"},{"lineNumber":83,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":84,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-09-18"}],"authorContributionMap":{"wcwy":84}},{"path":"src/main/java/duke/command/FilterCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.command;","lastModifiedDate":"2022-09-18"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"import duke.data.TaskList;","lastModifiedDate":"2022-09-18"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":"import duke.parser.DukeDateParser;","lastModifiedDate":"2022-09-18"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-09-18"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-09-18"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-09-18"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-19"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eFilterCommand\u003c/code\u003e is the command that list all the deadline and event tasks in the task list","lastModifiedDate":"2022-09-19"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":" * that the date of the task matches with the requested date.","lastModifiedDate":"2022-09-19"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-19"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":"public class FilterCommand extends Command {","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":"    public static final String COMMAND_WORD \u003d \"FILTER\";","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":"    private LocalDate targetDate;","lastModifiedDate":"2022-09-18"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":"    private DukeDateParser parser;","lastModifiedDate":"2022-09-18"},{"lineNumber":19,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":20,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":21,"author":{"gitId":"wcwy"},"content":"     * Constructor of \u003ccode\u003eFilterCommand\u003c/code\u003e, creates a DukeDateParser class","lastModifiedDate":"2022-09-19"},{"lineNumber":22,"author":{"gitId":"wcwy"},"content":"     * used to parse the user input into a valid LocalDate","lastModifiedDate":"2022-09-19"},{"lineNumber":23,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":24,"author":{"gitId":"wcwy"},"content":"    public FilterCommand() {","lastModifiedDate":"2022-09-18"},{"lineNumber":25,"author":{"gitId":"wcwy"},"content":"        super();","lastModifiedDate":"2022-09-18"},{"lineNumber":26,"author":{"gitId":"wcwy"},"content":"        parser \u003d new DukeDateParser();","lastModifiedDate":"2022-09-18"},{"lineNumber":27,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":28,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":29,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":30,"author":{"gitId":"wcwy"},"content":"     * Check the validity of user input and parse it into LocalDate class.","lastModifiedDate":"2022-09-19"},{"lineNumber":31,"author":{"gitId":"wcwy"},"content":"     * Then store the targeted date to filter for.","lastModifiedDate":"2022-09-19"},{"lineNumber":32,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":33,"author":{"gitId":"wcwy"},"content":"     * @param parameterInput The extracted part of user input after the command entered.","lastModifiedDate":"2022-09-19"},{"lineNumber":34,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException Exception triggered on invalid LocalDate format.","lastModifiedDate":"2022-09-19"},{"lineNumber":35,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":36,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":37,"author":{"gitId":"wcwy"},"content":"    public void checkAndSetParameters(String parameterInput) throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":38,"author":{"gitId":"wcwy"},"content":"        targetDate \u003d parser.parse(parameterInput);","lastModifiedDate":"2022-09-19"},{"lineNumber":39,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":40,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":41,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":42,"author":{"gitId":"wcwy"},"content":"    protected void checkParameters(String parameterInput) {","lastModifiedDate":"2022-09-18"},{"lineNumber":43,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":44,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":45,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":46,"author":{"gitId":"wcwy"},"content":"    protected void setParameters(String parameterInput) throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":47,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":48,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":49,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":50,"author":{"gitId":"wcwy"},"content":"     * Filter the current task list to receive a temporary task list","lastModifiedDate":"2022-09-19"},{"lineNumber":51,"author":{"gitId":"wcwy"},"content":"     * containing the tasks that the date matches with the date requested by user.","lastModifiedDate":"2022-09-19"},{"lineNumber":52,"author":{"gitId":"wcwy"},"content":"     * \u003cp\u003e","lastModifiedDate":"2022-09-19"},{"lineNumber":53,"author":{"gitId":"wcwy"},"content":"     * Then, get all the filtered tasks from the task lists into a formatted output.","lastModifiedDate":"2022-09-19"},{"lineNumber":54,"author":{"gitId":"wcwy"},"content":"     * Display the received formatted output to the user.","lastModifiedDate":"2022-09-19"},{"lineNumber":55,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":56,"author":{"gitId":"wcwy"},"content":"     * @param taskList List of tasks stored in current execution.","lastModifiedDate":"2022-09-19"},{"lineNumber":57,"author":{"gitId":"wcwy"},"content":"     * @param ui       User interface to display messages.","lastModifiedDate":"2022-09-19"},{"lineNumber":58,"author":{"gitId":"wcwy"},"content":"     * @param storage  File storage to read, append or rewrite file.","lastModifiedDate":"2022-09-19"},{"lineNumber":59,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException","lastModifiedDate":"2022-09-19"},{"lineNumber":60,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":61,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":62,"author":{"gitId":"wcwy"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":63,"author":{"gitId":"wcwy"},"content":"        TaskList tempTaskList \u003d taskList.filterTasks(targetDate);","lastModifiedDate":"2022-09-18"},{"lineNumber":64,"author":{"gitId":"wcwy"},"content":"        String listContent \u003d tempTaskList.listTasks();","lastModifiedDate":"2022-09-18"},{"lineNumber":65,"author":{"gitId":"wcwy"},"content":"        ui.displayListingMessage(listContent);","lastModifiedDate":"2022-09-18"},{"lineNumber":66,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":67,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-09-18"}],"authorContributionMap":{"wcwy":67}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.command;","lastModifiedDate":"2022-09-18"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"import duke.data.TaskList;","lastModifiedDate":"2022-09-18"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-09-18"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-09-18"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-19"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eFindCommand\u003c/code\u003e is the command that list all the tasks in the task list","lastModifiedDate":"2022-09-19"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":" * that the description of the task matches with the requested query.","lastModifiedDate":"2022-09-19"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-19"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2022-09-18"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":"    public static final String COMMAND_WORD \u003d \"FIND\";","lastModifiedDate":"2022-09-18"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"    private String query;","lastModifiedDate":"2022-09-18"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":"    public FindCommand() {","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":"        super();","lastModifiedDate":"2022-09-18"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":19,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":20,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":21,"author":{"gitId":"wcwy"},"content":"     * Store the query to the user input received.","lastModifiedDate":"2022-09-19"},{"lineNumber":22,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":23,"author":{"gitId":"wcwy"},"content":"     * @param parameterInput The extracted part of user input after the command entered.","lastModifiedDate":"2022-09-19"},{"lineNumber":24,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException Unused.","lastModifiedDate":"2022-09-19"},{"lineNumber":25,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":26,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":27,"author":{"gitId":"wcwy"},"content":"    public void checkAndSetParameters(String parameterInput) throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":28,"author":{"gitId":"wcwy"},"content":"        checkParameters(parameterInput);","lastModifiedDate":"2022-09-18"},{"lineNumber":29,"author":{"gitId":"wcwy"},"content":"        setParameters(parameterInput);","lastModifiedDate":"2022-09-18"},{"lineNumber":30,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":31,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":32,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":33,"author":{"gitId":"wcwy"},"content":"    protected void checkParameters(String parameterInput) {","lastModifiedDate":"2022-09-18"},{"lineNumber":34,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":35,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":36,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":37,"author":{"gitId":"wcwy"},"content":"    protected void setParameters(String parameterInput) {","lastModifiedDate":"2022-09-18"},{"lineNumber":38,"author":{"gitId":"wcwy"},"content":"        query \u003d parameterInput;","lastModifiedDate":"2022-09-18"},{"lineNumber":39,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":40,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":41,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":42,"author":{"gitId":"wcwy"},"content":"     * Search through the current task list to receive a temporary task list","lastModifiedDate":"2022-09-19"},{"lineNumber":43,"author":{"gitId":"wcwy"},"content":"     * containing the tasks that the description contains the query requested by user.","lastModifiedDate":"2022-09-19"},{"lineNumber":44,"author":{"gitId":"wcwy"},"content":"     * \u003cp\u003e","lastModifiedDate":"2022-09-19"},{"lineNumber":45,"author":{"gitId":"wcwy"},"content":"     * Then, get all the found tasks from the task lists into a formatted output.","lastModifiedDate":"2022-09-19"},{"lineNumber":46,"author":{"gitId":"wcwy"},"content":"     * Display the received formatted output to the user.","lastModifiedDate":"2022-09-19"},{"lineNumber":47,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":48,"author":{"gitId":"wcwy"},"content":"     * @param taskList List of tasks stored in current execution.","lastModifiedDate":"2022-09-19"},{"lineNumber":49,"author":{"gitId":"wcwy"},"content":"     * @param ui       User interface to display messages.","lastModifiedDate":"2022-09-19"},{"lineNumber":50,"author":{"gitId":"wcwy"},"content":"     * @param storage  File storage to read, append or rewrite file.","lastModifiedDate":"2022-09-19"},{"lineNumber":51,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException","lastModifiedDate":"2022-09-19"},{"lineNumber":52,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":53,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":54,"author":{"gitId":"wcwy"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":55,"author":{"gitId":"wcwy"},"content":"        TaskList tempTaskList \u003d taskList.findTasks(query);","lastModifiedDate":"2022-09-18"},{"lineNumber":56,"author":{"gitId":"wcwy"},"content":"        String listContent \u003d tempTaskList.listTasks();","lastModifiedDate":"2022-09-18"},{"lineNumber":57,"author":{"gitId":"wcwy"},"content":"        ui.displayListingMessage(listContent);","lastModifiedDate":"2022-09-18"},{"lineNumber":58,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":59,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-09-18"}],"authorContributionMap":{"wcwy":59}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.command;","lastModifiedDate":"2022-09-18"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"import duke.data.TaskList;","lastModifiedDate":"2022-09-18"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-09-18"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-18"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eListCommand\u003c/code\u003e is the command that list all the tasks in the task list.","lastModifiedDate":"2022-09-18"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-18"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2022-09-18"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":"    public static final String COMMAND_WORD \u003d \"LIST\";","lastModifiedDate":"2022-09-18"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":"    public ListCommand() {","lastModifiedDate":"2022-09-18"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"        super();","lastModifiedDate":"2022-09-18"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":"    public void checkAndSetParameters(String parameterInput) {","lastModifiedDate":"2022-09-18"},{"lineNumber":19,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":20,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":21,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":22,"author":{"gitId":"wcwy"},"content":"    protected void checkParameters(String parameterInput) {","lastModifiedDate":"2022-09-18"},{"lineNumber":23,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":24,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":25,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":26,"author":{"gitId":"wcwy"},"content":"    protected void setParameters(String parameterInput) {","lastModifiedDate":"2022-09-18"},{"lineNumber":27,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":28,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":29,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":30,"author":{"gitId":"wcwy"},"content":"     * Get all the tasks from the task lists in a formatted output.","lastModifiedDate":"2022-09-18"},{"lineNumber":31,"author":{"gitId":"wcwy"},"content":"     * Display the received formatted output to the user.","lastModifiedDate":"2022-09-18"},{"lineNumber":32,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-18"},{"lineNumber":33,"author":{"gitId":"wcwy"},"content":"     * @param taskList List of tasks stored in current execution.","lastModifiedDate":"2022-09-18"},{"lineNumber":34,"author":{"gitId":"wcwy"},"content":"     * @param ui       User interface to display messages.","lastModifiedDate":"2022-09-18"},{"lineNumber":35,"author":{"gitId":"wcwy"},"content":"     * @param storage  File storage to read, append or rewrite file.","lastModifiedDate":"2022-09-18"},{"lineNumber":36,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":37,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":38,"author":{"gitId":"wcwy"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2022-09-18"},{"lineNumber":39,"author":{"gitId":"wcwy"},"content":"        String listContent \u003d taskList.listTasks();","lastModifiedDate":"2022-09-18"},{"lineNumber":40,"author":{"gitId":"wcwy"},"content":"        ui.displayListingMessage(listContent);","lastModifiedDate":"2022-09-18"},{"lineNumber":41,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":42,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-09-18"}],"authorContributionMap":{"wcwy":42}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.command;","lastModifiedDate":"2022-09-18"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"import duke.data.TaskList;","lastModifiedDate":"2022-09-18"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":"import duke.data.task.Task;","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-09-18"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-09-18"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-09-18"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-18"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eMarkCommand\u003c/code\u003e is the command that marks a task as done based on an index given.","lastModifiedDate":"2022-09-18"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-18"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":"public class MarkCommand extends ModifyCommand {","lastModifiedDate":"2022-09-18"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":"    public static final String COMMAND_WORD \u003d \"MARK\";","lastModifiedDate":"2022-09-18"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"    private static final boolean IS_MARK_METHOD \u003d true;","lastModifiedDate":"2022-09-18"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":"    public MarkCommand() {","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":"        super();","lastModifiedDate":"2022-09-18"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":19,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":20,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":21,"author":{"gitId":"wcwy"},"content":"     * Check that the task index is within the valid range of task list.","lastModifiedDate":"2022-09-18"},{"lineNumber":22,"author":{"gitId":"wcwy"},"content":"     * Mark the task in the task list as done.","lastModifiedDate":"2022-09-18"},{"lineNumber":23,"author":{"gitId":"wcwy"},"content":"     * Display a mark as done successful message to user.","lastModifiedDate":"2022-09-18"},{"lineNumber":24,"author":{"gitId":"wcwy"},"content":"     * Rewrite the file storage based on new task list.","lastModifiedDate":"2022-09-18"},{"lineNumber":25,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-18"},{"lineNumber":26,"author":{"gitId":"wcwy"},"content":"     * @param taskList List of tasks stored in current execution.","lastModifiedDate":"2022-09-18"},{"lineNumber":27,"author":{"gitId":"wcwy"},"content":"     * @param ui       User interface to display messages.","lastModifiedDate":"2022-09-18"},{"lineNumber":28,"author":{"gitId":"wcwy"},"content":"     * @param storage  File storage to read, append or rewrite file.","lastModifiedDate":"2022-09-18"},{"lineNumber":29,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException Exception triggered on invalid user input or erroneous file operation.","lastModifiedDate":"2022-09-18"},{"lineNumber":30,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":31,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":32,"author":{"gitId":"wcwy"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":33,"author":{"gitId":"wcwy"},"content":"        checkTaskIndexRange(taskIndex, taskList.getSize());","lastModifiedDate":"2022-09-18"},{"lineNumber":34,"author":{"gitId":"wcwy"},"content":"        Task task \u003d taskList.markTask(taskIndex);","lastModifiedDate":"2022-09-18"},{"lineNumber":35,"author":{"gitId":"wcwy"},"content":"        ui.displayMarkOrUnmarkMessage(task.getTaskName(), IS_MARK_METHOD);","lastModifiedDate":"2022-09-18"},{"lineNumber":36,"author":{"gitId":"wcwy"},"content":"        storage.rewriteDukeFile(taskList);","lastModifiedDate":"2022-09-18"},{"lineNumber":37,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":38,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-09-18"}],"authorContributionMap":{"wcwy":38}},{"path":"src/main/java/duke/command/ModifyCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.command;","lastModifiedDate":"2022-09-18"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"import duke.data.TaskList;","lastModifiedDate":"2022-09-18"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":"import duke.exception.InvalidIndexException;","lastModifiedDate":"2022-09-18"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-09-18"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-09-18"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":"import static duke.common.Constants.MAX_TASK_STRING_LENGTH;","lastModifiedDate":"2022-09-18"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-18"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eModifyCommand\u003c/code\u003e is the abstract base class for the commands that modify a specific requested task.","lastModifiedDate":"2022-09-18"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":" * \u003cp\u003e","lastModifiedDate":"2022-09-18"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":" * Extended by \u003ccode\u003eDeleteCommand\u003c/code\u003e, \u003ccode\u003eMarkCommand\u003c/code\u003e and \u003ccode\u003eUnmarkCommand\u003c/code\u003e.","lastModifiedDate":"2022-09-18"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":"public abstract class ModifyCommand extends Command {","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":"    public static String COMMAND_WORD;","lastModifiedDate":"2022-09-18"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":"    // One-based index of a task in the task list.","lastModifiedDate":"2022-09-18"},{"lineNumber":19,"author":{"gitId":"wcwy"},"content":"    protected int taskIndex;","lastModifiedDate":"2022-09-18"},{"lineNumber":20,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":21,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":22,"author":{"gitId":"wcwy"},"content":"     * Constructor for \u003ccode\u003eModifyCommand\u003c/code\u003e","lastModifiedDate":"2022-09-18"},{"lineNumber":23,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":24,"author":{"gitId":"wcwy"},"content":"    public ModifyCommand() {","lastModifiedDate":"2022-09-18"},{"lineNumber":25,"author":{"gitId":"wcwy"},"content":"        super();","lastModifiedDate":"2022-09-18"},{"lineNumber":26,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":27,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":28,"author":{"gitId":"wcwy"},"content":"    public abstract void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException;","lastModifiedDate":"2022-09-18"},{"lineNumber":29,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":30,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":31,"author":{"gitId":"wcwy"},"content":"     * Check the validity of user input and set the one-based task index.","lastModifiedDate":"2022-09-18"},{"lineNumber":32,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-18"},{"lineNumber":33,"author":{"gitId":"wcwy"},"content":"     * @param parameterInput The extracted part of user input after the command entered.","lastModifiedDate":"2022-09-18"},{"lineNumber":34,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException Exception triggered on invalid task index.","lastModifiedDate":"2022-09-18"},{"lineNumber":35,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":36,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":37,"author":{"gitId":"wcwy"},"content":"    public void checkAndSetParameters(String parameterInput) throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":38,"author":{"gitId":"wcwy"},"content":"        checkParameters(parameterInput);","lastModifiedDate":"2022-09-18"},{"lineNumber":39,"author":{"gitId":"wcwy"},"content":"        setParameters(parameterInput);","lastModifiedDate":"2022-09-18"},{"lineNumber":40,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":41,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":42,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":43,"author":{"gitId":"wcwy"},"content":"     * Check that user input contains a valid task index.","lastModifiedDate":"2022-09-18"},{"lineNumber":44,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-18"},{"lineNumber":45,"author":{"gitId":"wcwy"},"content":"     * @param parameterInput The extracted part of user input after the command entered.","lastModifiedDate":"2022-09-18"},{"lineNumber":46,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException Exception triggered on invalid task index.","lastModifiedDate":"2022-09-18"},{"lineNumber":47,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":48,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":49,"author":{"gitId":"wcwy"},"content":"    protected void checkParameters(String parameterInput) throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":50,"author":{"gitId":"wcwy"},"content":"        checkTaskIndexInputFormat(parameterInput);","lastModifiedDate":"2022-09-18"},{"lineNumber":51,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":52,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":53,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":54,"author":{"gitId":"wcwy"},"content":"     * Cast the one-based task index into integer and stores it.","lastModifiedDate":"2022-09-18"},{"lineNumber":55,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-18"},{"lineNumber":56,"author":{"gitId":"wcwy"},"content":"     * @param parameterInput The extracted part of user input after the command entered.","lastModifiedDate":"2022-09-18"},{"lineNumber":57,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":58,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":59,"author":{"gitId":"wcwy"},"content":"    protected void setParameters(String parameterInput) {","lastModifiedDate":"2022-09-18"},{"lineNumber":60,"author":{"gitId":"wcwy"},"content":"        taskIndex \u003d Integer.parseInt(parameterInput);","lastModifiedDate":"2022-09-18"},{"lineNumber":61,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":62,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":63,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":64,"author":{"gitId":"wcwy"},"content":"     * Check if the user input is a string parsable to integer.","lastModifiedDate":"2022-09-18"},{"lineNumber":65,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-18"},{"lineNumber":66,"author":{"gitId":"wcwy"},"content":"     * @param parameterInput The extracted part of user input after the command entered.","lastModifiedDate":"2022-09-18"},{"lineNumber":67,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException Exception triggered on invalid task index.","lastModifiedDate":"2022-09-18"},{"lineNumber":68,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":69,"author":{"gitId":"wcwy"},"content":"    protected void checkTaskIndexInputFormat(String parameterInput) throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":70,"author":{"gitId":"wcwy"},"content":"        // Check if the string only contains digits","lastModifiedDate":"2022-09-18"},{"lineNumber":71,"author":{"gitId":"wcwy"},"content":"        if (!parameterInput.matches(\"^\\\\d+$\")) {","lastModifiedDate":"2022-09-18"},{"lineNumber":72,"author":{"gitId":"wcwy"},"content":"            throw new InvalidIndexException();","lastModifiedDate":"2022-09-18"},{"lineNumber":73,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":74,"author":{"gitId":"wcwy"},"content":"        // Check that the index will not exceed 1000000000","lastModifiedDate":"2022-09-18"},{"lineNumber":75,"author":{"gitId":"wcwy"},"content":"        if (parameterInput.length() \u003e MAX_TASK_STRING_LENGTH) {","lastModifiedDate":"2022-09-18"},{"lineNumber":76,"author":{"gitId":"wcwy"},"content":"            throw new InvalidIndexException();","lastModifiedDate":"2022-09-18"},{"lineNumber":77,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":78,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":79,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":80,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":81,"author":{"gitId":"wcwy"},"content":"     * Check if the task index is within the valid range of task list","lastModifiedDate":"2022-09-18"},{"lineNumber":82,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-18"},{"lineNumber":83,"author":{"gitId":"wcwy"},"content":"     * @param taskIndex    One-based task index","lastModifiedDate":"2022-09-18"},{"lineNumber":84,"author":{"gitId":"wcwy"},"content":"     * @param taskListSize The size of the task list","lastModifiedDate":"2022-09-18"},{"lineNumber":85,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException Exception triggered on invalid user input.","lastModifiedDate":"2022-09-18"},{"lineNumber":86,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":87,"author":{"gitId":"wcwy"},"content":"    protected void checkTaskIndexRange(int taskIndex, int taskListSize) throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":88,"author":{"gitId":"wcwy"},"content":"        if (taskIndex \u003c\u003d 0 || taskIndex \u003e taskListSize) {","lastModifiedDate":"2022-09-18"},{"lineNumber":89,"author":{"gitId":"wcwy"},"content":"            // Out-of-bound task index","lastModifiedDate":"2022-09-18"},{"lineNumber":90,"author":{"gitId":"wcwy"},"content":"            throw new InvalidIndexException();","lastModifiedDate":"2022-09-18"},{"lineNumber":91,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":92,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":93,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-09-18"}],"authorContributionMap":{"wcwy":93}},{"path":"src/main/java/duke/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.command;","lastModifiedDate":"2022-09-18"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"import duke.data.TaskList;","lastModifiedDate":"2022-09-18"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":"import duke.data.task.Task;","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-09-18"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":"import duke.exception.TodoMissingDescriptionException;","lastModifiedDate":"2022-09-18"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-09-18"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-09-18"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-18"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eTodoCommand\u003c/code\u003e is the command thatadds a to-do task into the task list.","lastModifiedDate":"2022-09-18"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-18"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":"public class TodoCommand extends AddCommand {","lastModifiedDate":"2022-09-18"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"    public static final String COMMAND_WORD \u003d \"TODO\";","lastModifiedDate":"2022-09-18"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":"    public TodoCommand() {","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":"        super();","lastModifiedDate":"2022-09-18"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":19,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":20,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":21,"author":{"gitId":"wcwy"},"content":"     * Check the validity of user input.","lastModifiedDate":"2022-09-18"},{"lineNumber":22,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-18"},{"lineNumber":23,"author":{"gitId":"wcwy"},"content":"     * @param parameterInput The extracted part of user input after the command entered.","lastModifiedDate":"2022-09-18"},{"lineNumber":24,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException Exception triggered on invalid user input.","lastModifiedDate":"2022-09-18"},{"lineNumber":25,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":26,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":27,"author":{"gitId":"wcwy"},"content":"    public void checkAndSetParameters(String parameterInput) throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":28,"author":{"gitId":"wcwy"},"content":"        checkParameters(parameterInput);","lastModifiedDate":"2022-09-18"},{"lineNumber":29,"author":{"gitId":"wcwy"},"content":"        setParameters(parameterInput);","lastModifiedDate":"2022-09-18"},{"lineNumber":30,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":31,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":32,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":33,"author":{"gitId":"wcwy"},"content":"     * Check that user input contains a description.","lastModifiedDate":"2022-09-18"},{"lineNumber":34,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-18"},{"lineNumber":35,"author":{"gitId":"wcwy"},"content":"     * @param parameterInput The extracted part of user input after the command entered.","lastModifiedDate":"2022-09-18"},{"lineNumber":36,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException Exception triggered on invalid user input.","lastModifiedDate":"2022-09-18"},{"lineNumber":37,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":38,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":39,"author":{"gitId":"wcwy"},"content":"    protected void checkParameters(String parameterInput) throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":40,"author":{"gitId":"wcwy"},"content":"        if (!containsTaskDescription(parameterInput, \"\")) {","lastModifiedDate":"2022-09-18"},{"lineNumber":41,"author":{"gitId":"wcwy"},"content":"            throw new TodoMissingDescriptionException();","lastModifiedDate":"2022-09-18"},{"lineNumber":42,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":43,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":44,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":45,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":46,"author":{"gitId":"wcwy"},"content":"     * Store the task description.","lastModifiedDate":"2022-09-18"},{"lineNumber":47,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-18"},{"lineNumber":48,"author":{"gitId":"wcwy"},"content":"     * @param parameterInput The extracted part of user input after the command entered.","lastModifiedDate":"2022-09-18"},{"lineNumber":49,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":50,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":51,"author":{"gitId":"wcwy"},"content":"    protected void setParameters(String parameterInput) {","lastModifiedDate":"2022-09-18"},{"lineNumber":52,"author":{"gitId":"wcwy"},"content":"        super.taskName \u003d parameterInput;","lastModifiedDate":"2022-09-18"},{"lineNumber":53,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":54,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":55,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":56,"author":{"gitId":"wcwy"},"content":"     * Create a to-do task and add it to the task list.","lastModifiedDate":"2022-09-18"},{"lineNumber":57,"author":{"gitId":"wcwy"},"content":"     * Display an addition successful message to user.","lastModifiedDate":"2022-09-18"},{"lineNumber":58,"author":{"gitId":"wcwy"},"content":"     * Append the to-do task to the file storage.","lastModifiedDate":"2022-09-18"},{"lineNumber":59,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-18"},{"lineNumber":60,"author":{"gitId":"wcwy"},"content":"     * @param taskList List of tasks stored in current execution.","lastModifiedDate":"2022-09-18"},{"lineNumber":61,"author":{"gitId":"wcwy"},"content":"     * @param ui       User interface to display messages.","lastModifiedDate":"2022-09-18"},{"lineNumber":62,"author":{"gitId":"wcwy"},"content":"     * @param storage  File storage to read, append or rewrite file.","lastModifiedDate":"2022-09-18"},{"lineNumber":63,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException Exception triggered on erroneous file operation.","lastModifiedDate":"2022-09-18"},{"lineNumber":64,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":65,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":66,"author":{"gitId":"wcwy"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":67,"author":{"gitId":"wcwy"},"content":"        Task task \u003d taskList.addTodo(super.taskName);","lastModifiedDate":"2022-09-18"},{"lineNumber":68,"author":{"gitId":"wcwy"},"content":"        ui.displayTaskAdditionMessage(task.getTaskFullDetails(), taskList.getSize());","lastModifiedDate":"2022-09-18"},{"lineNumber":69,"author":{"gitId":"wcwy"},"content":"        storage.appendDukeFile(taskList);","lastModifiedDate":"2022-09-18"},{"lineNumber":70,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":71,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-09-18"}],"authorContributionMap":{"wcwy":71}},{"path":"src/main/java/duke/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.command;","lastModifiedDate":"2022-09-18"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"import duke.data.TaskList;","lastModifiedDate":"2022-09-18"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":"import duke.data.task.Task;","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-09-18"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-09-18"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-09-18"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-18"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eUnmarkCommand\u003c/code\u003e is the command that marks a task as not done based on an index given.","lastModifiedDate":"2022-09-18"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-18"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":"public class UnmarkCommand extends ModifyCommand {","lastModifiedDate":"2022-09-18"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":"    public static final String COMMAND_WORD \u003d \"UNMARK\";","lastModifiedDate":"2022-09-18"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"    private static final boolean IS_UNMARK_METHOD \u003d false;","lastModifiedDate":"2022-09-18"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":"    public UnmarkCommand() {","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":"        super();","lastModifiedDate":"2022-09-18"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":19,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":20,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-18"},{"lineNumber":21,"author":{"gitId":"wcwy"},"content":"     * Check that the task index is within the valid range of task list.","lastModifiedDate":"2022-09-18"},{"lineNumber":22,"author":{"gitId":"wcwy"},"content":"     * Mark the task in the task list as not done.","lastModifiedDate":"2022-09-18"},{"lineNumber":23,"author":{"gitId":"wcwy"},"content":"     * Display a mark as not done successful message to user.","lastModifiedDate":"2022-09-18"},{"lineNumber":24,"author":{"gitId":"wcwy"},"content":"     * Rewrite the file storage based on new task list.","lastModifiedDate":"2022-09-18"},{"lineNumber":25,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-18"},{"lineNumber":26,"author":{"gitId":"wcwy"},"content":"     * @param taskList List of tasks stored in current execution.","lastModifiedDate":"2022-09-18"},{"lineNumber":27,"author":{"gitId":"wcwy"},"content":"     * @param ui       User interface to display messages.","lastModifiedDate":"2022-09-18"},{"lineNumber":28,"author":{"gitId":"wcwy"},"content":"     * @param storage  File storage to read, append or rewrite file.","lastModifiedDate":"2022-09-18"},{"lineNumber":29,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException Exception triggered on invalid user input or erroneous file operation.","lastModifiedDate":"2022-09-18"},{"lineNumber":30,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-18"},{"lineNumber":31,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":32,"author":{"gitId":"wcwy"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":33,"author":{"gitId":"wcwy"},"content":"        checkTaskIndexRange(taskIndex, taskList.getSize());","lastModifiedDate":"2022-09-18"},{"lineNumber":34,"author":{"gitId":"wcwy"},"content":"        Task task \u003d taskList.unmarkTask(taskIndex);","lastModifiedDate":"2022-09-18"},{"lineNumber":35,"author":{"gitId":"wcwy"},"content":"        ui.displayMarkOrUnmarkMessage(task.getTaskName(), IS_UNMARK_METHOD);","lastModifiedDate":"2022-09-18"},{"lineNumber":36,"author":{"gitId":"wcwy"},"content":"        storage.rewriteDukeFile(taskList);","lastModifiedDate":"2022-09-18"},{"lineNumber":37,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":38,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-09-18"}],"authorContributionMap":{"wcwy":38}},{"path":"src/main/java/duke/common/Constants.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.common;","lastModifiedDate":"2022-09-18"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"public class Constants {","lastModifiedDate":"2022-09-18"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":"    // The index of task list will not exceed 1000000000","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":"    public static final int MAX_TASK_STRING_LENGTH \u003d 9;","lastModifiedDate":"2022-09-18"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":"    // Datetime format example: 18/09/2022","lastModifiedDate":"2022-09-18"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"    public static final String DATE_INPUT_PATTERN_1 \u003d \"dd/MM/yyyy\";","lastModifiedDate":"2022-09-18"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":"    // Datetime format example: 2022-09-18","lastModifiedDate":"2022-09-18"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":"    public static final String DATE_INPUT_PATTERN_2 \u003d \"yyyy-MM-dd\";","lastModifiedDate":"2022-09-18"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":"    // Datetime format example: Sep 18 2022","lastModifiedDate":"2022-09-19"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":"    public static final String DATE_INPUT_PATTERN_3 \u003d \"MMM dd yyyy\";","lastModifiedDate":"2022-09-18"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":"    // Time format example: 1800","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":"    public static final String TIME_INPUT_PATTERN_1 \u003d \"HHmm\";","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":"    // Time format example: 06:00 PM","lastModifiedDate":"2022-09-18"},{"lineNumber":19,"author":{"gitId":"wcwy"},"content":"    public static final String TIME_INPUT_PATTERN_2 \u003d \"hh:mm a\";","lastModifiedDate":"2022-09-18"},{"lineNumber":20,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":21,"author":{"gitId":"wcwy"},"content":"    // Time format example: Sep 18 2022 06:00 PM","lastModifiedDate":"2022-09-19"},{"lineNumber":22,"author":{"gitId":"wcwy"},"content":"    public static final String TIME_OUTPUT_PATTERN \u003d \"MMM dd yyyy hh:mm a\";","lastModifiedDate":"2022-09-18"},{"lineNumber":23,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-09-18"}],"authorContributionMap":{"wcwy":23}},{"path":"src/main/java/duke/common/Messages.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.common;","lastModifiedDate":"2022-09-17"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-17"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-19"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eMessages\u003c/code\u003e stores all the static messages to be displayed to the users in user interface.","lastModifiedDate":"2022-09-19"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-19"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":"public class Messages {","lastModifiedDate":"2022-09-17"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"    public static final String MESSAGE_GREETING \u003d \"Hello! I\u0027m Duke\";","lastModifiedDate":"2022-09-17"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"    public static final String MESSAGE_INQUIRY \u003d \"What can I do for you?\";","lastModifiedDate":"2022-09-17"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":"    public static final String MESSAGE_TASK_LISTING_HEADER \u003d \"Here are the tasks in your list:\";","lastModifiedDate":"2022-09-17"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":"    public static final String MESSAGE_TASK_FILTERING_HEADER \u003d \"Here are the tasks based on your filter:\";","lastModifiedDate":"2022-09-18"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":"    public static final String MESSAGE_ADD_TASK_ACKNOWLEDGEMENT \u003d \"Got it. I\u0027ve added this task: \";","lastModifiedDate":"2022-09-17"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":"    public static final String MESSAGE_DELETE_TASK_ACKNOWLEDGEMENT \u003d \"Noted. I\u0027ve removed this task:\";","lastModifiedDate":"2022-09-17"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":"    public static final String MESSAGE_MARK_TASK_ACKNOWLEDGEMENT \u003d \"Nice! I\u0027ve marked this task as done:\";","lastModifiedDate":"2022-09-17"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"    public static final String MESSAGE_UNMARK_TASK_ACKNOWLEDGEMENT \u003d \"OK, I\u0027ve marked this task as not done yet:\";","lastModifiedDate":"2022-09-17"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":"    public static final String MESSAGE_FAREWELL \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2022-09-17"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-09-17"}],"authorContributionMap":{"wcwy":16}},{"path":"src/main/java/duke/data/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.data;","lastModifiedDate":"2022-09-17"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-17"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"import duke.data.task.Deadline;","lastModifiedDate":"2022-09-17"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":"import duke.data.task.Event;","lastModifiedDate":"2022-09-17"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":"import duke.data.task.Task;","lastModifiedDate":"2022-09-17"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":"import duke.data.task.Todo;","lastModifiedDate":"2022-09-17"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"import duke.exception.*;","lastModifiedDate":"2022-09-17"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"import duke.ui.Ui;","lastModifiedDate":"2022-09-17"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-17"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-09-18"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-09-18"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-09-17"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-17"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-19"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eTaskList\u003c/code\u003e is the class that stores all the tasks added into the application by users.","lastModifiedDate":"2022-09-19"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":" * Operations on the task list such as adding, listing, marking and deleting task are defined","lastModifiedDate":"2022-09-19"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":" * under this class.","lastModifiedDate":"2022-09-19"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-19"},{"lineNumber":19,"author":{"gitId":"wcwy"},"content":"public class TaskList {","lastModifiedDate":"2022-09-17"},{"lineNumber":20,"author":{"gitId":"wcwy"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2022-09-17"},{"lineNumber":21,"author":{"gitId":"wcwy"},"content":"    private Ui ui;","lastModifiedDate":"2022-09-17"},{"lineNumber":22,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-17"},{"lineNumber":23,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":24,"author":{"gitId":"wcwy"},"content":"     * Constructor of \u003ccode\u003eTaskList\u003c/code\u003e. Create a new array list for tasks and a new Ui instance.","lastModifiedDate":"2022-09-19"},{"lineNumber":25,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":26,"author":{"gitId":"wcwy"},"content":"    public TaskList() {","lastModifiedDate":"2022-09-17"},{"lineNumber":27,"author":{"gitId":"wcwy"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-09-17"},{"lineNumber":28,"author":{"gitId":"wcwy"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2022-09-17"},{"lineNumber":29,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-17"},{"lineNumber":30,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":31,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":32,"author":{"gitId":"wcwy"},"content":"     * Another constructor of \u003ccode\u003eTaskList\u003c/code\u003e. Copy the task array list of the given TaskList","lastModifiedDate":"2022-09-19"},{"lineNumber":33,"author":{"gitId":"wcwy"},"content":"     * object and store it. Also, it creates a new instance of Ui.","lastModifiedDate":"2022-09-19"},{"lineNumber":34,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":35,"author":{"gitId":"wcwy"},"content":"     * @param taskList A TaskList object","lastModifiedDate":"2022-09-19"},{"lineNumber":36,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":37,"author":{"gitId":"wcwy"},"content":"    public TaskList(TaskList taskList) {","lastModifiedDate":"2022-09-17"},{"lineNumber":38,"author":{"gitId":"wcwy"},"content":"        tasks \u003d taskList.getTasks();","lastModifiedDate":"2022-09-17"},{"lineNumber":39,"author":{"gitId":"wcwy"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2022-09-17"},{"lineNumber":40,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-17"},{"lineNumber":41,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-17"},{"lineNumber":42,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":43,"author":{"gitId":"wcwy"},"content":"     * Return the all the tasks stored in the list.","lastModifiedDate":"2022-09-19"},{"lineNumber":44,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":45,"author":{"gitId":"wcwy"},"content":"     * @return An array list storing the tasks.","lastModifiedDate":"2022-09-19"},{"lineNumber":46,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":47,"author":{"gitId":"wcwy"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2022-09-17"},{"lineNumber":48,"author":{"gitId":"wcwy"},"content":"        return tasks;","lastModifiedDate":"2022-09-17"},{"lineNumber":49,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-17"},{"lineNumber":50,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-17"},{"lineNumber":51,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":52,"author":{"gitId":"wcwy"},"content":"     * Return the number of the tasks stored in the TaskList.","lastModifiedDate":"2022-09-19"},{"lineNumber":53,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":54,"author":{"gitId":"wcwy"},"content":"     * @return The size of the array list.","lastModifiedDate":"2022-09-19"},{"lineNumber":55,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":56,"author":{"gitId":"wcwy"},"content":"    public int getSize() {","lastModifiedDate":"2022-09-18"},{"lineNumber":57,"author":{"gitId":"wcwy"},"content":"        return this.getTasks().size();","lastModifiedDate":"2022-09-18"},{"lineNumber":58,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-17"},{"lineNumber":59,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-17"},{"lineNumber":60,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":61,"author":{"gitId":"wcwy"},"content":"     * Add a to-do task into the list with a task description","lastModifiedDate":"2022-09-19"},{"lineNumber":62,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":63,"author":{"gitId":"wcwy"},"content":"     * @param taskName Description of the task.","lastModifiedDate":"2022-09-19"},{"lineNumber":64,"author":{"gitId":"wcwy"},"content":"     * @return The to-do task object added.","lastModifiedDate":"2022-09-19"},{"lineNumber":65,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":66,"author":{"gitId":"wcwy"},"content":"    public Task addTodo(String taskName) {","lastModifiedDate":"2022-09-18"},{"lineNumber":67,"author":{"gitId":"wcwy"},"content":"        Todo todo \u003d new Todo(taskName);","lastModifiedDate":"2022-09-18"},{"lineNumber":68,"author":{"gitId":"wcwy"},"content":"        tasks.add(todo);","lastModifiedDate":"2022-09-18"},{"lineNumber":69,"author":{"gitId":"wcwy"},"content":"        return todo;","lastModifiedDate":"2022-09-18"},{"lineNumber":70,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-17"},{"lineNumber":71,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":72,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":73,"author":{"gitId":"wcwy"},"content":"     * Add a deadline task into the list with a task description and deadline time","lastModifiedDate":"2022-09-19"},{"lineNumber":74,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":75,"author":{"gitId":"wcwy"},"content":"     * @param taskName     Description of the task.","lastModifiedDate":"2022-09-19"},{"lineNumber":76,"author":{"gitId":"wcwy"},"content":"     * @param deadlineTime Time before the task is to be completed.","lastModifiedDate":"2022-09-19"},{"lineNumber":77,"author":{"gitId":"wcwy"},"content":"     * @return The deadline task object added.","lastModifiedDate":"2022-09-19"},{"lineNumber":78,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":79,"author":{"gitId":"wcwy"},"content":"    public Task addDeadline(String taskName, LocalDateTime deadlineTime) {","lastModifiedDate":"2022-09-18"},{"lineNumber":80,"author":{"gitId":"wcwy"},"content":"        Deadline deadline \u003d new Deadline(taskName, deadlineTime);","lastModifiedDate":"2022-09-18"},{"lineNumber":81,"author":{"gitId":"wcwy"},"content":"        tasks.add(deadline);","lastModifiedDate":"2022-09-18"},{"lineNumber":82,"author":{"gitId":"wcwy"},"content":"        return deadline;","lastModifiedDate":"2022-09-18"},{"lineNumber":83,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-17"},{"lineNumber":84,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":85,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":86,"author":{"gitId":"wcwy"},"content":"     * Add an event task into the list with a task description and event time","lastModifiedDate":"2022-09-19"},{"lineNumber":87,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":88,"author":{"gitId":"wcwy"},"content":"     * @param taskName  Description of the task.","lastModifiedDate":"2022-09-19"},{"lineNumber":89,"author":{"gitId":"wcwy"},"content":"     * @param eventTime Time when the task should be completed.","lastModifiedDate":"2022-09-19"},{"lineNumber":90,"author":{"gitId":"wcwy"},"content":"     * @return The event task object added.","lastModifiedDate":"2022-09-19"},{"lineNumber":91,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":92,"author":{"gitId":"wcwy"},"content":"    public Task addEvent(String taskName, LocalDateTime eventTime) {","lastModifiedDate":"2022-09-18"},{"lineNumber":93,"author":{"gitId":"wcwy"},"content":"        Event event \u003d new Event(taskName, eventTime);","lastModifiedDate":"2022-09-18"},{"lineNumber":94,"author":{"gitId":"wcwy"},"content":"        tasks.add(event);","lastModifiedDate":"2022-09-18"},{"lineNumber":95,"author":{"gitId":"wcwy"},"content":"        return event;","lastModifiedDate":"2022-09-18"},{"lineNumber":96,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-17"},{"lineNumber":97,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-17"},{"lineNumber":98,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":99,"author":{"gitId":"wcwy"},"content":"     * Return all the task stored in the task list in a formatted output.","lastModifiedDate":"2022-09-19"},{"lineNumber":100,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":101,"author":{"gitId":"wcwy"},"content":"     * @return The formatted content of the array list","lastModifiedDate":"2022-09-19"},{"lineNumber":102,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":103,"author":{"gitId":"wcwy"},"content":"    public String listTasks() {","lastModifiedDate":"2022-09-18"},{"lineNumber":104,"author":{"gitId":"wcwy"},"content":"        String listContent \u003d \"\";","lastModifiedDate":"2022-09-17"},{"lineNumber":105,"author":{"gitId":"wcwy"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2022-09-17"},{"lineNumber":106,"author":{"gitId":"wcwy"},"content":"            listContent +\u003d String.format(\"%d.%s\", i + 1, tasks.get(i).getTaskFullDetails());","lastModifiedDate":"2022-09-17"},{"lineNumber":107,"author":{"gitId":"wcwy"},"content":"            listContent +\u003d System.lineSeparator();","lastModifiedDate":"2022-09-17"},{"lineNumber":108,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-17"},{"lineNumber":109,"author":{"gitId":"wcwy"},"content":"        if (listContent.equals(\"\")) {","lastModifiedDate":"2022-09-18"},{"lineNumber":110,"author":{"gitId":"wcwy"},"content":"            listContent \u003d \"No task found in the record.\";","lastModifiedDate":"2022-09-18"},{"lineNumber":111,"author":{"gitId":"wcwy"},"content":"        } else {","lastModifiedDate":"2022-09-18"},{"lineNumber":112,"author":{"gitId":"wcwy"},"content":"            listContent +\u003d \"There are a total of \" + tasks.size() + \" tasks.\";","lastModifiedDate":"2022-09-17"},{"lineNumber":113,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":114,"author":{"gitId":"wcwy"},"content":"        return listContent;","lastModifiedDate":"2022-09-18"},{"lineNumber":115,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-17"},{"lineNumber":116,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-17"},{"lineNumber":117,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":118,"author":{"gitId":"wcwy"},"content":"     * Search through the current task list to find all the tasks","lastModifiedDate":"2022-09-19"},{"lineNumber":119,"author":{"gitId":"wcwy"},"content":"     * that the description contains the string queried by user.","lastModifiedDate":"2022-09-19"},{"lineNumber":120,"author":{"gitId":"wcwy"},"content":"     * \u003cp\u003e","lastModifiedDate":"2022-09-19"},{"lineNumber":121,"author":{"gitId":"wcwy"},"content":"     * Add each task that matches the query into a temporary TaskList object","lastModifiedDate":"2022-09-19"},{"lineNumber":122,"author":{"gitId":"wcwy"},"content":"     * and return the temporary TaskList.","lastModifiedDate":"2022-09-19"},{"lineNumber":123,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":124,"author":{"gitId":"wcwy"},"content":"     * @return The TaskList object containing all tasks that the description matches with search query","lastModifiedDate":"2022-09-19"},{"lineNumber":125,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":126,"author":{"gitId":"wcwy"},"content":"    public TaskList findTasks(String query) {","lastModifiedDate":"2022-09-18"},{"lineNumber":127,"author":{"gitId":"wcwy"},"content":"        TaskList tempTaskList \u003d new TaskList();","lastModifiedDate":"2022-09-18"},{"lineNumber":128,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":129,"author":{"gitId":"wcwy"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2022-09-18"},{"lineNumber":130,"author":{"gitId":"wcwy"},"content":"            Task tempTask \u003d tasks.get(i);","lastModifiedDate":"2022-09-18"},{"lineNumber":131,"author":{"gitId":"wcwy"},"content":"            if (tempTask.getTaskName().contains(query)) {","lastModifiedDate":"2022-09-18"},{"lineNumber":132,"author":{"gitId":"wcwy"},"content":"                tempTaskList.tasks.add(tempTask);","lastModifiedDate":"2022-09-18"},{"lineNumber":133,"author":{"gitId":"wcwy"},"content":"            }","lastModifiedDate":"2022-09-18"},{"lineNumber":134,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":135,"author":{"gitId":"wcwy"},"content":"        return tempTaskList;","lastModifiedDate":"2022-09-18"},{"lineNumber":136,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":137,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":138,"author":{"gitId":"wcwy"},"content":"     * Filter the current task list to find all the deadline or event task","lastModifiedDate":"2022-09-19"},{"lineNumber":139,"author":{"gitId":"wcwy"},"content":"     * that the stored date matches with the requested date.","lastModifiedDate":"2022-09-19"},{"lineNumber":140,"author":{"gitId":"wcwy"},"content":"     * \u003cp\u003e","lastModifiedDate":"2022-09-19"},{"lineNumber":141,"author":{"gitId":"wcwy"},"content":"     * Add each task that matches the query into a temporary TaskList object","lastModifiedDate":"2022-09-19"},{"lineNumber":142,"author":{"gitId":"wcwy"},"content":"     * and return the temporary TaskList.","lastModifiedDate":"2022-09-19"},{"lineNumber":143,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":144,"author":{"gitId":"wcwy"},"content":"     * @return The TaskList object containing all tasks that the description matches with search query","lastModifiedDate":"2022-09-19"},{"lineNumber":145,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":146,"author":{"gitId":"wcwy"},"content":"    public TaskList filterTasks(LocalDate targetDate) {","lastModifiedDate":"2022-09-18"},{"lineNumber":147,"author":{"gitId":"wcwy"},"content":"        TaskList tempTaskList \u003d new TaskList();","lastModifiedDate":"2022-09-18"},{"lineNumber":148,"author":{"gitId":"wcwy"},"content":"        boolean isDeadline;","lastModifiedDate":"2022-09-18"},{"lineNumber":149,"author":{"gitId":"wcwy"},"content":"        boolean isEvent;","lastModifiedDate":"2022-09-18"},{"lineNumber":150,"author":{"gitId":"wcwy"},"content":"        boolean isValidDate \u003d false;","lastModifiedDate":"2022-09-18"},{"lineNumber":151,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":152,"author":{"gitId":"wcwy"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2022-09-18"},{"lineNumber":153,"author":{"gitId":"wcwy"},"content":"            LocalDate tempDate \u003d null;","lastModifiedDate":"2022-09-18"},{"lineNumber":154,"author":{"gitId":"wcwy"},"content":"            Task tempTask \u003d tasks.get(i);","lastModifiedDate":"2022-09-18"},{"lineNumber":155,"author":{"gitId":"wcwy"},"content":"            isDeadline \u003d tempTask instanceof Deadline;","lastModifiedDate":"2022-09-18"},{"lineNumber":156,"author":{"gitId":"wcwy"},"content":"            isEvent \u003d tempTask instanceof Event;","lastModifiedDate":"2022-09-18"},{"lineNumber":157,"author":{"gitId":"wcwy"},"content":"            if (isDeadline) {","lastModifiedDate":"2022-09-18"},{"lineNumber":158,"author":{"gitId":"wcwy"},"content":"                tempDate \u003d ((Deadline) tempTask).getDeadlineDate();","lastModifiedDate":"2022-09-18"},{"lineNumber":159,"author":{"gitId":"wcwy"},"content":"            }","lastModifiedDate":"2022-09-18"},{"lineNumber":160,"author":{"gitId":"wcwy"},"content":"            if (isEvent) {","lastModifiedDate":"2022-09-18"},{"lineNumber":161,"author":{"gitId":"wcwy"},"content":"                tempDate \u003d ((Event) tempTask).getEventDate();","lastModifiedDate":"2022-09-18"},{"lineNumber":162,"author":{"gitId":"wcwy"},"content":"            }","lastModifiedDate":"2022-09-18"},{"lineNumber":163,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":164,"author":{"gitId":"wcwy"},"content":"            isValidDate \u003d tempDate !\u003d null \u0026\u0026 tempDate.equals(targetDate);","lastModifiedDate":"2022-09-18"},{"lineNumber":165,"author":{"gitId":"wcwy"},"content":"            if (isValidDate) {","lastModifiedDate":"2022-09-18"},{"lineNumber":166,"author":{"gitId":"wcwy"},"content":"                tempTaskList.tasks.add(tempTask);","lastModifiedDate":"2022-09-18"},{"lineNumber":167,"author":{"gitId":"wcwy"},"content":"            }","lastModifiedDate":"2022-09-18"},{"lineNumber":168,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":169,"author":{"gitId":"wcwy"},"content":"        return tempTaskList;","lastModifiedDate":"2022-09-18"},{"lineNumber":170,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":171,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":172,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":173,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":174,"author":{"gitId":"wcwy"},"content":"     * Delete the task requested from the task list.","lastModifiedDate":"2022-09-19"},{"lineNumber":175,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":176,"author":{"gitId":"wcwy"},"content":"     * @param taskIndex One-based task index","lastModifiedDate":"2022-09-19"},{"lineNumber":177,"author":{"gitId":"wcwy"},"content":"     * @return A string storing the description of the removed task.","lastModifiedDate":"2022-09-19"},{"lineNumber":178,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":179,"author":{"gitId":"wcwy"},"content":"    public String deleteTask(int taskIndex) {","lastModifiedDate":"2022-09-18"},{"lineNumber":180,"author":{"gitId":"wcwy"},"content":"        String taskDetail \u003d tasks.get(taskIndex - 1).getTaskFullDetails();","lastModifiedDate":"2022-09-17"},{"lineNumber":181,"author":{"gitId":"wcwy"},"content":"        tasks.remove(taskIndex - 1);","lastModifiedDate":"2022-09-17"},{"lineNumber":182,"author":{"gitId":"wcwy"},"content":"        return taskDetail;","lastModifiedDate":"2022-09-18"},{"lineNumber":183,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-17"},{"lineNumber":184,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-17"},{"lineNumber":185,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":186,"author":{"gitId":"wcwy"},"content":"     * Mark the task requested in the task list as completed.","lastModifiedDate":"2022-09-19"},{"lineNumber":187,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":188,"author":{"gitId":"wcwy"},"content":"     * @param taskIndex One-based task index","lastModifiedDate":"2022-09-19"},{"lineNumber":189,"author":{"gitId":"wcwy"},"content":"     * @return The updated task object.","lastModifiedDate":"2022-09-19"},{"lineNumber":190,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException Exception triggered on invalid taskIndex provided.","lastModifiedDate":"2022-09-19"},{"lineNumber":191,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":192,"author":{"gitId":"wcwy"},"content":"    public Task markTask(int taskIndex) throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":193,"author":{"gitId":"wcwy"},"content":"        tasks.get(taskIndex - 1).setDone(true);","lastModifiedDate":"2022-09-17"},{"lineNumber":194,"author":{"gitId":"wcwy"},"content":"        return tasks.get(taskIndex - 1);","lastModifiedDate":"2022-09-18"},{"lineNumber":195,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-17"},{"lineNumber":196,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-17"},{"lineNumber":197,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":198,"author":{"gitId":"wcwy"},"content":"     * Mark the task requested in the task list as not completed.","lastModifiedDate":"2022-09-19"},{"lineNumber":199,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":200,"author":{"gitId":"wcwy"},"content":"     * @param taskIndex One-based task index","lastModifiedDate":"2022-09-19"},{"lineNumber":201,"author":{"gitId":"wcwy"},"content":"     * @return The updated task object.","lastModifiedDate":"2022-09-19"},{"lineNumber":202,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException Exception triggered on invalid user input.","lastModifiedDate":"2022-09-19"},{"lineNumber":203,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":204,"author":{"gitId":"wcwy"},"content":"    public Task unmarkTask(int taskIndex) throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":205,"author":{"gitId":"wcwy"},"content":"        tasks.get(taskIndex - 1).setDone(false);","lastModifiedDate":"2022-09-17"},{"lineNumber":206,"author":{"gitId":"wcwy"},"content":"        return tasks.get(taskIndex - 1);","lastModifiedDate":"2022-09-18"},{"lineNumber":207,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-17"},{"lineNumber":208,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-09-17"}],"authorContributionMap":{"wcwy":208}},{"path":"src/main/java/duke/data/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.data.task;","lastModifiedDate":"2022-09-17"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-09-18"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-09-18"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"import static duke.common.Constants.TIME_OUTPUT_PATTERN;","lastModifiedDate":"2022-09-18"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-19"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eDeadline\u003c/code\u003e represents a task to be completed by a user before a specific date and time.","lastModifiedDate":"2022-09-19"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-19"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-08-27"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":"    // The date and time before the task is to be done.","lastModifiedDate":"2022-09-19"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"    private LocalDateTime deadlineTime;","lastModifiedDate":"2022-09-18"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":"     * Constructor of \u003ccode\u003eEvent\u003c/code\u003e. Stores the description and date time of the task.","lastModifiedDate":"2022-09-19"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":19,"author":{"gitId":"wcwy"},"content":"     * @param taskName     Description of the task.","lastModifiedDate":"2022-09-19"},{"lineNumber":20,"author":{"gitId":"wcwy"},"content":"     * @param deadlineTime Time before the task is to be completed.","lastModifiedDate":"2022-09-19"},{"lineNumber":21,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":22,"author":{"gitId":"wcwy"},"content":"    public Deadline(String taskName, LocalDateTime deadlineTime) {","lastModifiedDate":"2022-09-18"},{"lineNumber":23,"author":{"gitId":"wcwy"},"content":"        super(taskName);","lastModifiedDate":"2022-08-27"},{"lineNumber":24,"author":{"gitId":"wcwy"},"content":"        this.deadlineTime \u003d deadlineTime;","lastModifiedDate":"2022-08-27"},{"lineNumber":25,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":26,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":27,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":28,"author":{"gitId":"wcwy"},"content":"     * Return the time before the deadline is to be completed.","lastModifiedDate":"2022-09-19"},{"lineNumber":29,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":30,"author":{"gitId":"wcwy"},"content":"     * @return A date time value of the task.","lastModifiedDate":"2022-09-19"},{"lineNumber":31,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":32,"author":{"gitId":"wcwy"},"content":"    public String getDeadlineTime() {","lastModifiedDate":"2022-08-27"},{"lineNumber":33,"author":{"gitId":"wcwy"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(TIME_OUTPUT_PATTERN);","lastModifiedDate":"2022-09-18"},{"lineNumber":34,"author":{"gitId":"wcwy"},"content":"        return deadlineTime.format(formatter);","lastModifiedDate":"2022-09-18"},{"lineNumber":35,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":36,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":37,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":38,"author":{"gitId":"wcwy"},"content":"     * Return only the date of the time before the deadline is to be completed.","lastModifiedDate":"2022-09-19"},{"lineNumber":39,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":40,"author":{"gitId":"wcwy"},"content":"     * @return A date value of the task.","lastModifiedDate":"2022-09-19"},{"lineNumber":41,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":42,"author":{"gitId":"wcwy"},"content":"    public LocalDate getDeadlineDate() {","lastModifiedDate":"2022-09-18"},{"lineNumber":43,"author":{"gitId":"wcwy"},"content":"        LocalDate localDate \u003d deadlineTime.toLocalDate();","lastModifiedDate":"2022-09-18"},{"lineNumber":44,"author":{"gitId":"wcwy"},"content":"        return localDate;","lastModifiedDate":"2022-09-18"},{"lineNumber":45,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":46,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":47,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":48,"author":{"gitId":"wcwy"},"content":"     * Return the formatted deadline task details with task name, task completion status icon and date time.","lastModifiedDate":"2022-09-19"},{"lineNumber":49,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":50,"author":{"gitId":"wcwy"},"content":"     * @return A string containing the formatted deadline task details.","lastModifiedDate":"2022-09-19"},{"lineNumber":51,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":52,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-08-27"},{"lineNumber":53,"author":{"gitId":"wcwy"},"content":"    public String getTaskFullDetails() {","lastModifiedDate":"2022-08-27"},{"lineNumber":54,"author":{"gitId":"wcwy"},"content":"        return String.format(\"[D]%s (by: %s)\",","lastModifiedDate":"2022-08-27"},{"lineNumber":55,"author":{"gitId":"wcwy"},"content":"                super.getTaskFullDetails(), this.getDeadlineTime());","lastModifiedDate":"2022-08-27"},{"lineNumber":56,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":57,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-08-27"}],"authorContributionMap":{"wcwy":57}},{"path":"src/main/java/duke/data/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.data.task;","lastModifiedDate":"2022-09-17"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"import static duke.common.Constants.TIME_OUTPUT_PATTERN;","lastModifiedDate":"2022-09-18"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-09-18"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-09-18"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-09-18"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-19"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eEvent\u003c/code\u003e represents a task to be completed by a user at a specific date and time.","lastModifiedDate":"2022-09-19"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-19"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":"public class Event extends Task {","lastModifiedDate":"2022-08-27"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"    // The date and time when the task should be done.","lastModifiedDate":"2022-09-19"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":"    private LocalDateTime eventTime;","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":"     * Constructor of \u003ccode\u003eEvent\u003c/code\u003e. Stores the description and date time of the task.","lastModifiedDate":"2022-09-19"},{"lineNumber":19,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":20,"author":{"gitId":"wcwy"},"content":"     * @param taskName  Description of the task.","lastModifiedDate":"2022-09-19"},{"lineNumber":21,"author":{"gitId":"wcwy"},"content":"     * @param eventTime Time when the task should be completed.","lastModifiedDate":"2022-09-19"},{"lineNumber":22,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":23,"author":{"gitId":"wcwy"},"content":"    public Event(String taskName, LocalDateTime eventTime) {","lastModifiedDate":"2022-09-18"},{"lineNumber":24,"author":{"gitId":"wcwy"},"content":"        super(taskName);","lastModifiedDate":"2022-08-27"},{"lineNumber":25,"author":{"gitId":"wcwy"},"content":"        this.eventTime \u003d eventTime;","lastModifiedDate":"2022-08-27"},{"lineNumber":26,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":27,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":28,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":29,"author":{"gitId":"wcwy"},"content":"     * Return the time when the event should be completed.","lastModifiedDate":"2022-09-19"},{"lineNumber":30,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":31,"author":{"gitId":"wcwy"},"content":"     * @return A date time value of the task.","lastModifiedDate":"2022-09-19"},{"lineNumber":32,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":33,"author":{"gitId":"wcwy"},"content":"    public String getEventTime() {","lastModifiedDate":"2022-08-27"},{"lineNumber":34,"author":{"gitId":"wcwy"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(TIME_OUTPUT_PATTERN);","lastModifiedDate":"2022-09-18"},{"lineNumber":35,"author":{"gitId":"wcwy"},"content":"        return eventTime.format(formatter);","lastModifiedDate":"2022-09-18"},{"lineNumber":36,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":37,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":38,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":39,"author":{"gitId":"wcwy"},"content":"     * Return only the date of the time when the event should be completed.","lastModifiedDate":"2022-09-19"},{"lineNumber":40,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":41,"author":{"gitId":"wcwy"},"content":"     * @return A date value of the task.","lastModifiedDate":"2022-09-19"},{"lineNumber":42,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":43,"author":{"gitId":"wcwy"},"content":"    public LocalDate getEventDate() {","lastModifiedDate":"2022-09-18"},{"lineNumber":44,"author":{"gitId":"wcwy"},"content":"        LocalDate localDate \u003d eventTime.toLocalDate();","lastModifiedDate":"2022-09-18"},{"lineNumber":45,"author":{"gitId":"wcwy"},"content":"        return localDate;","lastModifiedDate":"2022-09-18"},{"lineNumber":46,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":47,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":48,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":49,"author":{"gitId":"wcwy"},"content":"     * Return the formatted event task details with task name, task completion status icon and date time.","lastModifiedDate":"2022-09-19"},{"lineNumber":50,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":51,"author":{"gitId":"wcwy"},"content":"     * @return A string containing the formatted event task details.","lastModifiedDate":"2022-09-19"},{"lineNumber":52,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":53,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-08-27"},{"lineNumber":54,"author":{"gitId":"wcwy"},"content":"    public String getTaskFullDetails() {","lastModifiedDate":"2022-08-27"},{"lineNumber":55,"author":{"gitId":"wcwy"},"content":"        return String.format(\"[E]%s (at: %s)\",","lastModifiedDate":"2022-08-27"},{"lineNumber":56,"author":{"gitId":"wcwy"},"content":"                super.getTaskFullDetails(), this.getEventTime());","lastModifiedDate":"2022-08-27"},{"lineNumber":57,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":58,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-08-27"}],"authorContributionMap":{"wcwy":58}},{"path":"src/main/java/duke/data/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.data.task;","lastModifiedDate":"2022-09-17"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-19"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eTask\u003c/code\u003e is the abstract base class for every type of tasks in the application.","lastModifiedDate":"2022-09-19"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-19"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":"public class Task {","lastModifiedDate":"2022-08-24"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"    // The description of the task.","lastModifiedDate":"2022-09-19"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"    private String taskName;","lastModifiedDate":"2022-08-24"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":"    // The completion status of the task.","lastModifiedDate":"2022-09-19"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":"    private boolean isDone;","lastModifiedDate":"2022-08-24"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":"     * Constructor of \u003ccode\u003eTask\u003c/code\u003e. The isDone boolean is set to false by default.","lastModifiedDate":"2022-09-19"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":"     * @param taskName Description of the task.","lastModifiedDate":"2022-09-19"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":"    public Task(String taskName) {","lastModifiedDate":"2022-08-24"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2022-08-24"},{"lineNumber":19,"author":{"gitId":"wcwy"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-08-24"},{"lineNumber":20,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-08-24"},{"lineNumber":21,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":22,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":23,"author":{"gitId":"wcwy"},"content":"     * Get the task description.","lastModifiedDate":"2022-09-19"},{"lineNumber":24,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":25,"author":{"gitId":"wcwy"},"content":"     * @return","lastModifiedDate":"2022-09-19"},{"lineNumber":26,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":27,"author":{"gitId":"wcwy"},"content":"    public String getTaskName() {","lastModifiedDate":"2022-08-24"},{"lineNumber":28,"author":{"gitId":"wcwy"},"content":"        return taskName;","lastModifiedDate":"2022-08-24"},{"lineNumber":29,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-08-24"},{"lineNumber":30,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":31,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":32,"author":{"gitId":"wcwy"},"content":"     * Get the completion status of task.","lastModifiedDate":"2022-09-19"},{"lineNumber":33,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":34,"author":{"gitId":"wcwy"},"content":"     * @return A boolean value to represent whether a task is completed.","lastModifiedDate":"2022-09-19"},{"lineNumber":35,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":36,"author":{"gitId":"wcwy"},"content":"    public boolean isDone() {","lastModifiedDate":"2022-08-24"},{"lineNumber":37,"author":{"gitId":"wcwy"},"content":"        return isDone;","lastModifiedDate":"2022-08-24"},{"lineNumber":38,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-08-24"},{"lineNumber":39,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":40,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":41,"author":{"gitId":"wcwy"},"content":"     * Set the completion status of a task.","lastModifiedDate":"2022-09-19"},{"lineNumber":42,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":43,"author":{"gitId":"wcwy"},"content":"     * @param done A boolean value to represent whether a task is completed.","lastModifiedDate":"2022-09-19"},{"lineNumber":44,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":45,"author":{"gitId":"wcwy"},"content":"    public void setDone(boolean done) {","lastModifiedDate":"2022-08-24"},{"lineNumber":46,"author":{"gitId":"wcwy"},"content":"        isDone \u003d done;","lastModifiedDate":"2022-08-24"},{"lineNumber":47,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-08-24"},{"lineNumber":48,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-08-24"},{"lineNumber":49,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":50,"author":{"gitId":"wcwy"},"content":"     * Return the completion status of the task as an icon.","lastModifiedDate":"2022-09-19"},{"lineNumber":51,"author":{"gitId":"wcwy"},"content":"     * \"X\" represents completed/done.","lastModifiedDate":"2022-09-19"},{"lineNumber":52,"author":{"gitId":"wcwy"},"content":"     * \" \" represents not completed/not done.","lastModifiedDate":"2022-09-19"},{"lineNumber":53,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":54,"author":{"gitId":"wcwy"},"content":"     * @return A string icon of the task\u0027s completion status.","lastModifiedDate":"2022-09-19"},{"lineNumber":55,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":56,"author":{"gitId":"wcwy"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2022-08-24"},{"lineNumber":57,"author":{"gitId":"wcwy"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2022-08-24"},{"lineNumber":58,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-08-24"},{"lineNumber":59,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":60,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":61,"author":{"gitId":"wcwy"},"content":"     * Return the formatted task details with task name and task completion status icon.","lastModifiedDate":"2022-09-19"},{"lineNumber":62,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":63,"author":{"gitId":"wcwy"},"content":"     * @return A string containing the formatted task details.","lastModifiedDate":"2022-09-19"},{"lineNumber":64,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":65,"author":{"gitId":"wcwy"},"content":"    public String getTaskFullDetails() {","lastModifiedDate":"2022-08-27"},{"lineNumber":66,"author":{"gitId":"wcwy"},"content":"        return String.format(\"[%s] %s\", getStatusIcon(), getTaskName());","lastModifiedDate":"2022-08-27"},{"lineNumber":67,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":68,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-08-24"}],"authorContributionMap":{"wcwy":68}},{"path":"src/main/java/duke/data/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.data.task;","lastModifiedDate":"2022-09-17"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-19"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eTodo\u003c/code\u003e represents a basic task to be completed by a user.","lastModifiedDate":"2022-09-19"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-19"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":"public class Todo extends Task {","lastModifiedDate":"2022-08-27"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"     * Constructor of \u003ccode\u003eTodo\u003c/code\u003e. Stores the description of the task.","lastModifiedDate":"2022-09-19"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":"     * @param taskName Description of the task.","lastModifiedDate":"2022-09-19"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":"    public Todo(String taskName) {","lastModifiedDate":"2022-08-27"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":"        super(taskName);","lastModifiedDate":"2022-08-27"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-08-27"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":"     * Return the formatted to-do task details with task name and task completion status icon.","lastModifiedDate":"2022-09-19"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":19,"author":{"gitId":"wcwy"},"content":"     * @return A string containing the formatted to-do task details.","lastModifiedDate":"2022-09-19"},{"lineNumber":20,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":21,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-08-27"},{"lineNumber":22,"author":{"gitId":"wcwy"},"content":"    public String getTaskFullDetails() {","lastModifiedDate":"2022-08-27"},{"lineNumber":23,"author":{"gitId":"wcwy"},"content":"        return String.format(\"[T]%s\", super.getTaskFullDetails());","lastModifiedDate":"2022-08-27"},{"lineNumber":24,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-08-27"},{"lineNumber":25,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-08-27"}],"authorContributionMap":{"wcwy":25}},{"path":"src/main/java/duke/exception/DeadlineMissingDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.exception;","lastModifiedDate":"2022-09-03"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-19"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eDeadlineMissingDescriptionException\u003c/code\u003e represents the exception triggered","lastModifiedDate":"2022-09-19"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":" * when a deadline task given by the user does not contain a valid description.","lastModifiedDate":"2022-09-19"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-19"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"public class DeadlineMissingDescriptionException extends DukeException {","lastModifiedDate":"2022-09-03"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":"     * Concatenate the error message prefix and error message, and returns it.","lastModifiedDate":"2022-09-19"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":"     * @return The full error message","lastModifiedDate":"2022-09-19"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-03"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":"    public String getMessage() {","lastModifiedDate":"2022-09-03"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":"        return super.getMessagePrefix() + ErrorMessage.DEADLINE_MISSING_DESCRIPTION_ERROR_MESSAGE;","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-09-03"}],"authorContributionMap":{"wcwy":18}},{"path":"src/main/java/duke/exception/DeadlineMissingTagException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.exception;","lastModifiedDate":"2022-09-03"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-19"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eDeadlineMissingTagException\u003c/code\u003e represents the exception triggered","lastModifiedDate":"2022-09-19"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":" * when a deadline task given by the user does not contain a valid \" /by \" tag.","lastModifiedDate":"2022-09-19"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-19"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"public class DeadlineMissingTagException extends DukeException {","lastModifiedDate":"2022-09-03"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":"     * Concatenate the error message prefix and error message, and returns it.","lastModifiedDate":"2022-09-19"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":"     * @return The full error message","lastModifiedDate":"2022-09-19"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-03"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":"    public String getMessage() {","lastModifiedDate":"2022-09-03"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":"        return super.getMessagePrefix() + ErrorMessage.DEADLINE_MISSING_TAG_ERROR_MESSAGE;","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-09-03"}],"authorContributionMap":{"wcwy":18}},{"path":"src/main/java/duke/exception/DeadlineMissingTimeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.exception;","lastModifiedDate":"2022-09-03"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-19"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eDeadlineMissingTimeException\u003c/code\u003e represents the exception triggered","lastModifiedDate":"2022-09-19"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":" * when a deadline task given by the user does not contain a valid date time.","lastModifiedDate":"2022-09-19"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-19"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"public class DeadlineMissingTimeException extends DukeException {","lastModifiedDate":"2022-09-03"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":"     * Concatenate the error message prefix and error message, and returns it.","lastModifiedDate":"2022-09-19"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":"     * @return The full error message","lastModifiedDate":"2022-09-19"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-03"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":"    public String getMessage() {","lastModifiedDate":"2022-09-03"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":"        return super.getMessagePrefix() + ErrorMessage.DEADLINE_MISSING_TIME_ERROR_MESSAGE;","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-09-03"}],"authorContributionMap":{"wcwy":18}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.exception;","lastModifiedDate":"2022-09-03"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-19"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eDukeException\u003c/code\u003e is the abstract base class for every self-defined exception in the application.","lastModifiedDate":"2022-09-19"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-19"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":"public abstract class DukeException extends Exception {","lastModifiedDate":"2022-09-03"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"     * Return the error message of the exception for user interface output display.","lastModifiedDate":"2022-09-19"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":"     * @return A string storing the error message.","lastModifiedDate":"2022-09-19"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":"    public abstract String getMessage();","lastModifiedDate":"2022-09-03"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":"     * Return the prefix of the error message to be appended to the front of every error message.","lastModifiedDate":"2022-09-19"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":"     * @return A string storing the prefix of the error message.","lastModifiedDate":"2022-09-19"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":19,"author":{"gitId":"wcwy"},"content":"    public String getMessagePrefix() {","lastModifiedDate":"2022-09-03"},{"lineNumber":20,"author":{"gitId":"wcwy"},"content":"        return \" :( OOPS!!! \";","lastModifiedDate":"2022-09-18"},{"lineNumber":21,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":22,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-09-03"}],"authorContributionMap":{"wcwy":22}},{"path":"src/main/java/duke/exception/ErrorMessage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.exception;","lastModifiedDate":"2022-09-03"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-19"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eErrorMessage\u003c/code\u003e is the Enum storing the error message for each different exception type.","lastModifiedDate":"2022-09-19"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-19"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":"public enum ErrorMessage {","lastModifiedDate":"2022-09-03"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"    INVALID_COMMAND_ERROR_MESSAGE(\"I\u0027m sorry, but I don\u0027t know what that means :-(\"),","lastModifiedDate":"2022-09-03"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"    INVALID_INDEX_ERROR_MESSAGE(\"The selected task index value does not exists.\"),","lastModifiedDate":"2022-09-10"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":"    INVALID_DATE_FORMAT_ERROR_MESSAGE(\"The date format provided is incorrect.\"),","lastModifiedDate":"2022-09-18"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":"    INVALID_DATE_TIME_FORMAT_ERROR_MESSAGE(\"The date and time format provided is incorrect.\"),","lastModifiedDate":"2022-09-18"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":"    TODO_MISSING_DESCRIPTION_ERROR_MESSAGE(\"The description of a todo cannot be empty.\"),","lastModifiedDate":"2022-09-03"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":"    DEADLINE_MISSING_DESCRIPTION_ERROR_MESSAGE(\"The description of a deadline cannot be empty.\"),","lastModifiedDate":"2022-09-18"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":"    DEADLINE_MISSING_TAG_ERROR_MESSAGE(\"Separator \\\" /by \\\" is not found.\"),","lastModifiedDate":"2022-09-03"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"    DEADLINE_MISSING_TIME_ERROR_MESSAGE(\"The time of a deadline cannot be empty.\"),","lastModifiedDate":"2022-09-03"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":"    EVENT_MISSING_DESCRIPTION_ERROR_MESSAGE(\"The description of an event cannot be empty.\"),","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":"    EVENT_MISSING_TAG_ERROR_MESSAGE(\"Separator \\\" /at \\\" is not found.\"),","lastModifiedDate":"2022-09-03"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":"    EVENT_MISSING_TIME_ERROR_MESSAGE(\"The time of an event cannot be empty.\"),","lastModifiedDate":"2022-09-03"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":"    STORAGE_INITIALIZATION_ERROR_MESSAGE(\"Something went wrong while reading the file.\"),","lastModifiedDate":"2022-09-18"},{"lineNumber":19,"author":{"gitId":"wcwy"},"content":"    STORAGE_OUTPUT_ERROR_MESSAGE(\"Something went wrong while writing to file.\");","lastModifiedDate":"2022-09-18"},{"lineNumber":20,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":21,"author":{"gitId":"wcwy"},"content":"    final String message;","lastModifiedDate":"2022-09-03"},{"lineNumber":22,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":23,"author":{"gitId":"wcwy"},"content":"    ErrorMessage(String message) {","lastModifiedDate":"2022-09-03"},{"lineNumber":24,"author":{"gitId":"wcwy"},"content":"        this.message \u003d message;","lastModifiedDate":"2022-09-03"},{"lineNumber":25,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":26,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":27,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":28,"author":{"gitId":"wcwy"},"content":"     * Return the message stored in the corresponding ErrorMessage enum.","lastModifiedDate":"2022-09-19"},{"lineNumber":29,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":30,"author":{"gitId":"wcwy"},"content":"     * @return A string storing the error message","lastModifiedDate":"2022-09-19"},{"lineNumber":31,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":32,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-03"},{"lineNumber":33,"author":{"gitId":"wcwy"},"content":"    public String toString() {","lastModifiedDate":"2022-09-03"},{"lineNumber":34,"author":{"gitId":"wcwy"},"content":"        return message;","lastModifiedDate":"2022-09-03"},{"lineNumber":35,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":36,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-09-03"}],"authorContributionMap":{"wcwy":36}},{"path":"src/main/java/duke/exception/EventMissingDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.exception;","lastModifiedDate":"2022-09-03"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-19"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eEventMissingDescriptionException\u003c/code\u003e represents the exception triggered","lastModifiedDate":"2022-09-19"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":" * when an event task given by the user does not contain a valid description.","lastModifiedDate":"2022-09-19"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-19"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"public class EventMissingDescriptionException extends DukeException {","lastModifiedDate":"2022-09-03"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":"     * Concatenate the error message prefix and error message, and returns it.","lastModifiedDate":"2022-09-19"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":"     * @return The full error message","lastModifiedDate":"2022-09-19"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-03"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":"    public String getMessage() {","lastModifiedDate":"2022-09-03"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":"        return super.getMessagePrefix() + ErrorMessage.EVENT_MISSING_DESCRIPTION_ERROR_MESSAGE;","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-09-03"}],"authorContributionMap":{"wcwy":18}},{"path":"src/main/java/duke/exception/EventMissingTagException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.exception;","lastModifiedDate":"2022-09-03"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-19"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eEventMissingTagException\u003c/code\u003e represents the exception triggered","lastModifiedDate":"2022-09-19"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":" * when an event task given by the user does not contain a valid \" /at \" tag.","lastModifiedDate":"2022-09-19"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-19"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"public class EventMissingTagException extends DukeException {","lastModifiedDate":"2022-09-03"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"    ","lastModifiedDate":"2022-09-03"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":"     * Concatenate the error message prefix and error message, and returns it.","lastModifiedDate":"2022-09-19"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":"     * @return The full error message","lastModifiedDate":"2022-09-19"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-03"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":"    public String getMessage() {","lastModifiedDate":"2022-09-03"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":"        return super.getMessagePrefix() + ErrorMessage.EVENT_MISSING_TAG_ERROR_MESSAGE;","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-09-03"}],"authorContributionMap":{"wcwy":18}},{"path":"src/main/java/duke/exception/EventMissingTimeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.exception;","lastModifiedDate":"2022-09-03"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-19"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eEventMissingTimeException\u003c/code\u003e represents the exception triggered","lastModifiedDate":"2022-09-19"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":" * when an event task given by the user does not contain a valid date time.","lastModifiedDate":"2022-09-19"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-19"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"public class EventMissingTimeException extends DukeException {","lastModifiedDate":"2022-09-03"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":"     * Concatenate the error message prefix and error message, and returns it.","lastModifiedDate":"2022-09-19"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":"     * @return The full error message","lastModifiedDate":"2022-09-19"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-03"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":"    public String getMessage() {","lastModifiedDate":"2022-09-03"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":"        return super.getMessagePrefix() + ErrorMessage.EVENT_MISSING_TIME_ERROR_MESSAGE;","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-09-03"}],"authorContributionMap":{"wcwy":18}},{"path":"src/main/java/duke/exception/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.exception;","lastModifiedDate":"2022-09-03"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-19"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eInvalidCommandException\u003c/code\u003e represents the exception triggered","lastModifiedDate":"2022-09-19"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":" * when a command given by the user is not a command supported by the application.","lastModifiedDate":"2022-09-19"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-19"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"public class InvalidCommandException extends DukeException {","lastModifiedDate":"2022-09-03"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":"     * Concatenate the error message prefix and error message, and returns it.","lastModifiedDate":"2022-09-19"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":"     * @return The full error message","lastModifiedDate":"2022-09-19"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-03"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":"    public String getMessage() {","lastModifiedDate":"2022-09-03"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":"        return super.getMessagePrefix() + ErrorMessage.INVALID_COMMAND_ERROR_MESSAGE;","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-09-03"}],"authorContributionMap":{"wcwy":18}},{"path":"src/main/java/duke/exception/InvalidDateFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.exception;","lastModifiedDate":"2022-09-18"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-19"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eInvalidDateFormatException\u003c/code\u003e represents the exception triggered","lastModifiedDate":"2022-09-19"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":" * when a date given by the user is not in the supported format.","lastModifiedDate":"2022-09-19"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-19"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"public class InvalidDateFormatException extends DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":"     * Concatenate the error message prefix and error message, and returns it.","lastModifiedDate":"2022-09-19"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":"     * @return The full error message","lastModifiedDate":"2022-09-19"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":"    public String getMessage() {","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":"        return super.getMessagePrefix() + ErrorMessage.INVALID_DATE_FORMAT_ERROR_MESSAGE;","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-09-18"}],"authorContributionMap":{"wcwy":18}},{"path":"src/main/java/duke/exception/InvalidDateTimeFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.exception;","lastModifiedDate":"2022-09-18"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-19"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eInvalidDateFormatException\u003c/code\u003e represents the exception triggered","lastModifiedDate":"2022-09-19"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":" * when a datetime given by the user is not in the supported format.","lastModifiedDate":"2022-09-19"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-19"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"public class InvalidDateTimeFormatException extends DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":"     * Concatenate the error message prefix and error message, and returns it.","lastModifiedDate":"2022-09-19"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":"     * @return The full error message","lastModifiedDate":"2022-09-19"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":"    public String getMessage() {","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":"        return super.getMessagePrefix() + ErrorMessage.INVALID_DATE_TIME_FORMAT_ERROR_MESSAGE;","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-09-18"}],"authorContributionMap":{"wcwy":18}},{"path":"src/main/java/duke/exception/InvalidIndexException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.exception;","lastModifiedDate":"2022-09-10"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-19"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eInvalidIndexException\u003c/code\u003e represents the exception triggered","lastModifiedDate":"2022-09-19"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":" * when a task index given by the user is not a valid integer","lastModifiedDate":"2022-09-19"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":" * or is not within the valid range of the task list.","lastModifiedDate":"2022-09-19"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-19"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"public class InvalidIndexException extends DukeException {","lastModifiedDate":"2022-09-10"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-10"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":"     * Concatenate the error message prefix and error message, and returns it.","lastModifiedDate":"2022-09-19"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":"     * @return The full error message","lastModifiedDate":"2022-09-19"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-10"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":"    public String getMessage() {","lastModifiedDate":"2022-09-10"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":"        return super.getMessagePrefix() + ErrorMessage.INVALID_INDEX_ERROR_MESSAGE;","lastModifiedDate":"2022-09-18"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-10"},{"lineNumber":19,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-09-10"}],"authorContributionMap":{"wcwy":19}},{"path":"src/main/java/duke/exception/StorageInitializationException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.exception;","lastModifiedDate":"2022-09-17"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-17"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-19"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eStorageInitializationException\u003c/code\u003e represents the exception triggered","lastModifiedDate":"2022-09-19"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":" * when a file operation error occurs when the application attempts to read the tasks from the file.","lastModifiedDate":"2022-09-19"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-19"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"public class StorageInitializationException extends DukeException {","lastModifiedDate":"2022-09-17"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-17"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":"     * Concatenate the error message prefix and error message, and returns it.","lastModifiedDate":"2022-09-19"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":"     * @return The full error message","lastModifiedDate":"2022-09-19"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-17"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":"    public String getMessage() {","lastModifiedDate":"2022-09-17"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":"        return super.getMessagePrefix() + ErrorMessage.STORAGE_INITIALIZATION_ERROR_MESSAGE;","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-17"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-09-17"}],"authorContributionMap":{"wcwy":18}},{"path":"src/main/java/duke/exception/StorageOutputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.exception;","lastModifiedDate":"2022-09-18"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-19"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eStorageOutputException\u003c/code\u003e represents the exception triggered","lastModifiedDate":"2022-09-19"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":" * when a file operation error occurs when the application attempts to store the changed task list","lastModifiedDate":"2022-09-19"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":" * by writing or appending into the file.","lastModifiedDate":"2022-09-19"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-19"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"public class StorageOutputException extends DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":"     * Concatenate the error message prefix and error message, and returns it.","lastModifiedDate":"2022-09-19"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":"     * @return The full error message","lastModifiedDate":"2022-09-19"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":"    public String getMessage() {","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":"        return super.getMessagePrefix() + ErrorMessage.STORAGE_OUTPUT_ERROR_MESSAGE;","lastModifiedDate":"2022-09-18"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":19,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-09-18"}],"authorContributionMap":{"wcwy":19}},{"path":"src/main/java/duke/exception/TodoMissingDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.exception;","lastModifiedDate":"2022-09-03"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-19"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eTodoMissingDescriptionException\u003c/code\u003e represents the exception triggered","lastModifiedDate":"2022-09-19"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":" * when a to-do task given by the user does not contain a valid description.","lastModifiedDate":"2022-09-19"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-19"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"public class TodoMissingDescriptionException extends DukeException {","lastModifiedDate":"2022-09-03"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-03"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":"     * Concatenate the error message prefix and error message, and returns it.","lastModifiedDate":"2022-09-19"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":"     * @return The full error message","lastModifiedDate":"2022-09-19"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-03"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":"    public String getMessage() {","lastModifiedDate":"2022-09-03"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":"        return super.getMessagePrefix() + ErrorMessage.TODO_MISSING_DESCRIPTION_ERROR_MESSAGE;","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-03"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-09-03"}],"authorContributionMap":{"wcwy":18}},{"path":"src/main/java/duke/parser/CommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.parser;","lastModifiedDate":"2022-09-18"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"import duke.command.ByeCommand;","lastModifiedDate":"2022-09-18"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":"import duke.command.Command;","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":"import duke.command.DeadlineCommand;","lastModifiedDate":"2022-09-18"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2022-09-18"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"import duke.command.EventCommand;","lastModifiedDate":"2022-09-18"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"import duke.command.FilterCommand;","lastModifiedDate":"2022-09-18"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2022-09-18"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2022-09-18"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":"import duke.command.TodoCommand;","lastModifiedDate":"2022-09-18"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":"import duke.command.UnmarkCommand;","lastModifiedDate":"2022-09-18"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-09-18"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"import duke.exception.InvalidCommandException;","lastModifiedDate":"2022-09-18"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-19"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eCommandParser\u003c/code\u003e is the class that parses a user input into a valid command.","lastModifiedDate":"2022-09-19"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":" * Operations in the parser include splitting the command word from the user input,","lastModifiedDate":"2022-09-19"},{"lineNumber":19,"author":{"gitId":"wcwy"},"content":" * creating a \u003ccode\u003eCommand\u003c/code\u003e object if the command word given is valid,","lastModifiedDate":"2022-09-19"},{"lineNumber":20,"author":{"gitId":"wcwy"},"content":" * and calling the methods in \u003ccode\u003eCommand\u003c/code\u003e object to check and set the necessary parameters","lastModifiedDate":"2022-09-19"},{"lineNumber":21,"author":{"gitId":"wcwy"},"content":" * such that the command is ready for execution.","lastModifiedDate":"2022-09-19"},{"lineNumber":22,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-19"},{"lineNumber":23,"author":{"gitId":"wcwy"},"content":"public class CommandParser implements Parser\u003cCommand\u003e {","lastModifiedDate":"2022-09-18"},{"lineNumber":24,"author":{"gitId":"wcwy"},"content":"    public CommandParser() {","lastModifiedDate":"2022-09-18"},{"lineNumber":25,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":26,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":27,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":28,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":29,"author":{"gitId":"wcwy"},"content":"     * Parsing the user input into a valid Command object and returns it.","lastModifiedDate":"2022-09-19"},{"lineNumber":30,"author":{"gitId":"wcwy"},"content":"     * The method will first split the command word from the parameters in the input,","lastModifiedDate":"2022-09-19"},{"lineNumber":31,"author":{"gitId":"wcwy"},"content":"     * then create a Command object, followed by checking and setting the parameters for the Command object.","lastModifiedDate":"2022-09-19"},{"lineNumber":32,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":33,"author":{"gitId":"wcwy"},"content":"     * @param userInput The complete user input given by user.","lastModifiedDate":"2022-09-19"},{"lineNumber":34,"author":{"gitId":"wcwy"},"content":"     * @return A Command object created based on the user input.","lastModifiedDate":"2022-09-19"},{"lineNumber":35,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException Exception triggered on invalid command word, or any invalid parameters.","lastModifiedDate":"2022-09-19"},{"lineNumber":36,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":37,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":38,"author":{"gitId":"wcwy"},"content":"    public Command parse(String userInput) throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":39,"author":{"gitId":"wcwy"},"content":"        String[] splits \u003d splitCommandAndParameters(userInput);","lastModifiedDate":"2022-09-18"},{"lineNumber":40,"author":{"gitId":"wcwy"},"content":"        Command command \u003d retrieveCommand(splits[0]);","lastModifiedDate":"2022-09-18"},{"lineNumber":41,"author":{"gitId":"wcwy"},"content":"        command.checkAndSetParameters(splits[1]);","lastModifiedDate":"2022-09-18"},{"lineNumber":42,"author":{"gitId":"wcwy"},"content":"        return command;","lastModifiedDate":"2022-09-18"},{"lineNumber":43,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":44,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":45,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":46,"author":{"gitId":"wcwy"},"content":"     * Split the full user input into command word and parameters","lastModifiedDate":"2022-09-19"},{"lineNumber":47,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":48,"author":{"gitId":"wcwy"},"content":"     * @param userInput The complete user input given by user.","lastModifiedDate":"2022-09-19"},{"lineNumber":49,"author":{"gitId":"wcwy"},"content":"     * @return A string array storing [Command Word, Parameter]","lastModifiedDate":"2022-09-19"},{"lineNumber":50,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":51,"author":{"gitId":"wcwy"},"content":"    private static String[] splitCommandAndParameters(String userInput) {","lastModifiedDate":"2022-09-18"},{"lineNumber":52,"author":{"gitId":"wcwy"},"content":"        String[] splits \u003d userInput.split(\" \", 2);","lastModifiedDate":"2022-09-18"},{"lineNumber":53,"author":{"gitId":"wcwy"},"content":"        // Standardise the splits array into size of two when no space is found in user input","lastModifiedDate":"2022-09-18"},{"lineNumber":54,"author":{"gitId":"wcwy"},"content":"        if (splits.length \u003d\u003d 1) {","lastModifiedDate":"2022-09-18"},{"lineNumber":55,"author":{"gitId":"wcwy"},"content":"            return new String[]{splits[0], \"\"};","lastModifiedDate":"2022-09-18"},{"lineNumber":56,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":57,"author":{"gitId":"wcwy"},"content":"        return splits;","lastModifiedDate":"2022-09-18"},{"lineNumber":58,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":59,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":60,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":61,"author":{"gitId":"wcwy"},"content":"     * Create and return a Command object based on the command word given,","lastModifiedDate":"2022-09-19"},{"lineNumber":62,"author":{"gitId":"wcwy"},"content":"     * or throws an exception if the command word is not found in the valid list of commands.","lastModifiedDate":"2022-09-19"},{"lineNumber":63,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":64,"author":{"gitId":"wcwy"},"content":"     * @param commandInput Command word","lastModifiedDate":"2022-09-19"},{"lineNumber":65,"author":{"gitId":"wcwy"},"content":"     * @return A Command object created based on the command word.","lastModifiedDate":"2022-09-19"},{"lineNumber":66,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException Exception triggered on invalid command word","lastModifiedDate":"2022-09-19"},{"lineNumber":67,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":68,"author":{"gitId":"wcwy"},"content":"    private static Command retrieveCommand(String commandInput) throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":69,"author":{"gitId":"wcwy"},"content":"        String commandChecker \u003d commandInput.toUpperCase();","lastModifiedDate":"2022-09-18"},{"lineNumber":70,"author":{"gitId":"wcwy"},"content":"        Command command;","lastModifiedDate":"2022-09-18"},{"lineNumber":71,"author":{"gitId":"wcwy"},"content":"        switch (commandChecker) {","lastModifiedDate":"2022-09-18"},{"lineNumber":72,"author":{"gitId":"wcwy"},"content":"        case TodoCommand.COMMAND_WORD:","lastModifiedDate":"2022-09-18"},{"lineNumber":73,"author":{"gitId":"wcwy"},"content":"            command \u003d new TodoCommand();","lastModifiedDate":"2022-09-18"},{"lineNumber":74,"author":{"gitId":"wcwy"},"content":"            break;","lastModifiedDate":"2022-09-18"},{"lineNumber":75,"author":{"gitId":"wcwy"},"content":"        case DeadlineCommand.COMMAND_WORD:","lastModifiedDate":"2022-09-18"},{"lineNumber":76,"author":{"gitId":"wcwy"},"content":"            command \u003d new DeadlineCommand();","lastModifiedDate":"2022-09-18"},{"lineNumber":77,"author":{"gitId":"wcwy"},"content":"            break;","lastModifiedDate":"2022-09-18"},{"lineNumber":78,"author":{"gitId":"wcwy"},"content":"        case EventCommand.COMMAND_WORD:","lastModifiedDate":"2022-09-18"},{"lineNumber":79,"author":{"gitId":"wcwy"},"content":"            command \u003d new EventCommand();","lastModifiedDate":"2022-09-18"},{"lineNumber":80,"author":{"gitId":"wcwy"},"content":"            break;","lastModifiedDate":"2022-09-18"},{"lineNumber":81,"author":{"gitId":"wcwy"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2022-09-18"},{"lineNumber":82,"author":{"gitId":"wcwy"},"content":"            command \u003d new DeleteCommand();","lastModifiedDate":"2022-09-18"},{"lineNumber":83,"author":{"gitId":"wcwy"},"content":"            break;","lastModifiedDate":"2022-09-18"},{"lineNumber":84,"author":{"gitId":"wcwy"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2022-09-18"},{"lineNumber":85,"author":{"gitId":"wcwy"},"content":"            command \u003d new ListCommand();","lastModifiedDate":"2022-09-18"},{"lineNumber":86,"author":{"gitId":"wcwy"},"content":"            break;","lastModifiedDate":"2022-09-18"},{"lineNumber":87,"author":{"gitId":"wcwy"},"content":"        case MarkCommand.COMMAND_WORD:","lastModifiedDate":"2022-09-18"},{"lineNumber":88,"author":{"gitId":"wcwy"},"content":"            command \u003d new MarkCommand();","lastModifiedDate":"2022-09-18"},{"lineNumber":89,"author":{"gitId":"wcwy"},"content":"            break;","lastModifiedDate":"2022-09-18"},{"lineNumber":90,"author":{"gitId":"wcwy"},"content":"        case UnmarkCommand.COMMAND_WORD:","lastModifiedDate":"2022-09-18"},{"lineNumber":91,"author":{"gitId":"wcwy"},"content":"            command \u003d new UnmarkCommand();","lastModifiedDate":"2022-09-18"},{"lineNumber":92,"author":{"gitId":"wcwy"},"content":"            break;","lastModifiedDate":"2022-09-18"},{"lineNumber":93,"author":{"gitId":"wcwy"},"content":"        case FilterCommand.COMMAND_WORD:","lastModifiedDate":"2022-09-18"},{"lineNumber":94,"author":{"gitId":"wcwy"},"content":"            command \u003d new FilterCommand();","lastModifiedDate":"2022-09-18"},{"lineNumber":95,"author":{"gitId":"wcwy"},"content":"            break;","lastModifiedDate":"2022-09-18"},{"lineNumber":96,"author":{"gitId":"wcwy"},"content":"        case ByeCommand.COMMAND_WORD:","lastModifiedDate":"2022-09-18"},{"lineNumber":97,"author":{"gitId":"wcwy"},"content":"            command \u003d new ByeCommand();","lastModifiedDate":"2022-09-18"},{"lineNumber":98,"author":{"gitId":"wcwy"},"content":"            break;","lastModifiedDate":"2022-09-18"},{"lineNumber":99,"author":{"gitId":"wcwy"},"content":"        default:","lastModifiedDate":"2022-09-18"},{"lineNumber":100,"author":{"gitId":"wcwy"},"content":"            throw new InvalidCommandException();","lastModifiedDate":"2022-09-18"},{"lineNumber":101,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":102,"author":{"gitId":"wcwy"},"content":"        return command;","lastModifiedDate":"2022-09-18"},{"lineNumber":103,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":104,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-09-18"}],"authorContributionMap":{"wcwy":104}},{"path":"src/main/java/duke/parser/DukeDateParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.parser;","lastModifiedDate":"2022-09-18"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-09-18"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":"import duke.exception.InvalidDateFormatException;","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-09-18"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-09-18"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-09-18"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":"import static duke.common.Constants.DATE_INPUT_PATTERN_1;","lastModifiedDate":"2022-09-18"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":"import static duke.common.Constants.DATE_INPUT_PATTERN_2;","lastModifiedDate":"2022-09-18"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":"import static duke.common.Constants.DATE_INPUT_PATTERN_3;","lastModifiedDate":"2022-09-18"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-19"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eDukeDateParser\u003c/code\u003e is the class that parses a user input into a valid LocalDate.","lastModifiedDate":"2022-09-19"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-19"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":"public class DukeDateParser implements Parser\u003cLocalDate\u003e {","lastModifiedDate":"2022-09-18"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":19,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":20,"author":{"gitId":"wcwy"},"content":"     * Parsing the user input into a valid LocalDate object and returns it.","lastModifiedDate":"2022-09-19"},{"lineNumber":21,"author":{"gitId":"wcwy"},"content":"     * The method will first generate a string array storing all the supported date format","lastModifiedDate":"2022-09-19"},{"lineNumber":22,"author":{"gitId":"wcwy"},"content":"     * that parsable into LocalDate by application,","lastModifiedDate":"2022-09-19"},{"lineNumber":23,"author":{"gitId":"wcwy"},"content":"     * and call a method to parse the user input using any of the supported format.","lastModifiedDate":"2022-09-19"},{"lineNumber":24,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":25,"author":{"gitId":"wcwy"},"content":"     * @param userInput A string containing the date input given by user.","lastModifiedDate":"2022-09-19"},{"lineNumber":26,"author":{"gitId":"wcwy"},"content":"     * @return A LocalDate object created based on the user input.","lastModifiedDate":"2022-09-19"},{"lineNumber":27,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException Exception triggered on non-parsable date input.","lastModifiedDate":"2022-09-19"},{"lineNumber":28,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":29,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":30,"author":{"gitId":"wcwy"},"content":"    public LocalDate parse(String userInput) throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":31,"author":{"gitId":"wcwy"},"content":"        // All the supported date format that can be parsed into LocalDate by the application","lastModifiedDate":"2022-09-19"},{"lineNumber":32,"author":{"gitId":"wcwy"},"content":"        String[] parsePatterns \u003d new String[]{","lastModifiedDate":"2022-09-18"},{"lineNumber":33,"author":{"gitId":"wcwy"},"content":"                DATE_INPUT_PATTERN_1,","lastModifiedDate":"2022-09-18"},{"lineNumber":34,"author":{"gitId":"wcwy"},"content":"                DATE_INPUT_PATTERN_2,","lastModifiedDate":"2022-09-18"},{"lineNumber":35,"author":{"gitId":"wcwy"},"content":"                DATE_INPUT_PATTERN_3","lastModifiedDate":"2022-09-18"},{"lineNumber":36,"author":{"gitId":"wcwy"},"content":"        };","lastModifiedDate":"2022-09-18"},{"lineNumber":37,"author":{"gitId":"wcwy"},"content":"        LocalDate localDate \u003d parseDate(userInput, parsePatterns);","lastModifiedDate":"2022-09-18"},{"lineNumber":38,"author":{"gitId":"wcwy"},"content":"        return localDate;","lastModifiedDate":"2022-09-18"},{"lineNumber":39,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":40,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":41,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":42,"author":{"gitId":"wcwy"},"content":"     * Attempt to parse the date input into a LocalDate object using all the supported date format.","lastModifiedDate":"2022-09-19"},{"lineNumber":43,"author":{"gitId":"wcwy"},"content":"     * Triggers a duke exception if the string is unable to be parsed by any of the supported format.","lastModifiedDate":"2022-09-19"},{"lineNumber":44,"author":{"gitId":"wcwy"},"content":"     * Returns a LocalDate object if the string is successfully parsed using any of the supported format.","lastModifiedDate":"2022-09-19"},{"lineNumber":45,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":46,"author":{"gitId":"wcwy"},"content":"     * @param userInput     A string containing the date input given by user.","lastModifiedDate":"2022-09-19"},{"lineNumber":47,"author":{"gitId":"wcwy"},"content":"     * @param parsePatterns An array of strings storing all the supported date format","lastModifiedDate":"2022-09-19"},{"lineNumber":48,"author":{"gitId":"wcwy"},"content":"     * @return A LocalDate object created based on the user input.","lastModifiedDate":"2022-09-19"},{"lineNumber":49,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException Exception triggered on non-parsable date input.","lastModifiedDate":"2022-09-19"},{"lineNumber":50,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":51,"author":{"gitId":"wcwy"},"content":"    private static LocalDate parseDate(String userInput, String[] parsePatterns) throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":52,"author":{"gitId":"wcwy"},"content":"        boolean hasParsedSuccessfully \u003d false;","lastModifiedDate":"2022-09-18"},{"lineNumber":53,"author":{"gitId":"wcwy"},"content":"        LocalDate date \u003d null;","lastModifiedDate":"2022-09-18"},{"lineNumber":54,"author":{"gitId":"wcwy"},"content":"        for (String pattern : parsePatterns) {","lastModifiedDate":"2022-09-18"},{"lineNumber":55,"author":{"gitId":"wcwy"},"content":"            try {","lastModifiedDate":"2022-09-18"},{"lineNumber":56,"author":{"gitId":"wcwy"},"content":"                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(pattern);","lastModifiedDate":"2022-09-18"},{"lineNumber":57,"author":{"gitId":"wcwy"},"content":"                date \u003d LocalDate.parse(userInput, formatter);","lastModifiedDate":"2022-09-18"},{"lineNumber":58,"author":{"gitId":"wcwy"},"content":"            } catch (DateTimeParseException exception) {","lastModifiedDate":"2022-09-18"},{"lineNumber":59,"author":{"gitId":"wcwy"},"content":"                // Attempt to parse the string with next date format","lastModifiedDate":"2022-09-19"},{"lineNumber":60,"author":{"gitId":"wcwy"},"content":"                continue;","lastModifiedDate":"2022-09-18"},{"lineNumber":61,"author":{"gitId":"wcwy"},"content":"            }","lastModifiedDate":"2022-09-18"},{"lineNumber":62,"author":{"gitId":"wcwy"},"content":"            hasParsedSuccessfully \u003d true;","lastModifiedDate":"2022-09-18"},{"lineNumber":63,"author":{"gitId":"wcwy"},"content":"            break;","lastModifiedDate":"2022-09-18"},{"lineNumber":64,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":65,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":66,"author":{"gitId":"wcwy"},"content":"        if (!hasParsedSuccessfully) {","lastModifiedDate":"2022-09-18"},{"lineNumber":67,"author":{"gitId":"wcwy"},"content":"            throw new InvalidDateFormatException();","lastModifiedDate":"2022-09-18"},{"lineNumber":68,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":69,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":70,"author":{"gitId":"wcwy"},"content":"        return date;","lastModifiedDate":"2022-09-18"},{"lineNumber":71,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":72,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-09-18"}],"authorContributionMap":{"wcwy":72}},{"path":"src/main/java/duke/parser/DukeDateTimeParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.parser;","lastModifiedDate":"2022-09-18"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-09-18"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":"import duke.exception.InvalidDateTimeFormatException;","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-09-18"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-09-18"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-09-18"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":"import static duke.common.Constants.DATE_INPUT_PATTERN_1;","lastModifiedDate":"2022-09-18"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":"import static duke.common.Constants.DATE_INPUT_PATTERN_2;","lastModifiedDate":"2022-09-18"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":"import static duke.common.Constants.DATE_INPUT_PATTERN_3;","lastModifiedDate":"2022-09-18"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":"import static duke.common.Constants.TIME_INPUT_PATTERN_1;","lastModifiedDate":"2022-09-18"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"import static duke.common.Constants.TIME_INPUT_PATTERN_2;","lastModifiedDate":"2022-09-18"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-19"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eDukeDateParser\u003c/code\u003e is the class that parses a user input into a valid LocalDateTime.","lastModifiedDate":"2022-09-19"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-19"},{"lineNumber":19,"author":{"gitId":"wcwy"},"content":"public class DukeDateTimeParser implements Parser\u003cLocalDateTime\u003e {","lastModifiedDate":"2022-09-18"},{"lineNumber":20,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":21,"author":{"gitId":"wcwy"},"content":"     * Parsing the user input into a valid LocalDateTime object and returns it.","lastModifiedDate":"2022-09-19"},{"lineNumber":22,"author":{"gitId":"wcwy"},"content":"     * The method will first generate a string array storing all the supported datetime format","lastModifiedDate":"2022-09-19"},{"lineNumber":23,"author":{"gitId":"wcwy"},"content":"     * that parsable into LocalDateTime by application,","lastModifiedDate":"2022-09-19"},{"lineNumber":24,"author":{"gitId":"wcwy"},"content":"     * and call a method to parse the user input using any of the supported format.","lastModifiedDate":"2022-09-19"},{"lineNumber":25,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":26,"author":{"gitId":"wcwy"},"content":"     * @param userInput A string containing the datetime input given by user.","lastModifiedDate":"2022-09-19"},{"lineNumber":27,"author":{"gitId":"wcwy"},"content":"     * @return A LocalDateTime object created based on the user input.","lastModifiedDate":"2022-09-19"},{"lineNumber":28,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException Exception triggered on non-parsable datetime input.","lastModifiedDate":"2022-09-19"},{"lineNumber":29,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":30,"author":{"gitId":"wcwy"},"content":"    @Override","lastModifiedDate":"2022-09-18"},{"lineNumber":31,"author":{"gitId":"wcwy"},"content":"    public LocalDateTime parse(String userInput) throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":32,"author":{"gitId":"wcwy"},"content":"        // All the supported datetime format that can be parsed into LocalDateTime by the application","lastModifiedDate":"2022-09-19"},{"lineNumber":33,"author":{"gitId":"wcwy"},"content":"        String[] parsePatterns \u003d new String[]{","lastModifiedDate":"2022-09-18"},{"lineNumber":34,"author":{"gitId":"wcwy"},"content":"                DATE_INPUT_PATTERN_1 + \" \" + TIME_INPUT_PATTERN_1,","lastModifiedDate":"2022-09-18"},{"lineNumber":35,"author":{"gitId":"wcwy"},"content":"                DATE_INPUT_PATTERN_1 + \" \" + TIME_INPUT_PATTERN_2,","lastModifiedDate":"2022-09-18"},{"lineNumber":36,"author":{"gitId":"wcwy"},"content":"                DATE_INPUT_PATTERN_2 + \" \" + TIME_INPUT_PATTERN_1,","lastModifiedDate":"2022-09-18"},{"lineNumber":37,"author":{"gitId":"wcwy"},"content":"                DATE_INPUT_PATTERN_2 + \" \" + TIME_INPUT_PATTERN_2,","lastModifiedDate":"2022-09-18"},{"lineNumber":38,"author":{"gitId":"wcwy"},"content":"                DATE_INPUT_PATTERN_3 + \" \" + TIME_INPUT_PATTERN_1,","lastModifiedDate":"2022-09-18"},{"lineNumber":39,"author":{"gitId":"wcwy"},"content":"                DATE_INPUT_PATTERN_3 + \" \" + TIME_INPUT_PATTERN_2","lastModifiedDate":"2022-09-18"},{"lineNumber":40,"author":{"gitId":"wcwy"},"content":"        };","lastModifiedDate":"2022-09-18"},{"lineNumber":41,"author":{"gitId":"wcwy"},"content":"        LocalDateTime dateTime \u003d parseDateTime(userInput, parsePatterns);","lastModifiedDate":"2022-09-18"},{"lineNumber":42,"author":{"gitId":"wcwy"},"content":"        return dateTime;","lastModifiedDate":"2022-09-18"},{"lineNumber":43,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":44,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":45,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":46,"author":{"gitId":"wcwy"},"content":"     * Attempt to parse the datetime input into a LocalDateTime object using all the supported datetime format.","lastModifiedDate":"2022-09-19"},{"lineNumber":47,"author":{"gitId":"wcwy"},"content":"     * Triggers a duke exception if the string is unable to be parsed by any of the supported format.","lastModifiedDate":"2022-09-19"},{"lineNumber":48,"author":{"gitId":"wcwy"},"content":"     * Returns a LocalDateTime object if the string is successfully parsed using any of the supported format.","lastModifiedDate":"2022-09-19"},{"lineNumber":49,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":50,"author":{"gitId":"wcwy"},"content":"     * @param userInput     A string containing the datetime input given by user.","lastModifiedDate":"2022-09-19"},{"lineNumber":51,"author":{"gitId":"wcwy"},"content":"     * @param parsePatterns An array of strings storing all the supported datetime format","lastModifiedDate":"2022-09-19"},{"lineNumber":52,"author":{"gitId":"wcwy"},"content":"     * @return A LocalDateTime object created based on the user input.","lastModifiedDate":"2022-09-19"},{"lineNumber":53,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException Exception triggered on non-parsable datetime input.","lastModifiedDate":"2022-09-19"},{"lineNumber":54,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":55,"author":{"gitId":"wcwy"},"content":"    private static LocalDateTime parseDateTime(String userInput, String[] parsePatterns) throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":56,"author":{"gitId":"wcwy"},"content":"        boolean hasParsedSuccessfully \u003d false;","lastModifiedDate":"2022-09-18"},{"lineNumber":57,"author":{"gitId":"wcwy"},"content":"        LocalDateTime dateTime \u003d null;","lastModifiedDate":"2022-09-18"},{"lineNumber":58,"author":{"gitId":"wcwy"},"content":"        for (String pattern : parsePatterns) {","lastModifiedDate":"2022-09-18"},{"lineNumber":59,"author":{"gitId":"wcwy"},"content":"            try {","lastModifiedDate":"2022-09-18"},{"lineNumber":60,"author":{"gitId":"wcwy"},"content":"                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(pattern);","lastModifiedDate":"2022-09-18"},{"lineNumber":61,"author":{"gitId":"wcwy"},"content":"                dateTime \u003d LocalDateTime.parse(userInput, formatter);","lastModifiedDate":"2022-09-18"},{"lineNumber":62,"author":{"gitId":"wcwy"},"content":"            } catch (DateTimeParseException exception) {","lastModifiedDate":"2022-09-18"},{"lineNumber":63,"author":{"gitId":"wcwy"},"content":"                // Attempt to parse the string with next datetime format","lastModifiedDate":"2022-09-19"},{"lineNumber":64,"author":{"gitId":"wcwy"},"content":"                continue;","lastModifiedDate":"2022-09-18"},{"lineNumber":65,"author":{"gitId":"wcwy"},"content":"            }","lastModifiedDate":"2022-09-18"},{"lineNumber":66,"author":{"gitId":"wcwy"},"content":"            hasParsedSuccessfully \u003d true;","lastModifiedDate":"2022-09-18"},{"lineNumber":67,"author":{"gitId":"wcwy"},"content":"            break;","lastModifiedDate":"2022-09-18"},{"lineNumber":68,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":69,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":70,"author":{"gitId":"wcwy"},"content":"        if (!hasParsedSuccessfully) {","lastModifiedDate":"2022-09-18"},{"lineNumber":71,"author":{"gitId":"wcwy"},"content":"            throw new InvalidDateTimeFormatException();","lastModifiedDate":"2022-09-18"},{"lineNumber":72,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":73,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":74,"author":{"gitId":"wcwy"},"content":"        return dateTime;","lastModifiedDate":"2022-09-18"},{"lineNumber":75,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":76,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-09-18"}],"authorContributionMap":{"wcwy":76}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.parser;","lastModifiedDate":"2022-09-18"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-09-18"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-19"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eParser\u003c/code\u003e is the interface for the every type of parsers in the application.","lastModifiedDate":"2022-09-19"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":" *","lastModifiedDate":"2022-09-19"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":" * @param \u003cT\u003e Generic type","lastModifiedDate":"2022-09-19"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-19"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":"public interface Parser\u003cT\u003e {","lastModifiedDate":"2022-09-18"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":"    T parse(String userInput) throws DukeException;","lastModifiedDate":"2022-09-18"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-09-18"}],"authorContributionMap":{"wcwy":12}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.storage;","lastModifiedDate":"2022-09-17"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-11"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"import duke.data.TaskList;","lastModifiedDate":"2022-09-17"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2022-09-11"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":"import duke.data.task.Deadline;","lastModifiedDate":"2022-09-17"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":"import duke.data.task.Event;","lastModifiedDate":"2022-09-17"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"import duke.data.task.Task;","lastModifiedDate":"2022-09-17"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"import duke.data.task.Todo;","lastModifiedDate":"2022-09-17"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":"import duke.exception.StorageInitializationException;","lastModifiedDate":"2022-09-17"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":"import duke.exception.StorageOutputException;","lastModifiedDate":"2022-09-18"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":"import duke.parser.DukeDateTimeParser;","lastModifiedDate":"2022-09-18"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-11"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":"import java.io.File;","lastModifiedDate":"2022-09-11"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2022-09-11"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-09-11"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":"import java.io.IOException;","lastModifiedDate":"2022-09-11"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":"import java.nio.file.Files;","lastModifiedDate":"2022-09-11"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2022-09-11"},{"lineNumber":19,"author":{"gitId":"wcwy"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-09-11"},{"lineNumber":20,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-11"},{"lineNumber":21,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-19"},{"lineNumber":22,"author":{"gitId":"wcwy"},"content":" * Storage is the class that represents the file storage of the application.","lastModifiedDate":"2022-09-19"},{"lineNumber":23,"author":{"gitId":"wcwy"},"content":" * Operations in the storage include the file I/O operations to create, open,","lastModifiedDate":"2022-09-19"},{"lineNumber":24,"author":{"gitId":"wcwy"},"content":" * read, append, write and delete the file.","lastModifiedDate":"2022-09-19"},{"lineNumber":25,"author":{"gitId":"wcwy"},"content":" * \u003cp\u003e","lastModifiedDate":"2022-09-19"},{"lineNumber":26,"author":{"gitId":"wcwy"},"content":" * The class is used to store the added list of tasks in the application into a file,","lastModifiedDate":"2022-09-19"},{"lineNumber":27,"author":{"gitId":"wcwy"},"content":" * such that the list of tasks in previous executions can be read from the file.","lastModifiedDate":"2022-09-19"},{"lineNumber":28,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-19"},{"lineNumber":29,"author":{"gitId":"wcwy"},"content":"public class Storage {","lastModifiedDate":"2022-09-17"},{"lineNumber":30,"author":{"gitId":"wcwy"},"content":"    // A relative file path of the file used to store the task list","lastModifiedDate":"2022-09-19"},{"lineNumber":31,"author":{"gitId":"wcwy"},"content":"    private String filePath;","lastModifiedDate":"2022-09-17"},{"lineNumber":32,"author":{"gitId":"wcwy"},"content":"    // A TaskList object used to hold the tasks stored in the file during initialisation","lastModifiedDate":"2022-09-19"},{"lineNumber":33,"author":{"gitId":"wcwy"},"content":"    private TaskList storedTaskList;","lastModifiedDate":"2022-09-17"},{"lineNumber":34,"author":{"gitId":"wcwy"},"content":"    // A DukeDateTimeParser object to parse the file output in string into a LocalDateTime object","lastModifiedDate":"2022-09-19"},{"lineNumber":35,"author":{"gitId":"wcwy"},"content":"    private DukeDateTimeParser dukeDateTimeParser;","lastModifiedDate":"2022-09-18"},{"lineNumber":36,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-17"},{"lineNumber":37,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":38,"author":{"gitId":"wcwy"},"content":"     * Constructor of \u003ccode\u003eStorage\u003c/code\u003e. Stores the given file path,","lastModifiedDate":"2022-09-19"},{"lineNumber":39,"author":{"gitId":"wcwy"},"content":"     * and creates a new TaskList and DukeDateTimeParser object.","lastModifiedDate":"2022-09-19"},{"lineNumber":40,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":41,"author":{"gitId":"wcwy"},"content":"     * @param filePath A relative file path of the file used to store the task list","lastModifiedDate":"2022-09-19"},{"lineNumber":42,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":43,"author":{"gitId":"wcwy"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2022-09-17"},{"lineNumber":44,"author":{"gitId":"wcwy"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2022-09-17"},{"lineNumber":45,"author":{"gitId":"wcwy"},"content":"        this.storedTaskList \u003d new TaskList();","lastModifiedDate":"2022-09-17"},{"lineNumber":46,"author":{"gitId":"wcwy"},"content":"        this.dukeDateTimeParser \u003d new DukeDateTimeParser();","lastModifiedDate":"2022-09-18"},{"lineNumber":47,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-17"},{"lineNumber":48,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-17"},{"lineNumber":49,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":50,"author":{"gitId":"wcwy"},"content":"     * Initialise the application by opening and reading the file specified in filePath","lastModifiedDate":"2022-09-19"},{"lineNumber":51,"author":{"gitId":"wcwy"},"content":"     * and return the TaskList object containing all the tasks stored in the file.","lastModifiedDate":"2022-09-19"},{"lineNumber":52,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":53,"author":{"gitId":"wcwy"},"content":"     * @return A TaskList object with all the tasks stored in file storage.","lastModifiedDate":"2022-09-19"},{"lineNumber":54,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException Exception triggered on erroneous file output operations.","lastModifiedDate":"2022-09-19"},{"lineNumber":55,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":56,"author":{"gitId":"wcwy"},"content":"    public TaskList initialize() throws DukeException {","lastModifiedDate":"2022-09-17"},{"lineNumber":57,"author":{"gitId":"wcwy"},"content":"        openDukeFile();","lastModifiedDate":"2022-09-17"},{"lineNumber":58,"author":{"gitId":"wcwy"},"content":"        return storedTaskList;","lastModifiedDate":"2022-09-17"},{"lineNumber":59,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-17"},{"lineNumber":60,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-11"},{"lineNumber":61,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":62,"author":{"gitId":"wcwy"},"content":"     * Check if the file specified in filePath exists,","lastModifiedDate":"2022-09-19"},{"lineNumber":63,"author":{"gitId":"wcwy"},"content":"     * open the file and read it if an existing file is found.","lastModifiedDate":"2022-09-19"},{"lineNumber":64,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":65,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException Exception triggered on erroneous file output operations.","lastModifiedDate":"2022-09-19"},{"lineNumber":66,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":67,"author":{"gitId":"wcwy"},"content":"    public void openDukeFile() throws DukeException {","lastModifiedDate":"2022-09-17"},{"lineNumber":68,"author":{"gitId":"wcwy"},"content":"        if (Files.exists(Paths.get(filePath))) {","lastModifiedDate":"2022-09-17"},{"lineNumber":69,"author":{"gitId":"wcwy"},"content":"            File dukeFile \u003d new File(filePath);","lastModifiedDate":"2022-09-17"},{"lineNumber":70,"author":{"gitId":"wcwy"},"content":"            safeReadDukeFile(dukeFile);","lastModifiedDate":"2022-09-17"},{"lineNumber":71,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-11"},{"lineNumber":72,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-11"},{"lineNumber":73,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-11"},{"lineNumber":74,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":75,"author":{"gitId":"wcwy"},"content":"     * Creates a Scanner object to read the file and call another method to read it.","lastModifiedDate":"2022-09-19"},{"lineNumber":76,"author":{"gitId":"wcwy"},"content":"     * Capture the exceptions returned and throws a DukeException if there\u0027s any.","lastModifiedDate":"2022-09-19"},{"lineNumber":77,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":78,"author":{"gitId":"wcwy"},"content":"     * @param dukeFile File object containing the opened file","lastModifiedDate":"2022-09-19"},{"lineNumber":79,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException Exception triggered on erroneous file output operations.","lastModifiedDate":"2022-09-19"},{"lineNumber":80,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":81,"author":{"gitId":"wcwy"},"content":"    private void safeReadDukeFile(File dukeFile) throws DukeException {","lastModifiedDate":"2022-09-17"},{"lineNumber":82,"author":{"gitId":"wcwy"},"content":"        try {","lastModifiedDate":"2022-09-11"},{"lineNumber":83,"author":{"gitId":"wcwy"},"content":"            Scanner in \u003d new Scanner(dukeFile);","lastModifiedDate":"2022-09-11"},{"lineNumber":84,"author":{"gitId":"wcwy"},"content":"            readDukeFileAndInitializeTask(in);","lastModifiedDate":"2022-09-17"},{"lineNumber":85,"author":{"gitId":"wcwy"},"content":"        } catch (FileNotFoundException exception) {","lastModifiedDate":"2022-09-11"},{"lineNumber":86,"author":{"gitId":"wcwy"},"content":"            throw new StorageInitializationException();","lastModifiedDate":"2022-09-17"},{"lineNumber":87,"author":{"gitId":"wcwy"},"content":"        } catch (DukeException exception) {","lastModifiedDate":"2022-09-11"},{"lineNumber":88,"author":{"gitId":"wcwy"},"content":"            throw new StorageInitializationException();","lastModifiedDate":"2022-09-17"},{"lineNumber":89,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-11"},{"lineNumber":90,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-11"},{"lineNumber":91,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-11"},{"lineNumber":92,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":93,"author":{"gitId":"wcwy"},"content":"     * Read the file attached to the Scanner object line by line,","lastModifiedDate":"2022-09-19"},{"lineNumber":94,"author":{"gitId":"wcwy"},"content":"     * split each of the lines representing a task into a string array separated by \" | \",","lastModifiedDate":"2022-09-19"},{"lineNumber":95,"author":{"gitId":"wcwy"},"content":"     * then passes the split line into another method to add the task into task list.","lastModifiedDate":"2022-09-19"},{"lineNumber":96,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":97,"author":{"gitId":"wcwy"},"content":"     * @param in Scanner object attached to the file pointer.","lastModifiedDate":"2022-09-19"},{"lineNumber":98,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException Exception triggered on erroneous file output operations.","lastModifiedDate":"2022-09-19"},{"lineNumber":99,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":100,"author":{"gitId":"wcwy"},"content":"    private void readDukeFileAndInitializeTask(Scanner in) throws DukeException {","lastModifiedDate":"2022-09-17"},{"lineNumber":101,"author":{"gitId":"wcwy"},"content":"        while (in.hasNext()) {","lastModifiedDate":"2022-09-11"},{"lineNumber":102,"author":{"gitId":"wcwy"},"content":"            String line \u003d in.nextLine();","lastModifiedDate":"2022-09-11"},{"lineNumber":103,"author":{"gitId":"wcwy"},"content":"            String[] splits \u003d line.split(\" \\\\| \");","lastModifiedDate":"2022-09-11"},{"lineNumber":104,"author":{"gitId":"wcwy"},"content":"            initializeTask(splits);","lastModifiedDate":"2022-09-17"},{"lineNumber":105,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-17"},{"lineNumber":106,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-17"},{"lineNumber":107,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-17"},{"lineNumber":108,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":109,"author":{"gitId":"wcwy"},"content":"     * Determine the type of task represented in the line,","lastModifiedDate":"2022-09-19"},{"lineNumber":110,"author":{"gitId":"wcwy"},"content":"     * create a corresponding Task object for it and stores the necessary parameters.","lastModifiedDate":"2022-09-19"},{"lineNumber":111,"author":{"gitId":"wcwy"},"content":"     * Then, mark the task as completed if necessary.","lastModifiedDate":"2022-09-19"},{"lineNumber":112,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":113,"author":{"gitId":"wcwy"},"content":"     * @param splits Line split into parts based on delimiter \" | \".","lastModifiedDate":"2022-09-19"},{"lineNumber":114,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException Exception triggered on erroneous file output operations.","lastModifiedDate":"2022-09-19"},{"lineNumber":115,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":116,"author":{"gitId":"wcwy"},"content":"    private void initializeTask(String[] splits) throws DukeException {","lastModifiedDate":"2022-09-17"},{"lineNumber":117,"author":{"gitId":"wcwy"},"content":"        switch (splits[0]) {","lastModifiedDate":"2022-09-17"},{"lineNumber":118,"author":{"gitId":"wcwy"},"content":"        case \"T\":","lastModifiedDate":"2022-09-17"},{"lineNumber":119,"author":{"gitId":"wcwy"},"content":"            storedTaskList.addTodo(splits[2]);","lastModifiedDate":"2022-09-18"},{"lineNumber":120,"author":{"gitId":"wcwy"},"content":"            break;","lastModifiedDate":"2022-09-17"},{"lineNumber":121,"author":{"gitId":"wcwy"},"content":"        case \"D\":","lastModifiedDate":"2022-09-17"},{"lineNumber":122,"author":{"gitId":"wcwy"},"content":"            storedTaskList.addDeadline(splits[2], dukeDateTimeParser.parse(splits[3]));","lastModifiedDate":"2022-09-18"},{"lineNumber":123,"author":{"gitId":"wcwy"},"content":"            break;","lastModifiedDate":"2022-09-17"},{"lineNumber":124,"author":{"gitId":"wcwy"},"content":"        case \"E\":","lastModifiedDate":"2022-09-17"},{"lineNumber":125,"author":{"gitId":"wcwy"},"content":"            storedTaskList.addEvent(splits[2], dukeDateTimeParser.parse(splits[3]));","lastModifiedDate":"2022-09-18"},{"lineNumber":126,"author":{"gitId":"wcwy"},"content":"            break;","lastModifiedDate":"2022-09-17"},{"lineNumber":127,"author":{"gitId":"wcwy"},"content":"        default:","lastModifiedDate":"2022-09-17"},{"lineNumber":128,"author":{"gitId":"wcwy"},"content":"            break;","lastModifiedDate":"2022-09-17"},{"lineNumber":129,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-17"},{"lineNumber":130,"author":{"gitId":"wcwy"},"content":"        if (splits[1].equals(\"1\")) {","lastModifiedDate":"2022-09-17"},{"lineNumber":131,"author":{"gitId":"wcwy"},"content":"            storedTaskList.markTask(storedTaskList.getSize());","lastModifiedDate":"2022-09-18"},{"lineNumber":132,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-11"},{"lineNumber":133,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-11"},{"lineNumber":134,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-17"},{"lineNumber":135,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":136,"author":{"gitId":"wcwy"},"content":"     * Rewrite the file with the updated task list provided.","lastModifiedDate":"2022-09-19"},{"lineNumber":137,"author":{"gitId":"wcwy"},"content":"     * Used when the modification made to the task list results in changes","lastModifiedDate":"2022-09-19"},{"lineNumber":138,"author":{"gitId":"wcwy"},"content":"     * that is not in the end of the file, which is unsuitable to use append operation,","lastModifiedDate":"2022-09-19"},{"lineNumber":139,"author":{"gitId":"wcwy"},"content":"     * and thus requires a rewrite.","lastModifiedDate":"2022-09-19"},{"lineNumber":140,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":141,"author":{"gitId":"wcwy"},"content":"     * @param taskList The most recent TaskList object containing the updated tasks\u0027 information","lastModifiedDate":"2022-09-19"},{"lineNumber":142,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException Exception triggered on erroneous file input operations.","lastModifiedDate":"2022-09-19"},{"lineNumber":143,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":144,"author":{"gitId":"wcwy"},"content":"    public void rewriteDukeFile(TaskList taskList) throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":145,"author":{"gitId":"wcwy"},"content":"        try {","lastModifiedDate":"2022-09-18"},{"lineNumber":146,"author":{"gitId":"wcwy"},"content":"            // Creates the file if it does not exist","lastModifiedDate":"2022-09-19"},{"lineNumber":147,"author":{"gitId":"wcwy"},"content":"            if (!Files.exists(Paths.get(filePath))) {","lastModifiedDate":"2022-09-17"},{"lineNumber":148,"author":{"gitId":"wcwy"},"content":"                File dukeFile \u003d new File(filePath);","lastModifiedDate":"2022-09-17"},{"lineNumber":149,"author":{"gitId":"wcwy"},"content":"                dukeFile.createNewFile();","lastModifiedDate":"2022-09-11"},{"lineNumber":150,"author":{"gitId":"wcwy"},"content":"            }","lastModifiedDate":"2022-09-11"},{"lineNumber":151,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-11"},{"lineNumber":152,"author":{"gitId":"wcwy"},"content":"            // Write each task in the task list into the file","lastModifiedDate":"2022-09-19"},{"lineNumber":153,"author":{"gitId":"wcwy"},"content":"            FileWriter dukeFileWriter \u003d new FileWriter(filePath, false);","lastModifiedDate":"2022-09-17"},{"lineNumber":154,"author":{"gitId":"wcwy"},"content":"            for (Task task : taskList.getTasks()) {","lastModifiedDate":"2022-09-17"},{"lineNumber":155,"author":{"gitId":"wcwy"},"content":"                String output \u003d retrieveTaskInformationForFileStorage(task);","lastModifiedDate":"2022-09-11"},{"lineNumber":156,"author":{"gitId":"wcwy"},"content":"                dukeFileWriter.append(output);","lastModifiedDate":"2022-09-11"},{"lineNumber":157,"author":{"gitId":"wcwy"},"content":"            }","lastModifiedDate":"2022-09-11"},{"lineNumber":158,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":159,"author":{"gitId":"wcwy"},"content":"            dukeFileWriter.close();","lastModifiedDate":"2022-09-11"},{"lineNumber":160,"author":{"gitId":"wcwy"},"content":"        } catch (IOException exception) {","lastModifiedDate":"2022-09-18"},{"lineNumber":161,"author":{"gitId":"wcwy"},"content":"            throw new StorageOutputException();","lastModifiedDate":"2022-09-18"},{"lineNumber":162,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":163,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-11"},{"lineNumber":164,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-11"},{"lineNumber":165,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":166,"author":{"gitId":"wcwy"},"content":"     * Append the file with the updated task list provided.","lastModifiedDate":"2022-09-19"},{"lineNumber":167,"author":{"gitId":"wcwy"},"content":"     * Used when a new task is added to the task list,","lastModifiedDate":"2022-09-19"},{"lineNumber":168,"author":{"gitId":"wcwy"},"content":"     * such that an append operation is sufficient to add the new task into the file storage.","lastModifiedDate":"2022-09-19"},{"lineNumber":169,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":170,"author":{"gitId":"wcwy"},"content":"     * @param taskList The most recent TaskList object containing the updated tasks\u0027 information","lastModifiedDate":"2022-09-19"},{"lineNumber":171,"author":{"gitId":"wcwy"},"content":"     * @throws DukeException Exception triggered on erroneous file input operations.","lastModifiedDate":"2022-09-19"},{"lineNumber":172,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":173,"author":{"gitId":"wcwy"},"content":"    public void appendDukeFile(TaskList taskList) throws DukeException {","lastModifiedDate":"2022-09-18"},{"lineNumber":174,"author":{"gitId":"wcwy"},"content":"        try {","lastModifiedDate":"2022-09-18"},{"lineNumber":175,"author":{"gitId":"wcwy"},"content":"            FileWriter dukeFileWriter;","lastModifiedDate":"2022-09-11"},{"lineNumber":176,"author":{"gitId":"wcwy"},"content":"            if (Files.exists(Paths.get(filePath))) {","lastModifiedDate":"2022-09-17"},{"lineNumber":177,"author":{"gitId":"wcwy"},"content":"                dukeFileWriter \u003d new FileWriter(filePath, true);","lastModifiedDate":"2022-09-17"},{"lineNumber":178,"author":{"gitId":"wcwy"},"content":"            } else {","lastModifiedDate":"2022-09-11"},{"lineNumber":179,"author":{"gitId":"wcwy"},"content":"                File dukeFile \u003d new File(filePath);","lastModifiedDate":"2022-09-17"},{"lineNumber":180,"author":{"gitId":"wcwy"},"content":"                dukeFile.createNewFile();","lastModifiedDate":"2022-09-11"},{"lineNumber":181,"author":{"gitId":"wcwy"},"content":"                dukeFileWriter \u003d new FileWriter(filePath, false);","lastModifiedDate":"2022-09-17"},{"lineNumber":182,"author":{"gitId":"wcwy"},"content":"            }","lastModifiedDate":"2022-09-11"},{"lineNumber":183,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-11"},{"lineNumber":184,"author":{"gitId":"wcwy"},"content":"            Task newTask \u003d taskList.getTasks().get(taskList.getTasks().size() - 1);","lastModifiedDate":"2022-09-17"},{"lineNumber":185,"author":{"gitId":"wcwy"},"content":"            String output \u003d retrieveTaskInformationForFileStorage(newTask);","lastModifiedDate":"2022-09-11"},{"lineNumber":186,"author":{"gitId":"wcwy"},"content":"            dukeFileWriter.append(output);","lastModifiedDate":"2022-09-11"},{"lineNumber":187,"author":{"gitId":"wcwy"},"content":"            dukeFileWriter.close();","lastModifiedDate":"2022-09-11"},{"lineNumber":188,"author":{"gitId":"wcwy"},"content":"        } catch (IOException exception) {","lastModifiedDate":"2022-09-18"},{"lineNumber":189,"author":{"gitId":"wcwy"},"content":"            throw new StorageOutputException();","lastModifiedDate":"2022-09-18"},{"lineNumber":190,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-18"},{"lineNumber":191,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-11"},{"lineNumber":192,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-11"},{"lineNumber":193,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":194,"author":{"gitId":"wcwy"},"content":"     * Take in a Task object and format the task information","lastModifiedDate":"2022-09-19"},{"lineNumber":195,"author":{"gitId":"wcwy"},"content":"     * into the format suitable to write into the file storage.","lastModifiedDate":"2022-09-19"},{"lineNumber":196,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":197,"author":{"gitId":"wcwy"},"content":"     * @param task A task to be written into the file storage.","lastModifiedDate":"2022-09-19"},{"lineNumber":198,"author":{"gitId":"wcwy"},"content":"     * @return A formatted string containing the information of the task, ready to be stored in file storage.","lastModifiedDate":"2022-09-19"},{"lineNumber":199,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":200,"author":{"gitId":"wcwy"},"content":"    private static String retrieveTaskInformationForFileStorage(Task task) {","lastModifiedDate":"2022-09-11"},{"lineNumber":201,"author":{"gitId":"wcwy"},"content":"        String output \u003d \"\";","lastModifiedDate":"2022-09-11"},{"lineNumber":202,"author":{"gitId":"wcwy"},"content":"        if (task instanceof Todo) {","lastModifiedDate":"2022-09-11"},{"lineNumber":203,"author":{"gitId":"wcwy"},"content":"            output \u003d String.format(\"%s | %s | %s\", \"T\", task.isDone() ? \"1\" : \"0\", task.getTaskName());","lastModifiedDate":"2022-09-11"},{"lineNumber":204,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-11"},{"lineNumber":205,"author":{"gitId":"wcwy"},"content":"        if (task instanceof Deadline) {","lastModifiedDate":"2022-09-11"},{"lineNumber":206,"author":{"gitId":"wcwy"},"content":"            output \u003d String.format(\"%s | %s | %s | %s\", \"D\", task.isDone() ? \"1\" : \"0\",","lastModifiedDate":"2022-09-11"},{"lineNumber":207,"author":{"gitId":"wcwy"},"content":"                    task.getTaskName(), ((Deadline) task).getDeadlineTime());","lastModifiedDate":"2022-09-11"},{"lineNumber":208,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-11"},{"lineNumber":209,"author":{"gitId":"wcwy"},"content":"        if (task instanceof Event) {","lastModifiedDate":"2022-09-11"},{"lineNumber":210,"author":{"gitId":"wcwy"},"content":"            output \u003d String.format(\"%s | %s | %s | %s\", \"E\", task.isDone() ? \"1\" : \"0\",","lastModifiedDate":"2022-09-11"},{"lineNumber":211,"author":{"gitId":"wcwy"},"content":"                    task.getTaskName(), ((Event) task).getEventTime());","lastModifiedDate":"2022-09-11"},{"lineNumber":212,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-11"},{"lineNumber":213,"author":{"gitId":"wcwy"},"content":"        output +\u003d System.lineSeparator();","lastModifiedDate":"2022-09-11"},{"lineNumber":214,"author":{"gitId":"wcwy"},"content":"        return output;","lastModifiedDate":"2022-09-11"},{"lineNumber":215,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-11"},{"lineNumber":216,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-09-11"}],"authorContributionMap":{"wcwy":216}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"package duke.ui;","lastModifiedDate":"2022-09-17"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-17"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-09-18"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":"import static duke.common.Messages.MESSAGE_FAREWELL;","lastModifiedDate":"2022-09-17"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":"import static duke.common.Messages.MESSAGE_GREETING;","lastModifiedDate":"2022-09-17"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"import static duke.common.Messages.MESSAGE_INQUIRY;","lastModifiedDate":"2022-09-17"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"import static duke.common.Messages.MESSAGE_ADD_TASK_ACKNOWLEDGEMENT;","lastModifiedDate":"2022-09-17"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":"import static duke.common.Messages.MESSAGE_DELETE_TASK_ACKNOWLEDGEMENT;","lastModifiedDate":"2022-09-17"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":"import static duke.common.Messages.MESSAGE_MARK_TASK_ACKNOWLEDGEMENT;","lastModifiedDate":"2022-09-17"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":"import static duke.common.Messages.MESSAGE_UNMARK_TASK_ACKNOWLEDGEMENT;","lastModifiedDate":"2022-09-17"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":"import static duke.common.Messages.MESSAGE_TASK_LISTING_HEADER;","lastModifiedDate":"2022-09-17"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":"import static duke.common.Messages.MESSAGE_TASK_FILTERING_HEADER;","lastModifiedDate":"2022-09-18"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-17"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":"/**","lastModifiedDate":"2022-09-19"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":" * \u003ccode\u003eUi\u003c/code\u003e is the class that represents the user interface of the program.","lastModifiedDate":"2022-09-19"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":" * Operations in the Ui include reading user commands from the input","lastModifiedDate":"2022-09-19"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":" * and displaying relevant application messages to the user in the output.","lastModifiedDate":"2022-09-19"},{"lineNumber":19,"author":{"gitId":"wcwy"},"content":" */","lastModifiedDate":"2022-09-19"},{"lineNumber":20,"author":{"gitId":"wcwy"},"content":"public class Ui {","lastModifiedDate":"2022-09-17"},{"lineNumber":21,"author":{"gitId":"wcwy"},"content":"    private static final String DIVIDER \u003d \"____________________________________________________________\";","lastModifiedDate":"2022-09-17"},{"lineNumber":22,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-17"},{"lineNumber":23,"author":{"gitId":"wcwy"},"content":"    private Scanner in;","lastModifiedDate":"2022-09-18"},{"lineNumber":24,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":25,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":26,"author":{"gitId":"wcwy"},"content":"     * Constructor of \u003ccode\u003eUi\u003c/code\u003e. Creates a Scanner object to read user input.","lastModifiedDate":"2022-09-19"},{"lineNumber":27,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":28,"author":{"gitId":"wcwy"},"content":"    public Ui() {","lastModifiedDate":"2022-09-17"},{"lineNumber":29,"author":{"gitId":"wcwy"},"content":"        this.in \u003d new Scanner(System.in);","lastModifiedDate":"2022-09-18"},{"lineNumber":30,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-17"},{"lineNumber":31,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-17"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    //@@author wcwy-reused","lastModifiedDate":"2022-09-17"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    //Reused from from https://github.com/se-edu/addressbook-level2/blob/master/src/seedu/addressbook/ui/TextUi.java","lastModifiedDate":"2022-09-17"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    // with minor modifications","lastModifiedDate":"2022-09-17"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Take in a variable number of String and print them out line by line","lastModifiedDate":"2022-09-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @param messages A string Varargs","lastModifiedDate":"2022-09-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void displayMessages(String... messages) {","lastModifiedDate":"2022-09-17"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        for (String message : messages) {","lastModifiedDate":"2022-09-17"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            System.out.println(message);","lastModifiedDate":"2022-09-17"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-09-17"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-09-17"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    //@@author","lastModifiedDate":"2022-09-17"},{"lineNumber":47,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-17"},{"lineNumber":48,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":49,"author":{"gitId":"wcwy"},"content":"     * Read a line of user input.","lastModifiedDate":"2022-09-19"},{"lineNumber":50,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":51,"author":{"gitId":"wcwy"},"content":"     * @return A string containing a line of user input.","lastModifiedDate":"2022-09-19"},{"lineNumber":52,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":53,"author":{"gitId":"wcwy"},"content":"    public String readCommand() {","lastModifiedDate":"2022-09-18"},{"lineNumber":54,"author":{"gitId":"wcwy"},"content":"        String userInput \u003d in.nextLine();","lastModifiedDate":"2022-09-18"},{"lineNumber":55,"author":{"gitId":"wcwy"},"content":"        return userInput;","lastModifiedDate":"2022-09-18"},{"lineNumber":56,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-18"},{"lineNumber":57,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":58,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":59,"author":{"gitId":"wcwy"},"content":"     * Display a greeting message to welcome the user.","lastModifiedDate":"2022-09-19"},{"lineNumber":60,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":61,"author":{"gitId":"wcwy"},"content":"    public void displayGreetingMessage() {","lastModifiedDate":"2022-09-17"},{"lineNumber":62,"author":{"gitId":"wcwy"},"content":"        displayMessages(","lastModifiedDate":"2022-09-17"},{"lineNumber":63,"author":{"gitId":"wcwy"},"content":"                DIVIDER,","lastModifiedDate":"2022-09-17"},{"lineNumber":64,"author":{"gitId":"wcwy"},"content":"                MESSAGE_GREETING,","lastModifiedDate":"2022-09-17"},{"lineNumber":65,"author":{"gitId":"wcwy"},"content":"                MESSAGE_INQUIRY,","lastModifiedDate":"2022-09-17"},{"lineNumber":66,"author":{"gitId":"wcwy"},"content":"                DIVIDER","lastModifiedDate":"2022-09-17"},{"lineNumber":67,"author":{"gitId":"wcwy"},"content":"        );","lastModifiedDate":"2022-09-17"},{"lineNumber":68,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-17"},{"lineNumber":69,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-17"},{"lineNumber":70,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":71,"author":{"gitId":"wcwy"},"content":"     * Display all the tasks in the task list to the user in a formatted output.","lastModifiedDate":"2022-09-19"},{"lineNumber":72,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":73,"author":{"gitId":"wcwy"},"content":"     * @param listContent A string containing the formatted list of tasks information","lastModifiedDate":"2022-09-19"},{"lineNumber":74,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":75,"author":{"gitId":"wcwy"},"content":"    public void displayListingMessage(String listContent) {","lastModifiedDate":"2022-09-17"},{"lineNumber":76,"author":{"gitId":"wcwy"},"content":"        displayMessages(","lastModifiedDate":"2022-09-17"},{"lineNumber":77,"author":{"gitId":"wcwy"},"content":"                DIVIDER,","lastModifiedDate":"2022-09-18"},{"lineNumber":78,"author":{"gitId":"wcwy"},"content":"                MESSAGE_TASK_LISTING_HEADER,","lastModifiedDate":"2022-09-17"},{"lineNumber":79,"author":{"gitId":"wcwy"},"content":"                listContent,","lastModifiedDate":"2022-09-17"},{"lineNumber":80,"author":{"gitId":"wcwy"},"content":"                DIVIDER","lastModifiedDate":"2022-09-17"},{"lineNumber":81,"author":{"gitId":"wcwy"},"content":"        );","lastModifiedDate":"2022-09-17"},{"lineNumber":82,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-17"},{"lineNumber":83,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-17"},{"lineNumber":84,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":85,"author":{"gitId":"wcwy"},"content":"     * Display the information of new task added to the list to user on successful task addition.","lastModifiedDate":"2022-09-19"},{"lineNumber":86,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":87,"author":{"gitId":"wcwy"},"content":"     * @param taskDetails Formatted information of the newly added task.","lastModifiedDate":"2022-09-19"},{"lineNumber":88,"author":{"gitId":"wcwy"},"content":"     * @param count       Number of tasks in the list after task addition.","lastModifiedDate":"2022-09-19"},{"lineNumber":89,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":90,"author":{"gitId":"wcwy"},"content":"    public void displayTaskAdditionMessage(String taskDetails, int count) {","lastModifiedDate":"2022-09-17"},{"lineNumber":91,"author":{"gitId":"wcwy"},"content":"        displayMessages(","lastModifiedDate":"2022-09-17"},{"lineNumber":92,"author":{"gitId":"wcwy"},"content":"                DIVIDER,","lastModifiedDate":"2022-09-18"},{"lineNumber":93,"author":{"gitId":"wcwy"},"content":"                MESSAGE_ADD_TASK_ACKNOWLEDGEMENT,","lastModifiedDate":"2022-09-17"},{"lineNumber":94,"author":{"gitId":"wcwy"},"content":"                \"\\t\" + taskDetails,","lastModifiedDate":"2022-09-17"},{"lineNumber":95,"author":{"gitId":"wcwy"},"content":"                \"Now you have \" + count + \" tasks in the list\",","lastModifiedDate":"2022-09-17"},{"lineNumber":96,"author":{"gitId":"wcwy"},"content":"                DIVIDER","lastModifiedDate":"2022-09-17"},{"lineNumber":97,"author":{"gitId":"wcwy"},"content":"        );","lastModifiedDate":"2022-09-17"},{"lineNumber":98,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-17"},{"lineNumber":99,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-17"},{"lineNumber":100,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":101,"author":{"gitId":"wcwy"},"content":"     * Display the information of the deleted task to user on successful task removal.","lastModifiedDate":"2022-09-19"},{"lineNumber":102,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":103,"author":{"gitId":"wcwy"},"content":"     * @param taskDetails Formatted information of the deleted task.","lastModifiedDate":"2022-09-19"},{"lineNumber":104,"author":{"gitId":"wcwy"},"content":"     * @param count       Number of tasks in the list after task removal.","lastModifiedDate":"2022-09-19"},{"lineNumber":105,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":106,"author":{"gitId":"wcwy"},"content":"    public void displayTaskDeletionMessage(String taskDetails, int count) {","lastModifiedDate":"2022-09-17"},{"lineNumber":107,"author":{"gitId":"wcwy"},"content":"        displayMessages(","lastModifiedDate":"2022-09-17"},{"lineNumber":108,"author":{"gitId":"wcwy"},"content":"                DIVIDER,","lastModifiedDate":"2022-09-18"},{"lineNumber":109,"author":{"gitId":"wcwy"},"content":"                MESSAGE_DELETE_TASK_ACKNOWLEDGEMENT,","lastModifiedDate":"2022-09-17"},{"lineNumber":110,"author":{"gitId":"wcwy"},"content":"                \"\\t\" + taskDetails,","lastModifiedDate":"2022-09-17"},{"lineNumber":111,"author":{"gitId":"wcwy"},"content":"                \"Now you have \" + count + \" tasks in the list\",","lastModifiedDate":"2022-09-17"},{"lineNumber":112,"author":{"gitId":"wcwy"},"content":"                DIVIDER","lastModifiedDate":"2022-09-17"},{"lineNumber":113,"author":{"gitId":"wcwy"},"content":"        );","lastModifiedDate":"2022-09-17"},{"lineNumber":114,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-17"},{"lineNumber":115,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-17"},{"lineNumber":116,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":117,"author":{"gitId":"wcwy"},"content":"     * Display the information of the marked task to user on successful mark or unmark.","lastModifiedDate":"2022-09-19"},{"lineNumber":118,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":119,"author":{"gitId":"wcwy"},"content":"     * @param taskName The description of the task marked.","lastModifiedDate":"2022-09-19"},{"lineNumber":120,"author":{"gitId":"wcwy"},"content":"     * @param isMark   Boolean value represent whether it is a mark operation or unmark operation.","lastModifiedDate":"2022-09-19"},{"lineNumber":121,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":122,"author":{"gitId":"wcwy"},"content":"    public void displayMarkOrUnmarkMessage(String taskName, boolean isMark) {","lastModifiedDate":"2022-09-17"},{"lineNumber":123,"author":{"gitId":"wcwy"},"content":"        displayMessages(","lastModifiedDate":"2022-09-17"},{"lineNumber":124,"author":{"gitId":"wcwy"},"content":"                DIVIDER,","lastModifiedDate":"2022-09-18"},{"lineNumber":125,"author":{"gitId":"wcwy"},"content":"                getMessageAcknowledgementForMarkAndUnmark(isMark),","lastModifiedDate":"2022-09-17"},{"lineNumber":126,"author":{"gitId":"wcwy"},"content":"                getCheckboxForMarkAndUnmark(isMark) + taskName,","lastModifiedDate":"2022-09-17"},{"lineNumber":127,"author":{"gitId":"wcwy"},"content":"                DIVIDER","lastModifiedDate":"2022-09-17"},{"lineNumber":128,"author":{"gitId":"wcwy"},"content":"        );","lastModifiedDate":"2022-09-17"},{"lineNumber":129,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-17"},{"lineNumber":130,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-17"},{"lineNumber":131,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":132,"author":{"gitId":"wcwy"},"content":"     * Display a farewell message to user on program exit.","lastModifiedDate":"2022-09-19"},{"lineNumber":133,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":134,"author":{"gitId":"wcwy"},"content":"    public void displayExitMessage() {","lastModifiedDate":"2022-09-17"},{"lineNumber":135,"author":{"gitId":"wcwy"},"content":"        displayMessages(","lastModifiedDate":"2022-09-17"},{"lineNumber":136,"author":{"gitId":"wcwy"},"content":"                DIVIDER,","lastModifiedDate":"2022-09-18"},{"lineNumber":137,"author":{"gitId":"wcwy"},"content":"                MESSAGE_FAREWELL,","lastModifiedDate":"2022-09-17"},{"lineNumber":138,"author":{"gitId":"wcwy"},"content":"                DIVIDER","lastModifiedDate":"2022-09-17"},{"lineNumber":139,"author":{"gitId":"wcwy"},"content":"        );","lastModifiedDate":"2022-09-17"},{"lineNumber":140,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-17"},{"lineNumber":141,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-17"},{"lineNumber":142,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":143,"author":{"gitId":"wcwy"},"content":"     * Display the error message returned on caught exceptions.","lastModifiedDate":"2022-09-19"},{"lineNumber":144,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":145,"author":{"gitId":"wcwy"},"content":"     * @param exceptionMessage A string containing the error message.","lastModifiedDate":"2022-09-19"},{"lineNumber":146,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":147,"author":{"gitId":"wcwy"},"content":"    public void displayErrorMessage(String exceptionMessage) {","lastModifiedDate":"2022-09-18"},{"lineNumber":148,"author":{"gitId":"wcwy"},"content":"        displayMessages(","lastModifiedDate":"2022-09-17"},{"lineNumber":149,"author":{"gitId":"wcwy"},"content":"                DIVIDER,","lastModifiedDate":"2022-09-18"},{"lineNumber":150,"author":{"gitId":"wcwy"},"content":"                exceptionMessage,","lastModifiedDate":"2022-09-18"},{"lineNumber":151,"author":{"gitId":"wcwy"},"content":"                DIVIDER","lastModifiedDate":"2022-09-17"},{"lineNumber":152,"author":{"gitId":"wcwy"},"content":"        );","lastModifiedDate":"2022-09-17"},{"lineNumber":153,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-17"},{"lineNumber":154,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-17"},{"lineNumber":155,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":156,"author":{"gitId":"wcwy"},"content":"     * Return a mark acknowledgement or unmark acknowledgement correspondingly.","lastModifiedDate":"2022-09-19"},{"lineNumber":157,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":158,"author":{"gitId":"wcwy"},"content":"     * @param isMark A boolean value to indicate whether it is a mark or unmark option","lastModifiedDate":"2022-09-19"},{"lineNumber":159,"author":{"gitId":"wcwy"},"content":"     * @return A string containing the acknowledgement message","lastModifiedDate":"2022-09-19"},{"lineNumber":160,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":161,"author":{"gitId":"wcwy"},"content":"    private static String getMessageAcknowledgementForMarkAndUnmark(boolean isMark) {","lastModifiedDate":"2022-09-17"},{"lineNumber":162,"author":{"gitId":"wcwy"},"content":"        String output \u003d \"\";","lastModifiedDate":"2022-09-17"},{"lineNumber":163,"author":{"gitId":"wcwy"},"content":"        if (isMark) {","lastModifiedDate":"2022-09-17"},{"lineNumber":164,"author":{"gitId":"wcwy"},"content":"            output \u003d MESSAGE_MARK_TASK_ACKNOWLEDGEMENT;","lastModifiedDate":"2022-09-17"},{"lineNumber":165,"author":{"gitId":"wcwy"},"content":"        } else {","lastModifiedDate":"2022-09-17"},{"lineNumber":166,"author":{"gitId":"wcwy"},"content":"            output \u003d MESSAGE_UNMARK_TASK_ACKNOWLEDGEMENT;","lastModifiedDate":"2022-09-17"},{"lineNumber":167,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-17"},{"lineNumber":168,"author":{"gitId":"wcwy"},"content":"        return output;","lastModifiedDate":"2022-09-17"},{"lineNumber":169,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-17"},{"lineNumber":170,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-17"},{"lineNumber":171,"author":{"gitId":"wcwy"},"content":"    /**","lastModifiedDate":"2022-09-19"},{"lineNumber":172,"author":{"gitId":"wcwy"},"content":"     * Return a marked checkbox or unmarked checkbox correspondingly.","lastModifiedDate":"2022-09-19"},{"lineNumber":173,"author":{"gitId":"wcwy"},"content":"     *","lastModifiedDate":"2022-09-19"},{"lineNumber":174,"author":{"gitId":"wcwy"},"content":"     * @param isMark A boolean value to indicate whether it is a mark or unmark option","lastModifiedDate":"2022-09-19"},{"lineNumber":175,"author":{"gitId":"wcwy"},"content":"     * @return A string containing the marking checkbox","lastModifiedDate":"2022-09-19"},{"lineNumber":176,"author":{"gitId":"wcwy"},"content":"     */","lastModifiedDate":"2022-09-19"},{"lineNumber":177,"author":{"gitId":"wcwy"},"content":"    private static String getCheckboxForMarkAndUnmark(boolean isMark) {","lastModifiedDate":"2022-09-17"},{"lineNumber":178,"author":{"gitId":"wcwy"},"content":"        String output \u003d \"\";","lastModifiedDate":"2022-09-17"},{"lineNumber":179,"author":{"gitId":"wcwy"},"content":"        if (isMark) {","lastModifiedDate":"2022-09-17"},{"lineNumber":180,"author":{"gitId":"wcwy"},"content":"            output \u003d \"\\t[X] \";","lastModifiedDate":"2022-09-17"},{"lineNumber":181,"author":{"gitId":"wcwy"},"content":"        } else {","lastModifiedDate":"2022-09-17"},{"lineNumber":182,"author":{"gitId":"wcwy"},"content":"            output \u003d \"\\t[ ] \";","lastModifiedDate":"2022-09-17"},{"lineNumber":183,"author":{"gitId":"wcwy"},"content":"        }","lastModifiedDate":"2022-09-17"},{"lineNumber":184,"author":{"gitId":"wcwy"},"content":"        return output;","lastModifiedDate":"2022-09-17"},{"lineNumber":185,"author":{"gitId":"wcwy"},"content":"    }","lastModifiedDate":"2022-09-17"},{"lineNumber":186,"author":{"gitId":"wcwy"},"content":"}","lastModifiedDate":"2022-09-17"}],"authorContributionMap":{"wcwy":171,"-":15}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"wcwy"},"content":"list","lastModifiedDate":"2022-09-18"},{"lineNumber":2,"author":{"gitId":"wcwy"},"content":"todo read book","lastModifiedDate":"2022-08-28"},{"lineNumber":3,"author":{"gitId":"wcwy"},"content":"deadline return book1 /by 2022-09-18","lastModifiedDate":"2022-09-18"},{"lineNumber":4,"author":{"gitId":"wcwy"},"content":"deadline return book2 /by 18/09/2021","lastModifiedDate":"2022-09-18"},{"lineNumber":5,"author":{"gitId":"wcwy"},"content":"deadline return book3 /by Sep 18 2020","lastModifiedDate":"2022-09-18"},{"lineNumber":6,"author":{"gitId":"wcwy"},"content":"deadline return book4 /by 2022-09-18 11:00 PM","lastModifiedDate":"2022-09-18"},{"lineNumber":7,"author":{"gitId":"wcwy"},"content":"deadline return book5 /by 18/09/2021 11:00 PM","lastModifiedDate":"2022-09-18"},{"lineNumber":8,"author":{"gitId":"wcwy"},"content":"deadline return book6 /by Sep 18 2020 11:00 PM","lastModifiedDate":"2022-09-18"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":"deadline return book7 /by 2022-09-18 2359","lastModifiedDate":"2022-09-18"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":"deadline return book8 /by 18/09/2021 2359","lastModifiedDate":"2022-09-18"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":"deadline return book9 /by Sep 18 2020 2359","lastModifiedDate":"2022-09-18"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":"event project meeting1 /at 2022-09-18","lastModifiedDate":"2022-09-18"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":"event project meeting2 /at 18/09/2021","lastModifiedDate":"2022-09-18"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"event project meeting3 /at Sep 18 2020","lastModifiedDate":"2022-09-18"},{"lineNumber":15,"author":{"gitId":"wcwy"},"content":"event project meeting4 /at 2022-09-18 11:00 PM","lastModifiedDate":"2022-09-18"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":"event project meeting5 /at 18/09/2021 11:00 PM","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"wcwy"},"content":"event project meeting6 /at Sep 18 2020 11:00 PM","lastModifiedDate":"2022-09-18"},{"lineNumber":18,"author":{"gitId":"wcwy"},"content":"event project meeting7 /at 2022-09-18 2359","lastModifiedDate":"2022-09-18"},{"lineNumber":19,"author":{"gitId":"wcwy"},"content":"event project meeting8 /at 18/09/2021 2359","lastModifiedDate":"2022-09-18"},{"lineNumber":20,"author":{"gitId":"wcwy"},"content":"event project meeting9 /at Sep 18 2020 2359","lastModifiedDate":"2022-09-18"},{"lineNumber":21,"author":{"gitId":"wcwy"},"content":"todo join sports club","lastModifiedDate":"2022-08-28"},{"lineNumber":22,"author":{"gitId":"wcwy"},"content":"mark 1","lastModifiedDate":"2022-08-28"},{"lineNumber":23,"author":{"gitId":"wcwy"},"content":"mark 4","lastModifiedDate":"2022-08-28"},{"lineNumber":24,"author":{"gitId":"wcwy"},"content":"todo borrow book","lastModifiedDate":"2022-08-28"},{"lineNumber":25,"author":{"gitId":"wcwy"},"content":"list","lastModifiedDate":"2022-08-28"},{"lineNumber":26,"author":{"gitId":"wcwy"},"content":"unmark 4","lastModifiedDate":"2022-08-28"},{"lineNumber":27,"author":{"gitId":"wcwy"},"content":"deadline return book /by Oct 15 2019 1800","lastModifiedDate":"2022-09-18"},{"lineNumber":28,"author":{"gitId":"wcwy"},"content":"event project meeting /at 02/12/2022 0300","lastModifiedDate":"2022-09-18"},{"lineNumber":29,"author":{"gitId":"wcwy"},"content":"list","lastModifiedDate":"2022-08-28"},{"lineNumber":30,"author":{"gitId":"wcwy"},"content":"mark 0","lastModifiedDate":"2022-09-03"},{"lineNumber":31,"author":{"gitId":"wcwy"},"content":"mark -1","lastModifiedDate":"2022-09-03"},{"lineNumber":32,"author":{"gitId":"wcwy"},"content":"mark 123","lastModifiedDate":"2022-09-03"},{"lineNumber":33,"author":{"gitId":"wcwy"},"content":"mark 11111111111111111111111111111111111","lastModifiedDate":"2022-09-03"},{"lineNumber":34,"author":{"gitId":"wcwy"},"content":"mark abc","lastModifiedDate":"2022-09-18"},{"lineNumber":35,"author":{"gitId":"wcwy"},"content":"todo","lastModifiedDate":"2022-09-03"},{"lineNumber":36,"author":{"gitId":"wcwy"},"content":"todo","lastModifiedDate":"2022-09-03"},{"lineNumber":37,"author":{"gitId":"wcwy"},"content":"deadline","lastModifiedDate":"2022-09-03"},{"lineNumber":38,"author":{"gitId":"wcwy"},"content":"deadline  /by","lastModifiedDate":"2022-09-03"},{"lineNumber":39,"author":{"gitId":"wcwy"},"content":"deadline 123 /by","lastModifiedDate":"2022-09-03"},{"lineNumber":40,"author":{"gitId":"wcwy"},"content":"deadline  /by  Oct 15 2019","lastModifiedDate":"2022-09-18"},{"lineNumber":41,"author":{"gitId":"wcwy"},"content":"deadline /by Oct 15 2019 69:69 PM","lastModifiedDate":"2022-09-18"},{"lineNumber":42,"author":{"gitId":"wcwy"},"content":"deadline /by Monday","lastModifiedDate":"2022-09-18"},{"lineNumber":43,"author":{"gitId":"wcwy"},"content":"event","lastModifiedDate":"2022-09-03"},{"lineNumber":44,"author":{"gitId":"wcwy"},"content":"event  /at","lastModifiedDate":"2022-09-03"},{"lineNumber":45,"author":{"gitId":"wcwy"},"content":"event 123 /at","lastModifiedDate":"2022-09-03"},{"lineNumber":46,"author":{"gitId":"wcwy"},"content":"event  /at 123","lastModifiedDate":"2022-09-03"},{"lineNumber":47,"author":{"gitId":"wcwy"},"content":"event /at Oct 15 2019 69:69 PM","lastModifiedDate":"2022-09-18"},{"lineNumber":48,"author":{"gitId":"wcwy"},"content":"event /at Monday","lastModifiedDate":"2022-09-18"},{"lineNumber":49,"author":{"gitId":"wcwy"},"content":"list","lastModifiedDate":"2022-09-18"},{"lineNumber":50,"author":{"gitId":"wcwy"},"content":"delete 2","lastModifiedDate":"2022-09-18"},{"lineNumber":51,"author":{"gitId":"wcwy"},"content":"delete 0","lastModifiedDate":"2022-09-18"},{"lineNumber":52,"author":{"gitId":"wcwy"},"content":"delete -1","lastModifiedDate":"2022-09-18"},{"lineNumber":53,"author":{"gitId":"wcwy"},"content":"delete 123","lastModifiedDate":"2022-09-18"},{"lineNumber":54,"author":{"gitId":"wcwy"},"content":"delete 11111111111111111111111111111111111","lastModifiedDate":"2022-09-18"},{"lineNumber":55,"author":{"gitId":"wcwy"},"content":"list","lastModifiedDate":"2022-09-18"},{"lineNumber":56,"author":{"gitId":"wcwy"},"content":"filter","lastModifiedDate":"2022-09-18"},{"lineNumber":57,"author":{"gitId":"wcwy"},"content":"filter 2022-09-18","lastModifiedDate":"2022-09-18"},{"lineNumber":58,"author":{"gitId":"wcwy"},"content":"filter 18/09/2021","lastModifiedDate":"2022-09-18"},{"lineNumber":59,"author":{"gitId":"wcwy"},"content":"filter Sep 18 2020","lastModifiedDate":"2022-09-18"},{"lineNumber":60,"author":{"gitId":"wcwy"},"content":"filter Sep 18 2022 11:00 PM","lastModifiedDate":"2022-09-18"},{"lineNumber":61,"author":{"gitId":"wcwy"},"content":"filter ABC","lastModifiedDate":"2022-09-18"},{"lineNumber":62,"author":{"gitId":"wcwy"},"content":"filter 99/99/9999","lastModifiedDate":"2022-09-18"},{"lineNumber":63,"author":{"gitId":"wcwy"},"content":"filter Sep 11 2022","lastModifiedDate":"2022-09-18"},{"lineNumber":64,"author":{"gitId":"wcwy"},"content":"byee","lastModifiedDate":"2022-09-03"},{"lineNumber":65,"author":{"gitId":"wcwy"},"content":"bye","lastModifiedDate":"2022-08-28"}],"authorContributionMap":{"wcwy":65}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"wcwy"},"content":"REM delete duke.txt from previous run","lastModifiedDate":"2022-09-11"},{"lineNumber":10,"author":{"gitId":"wcwy"},"content":"if exist duke.txt del duke.txt","lastModifiedDate":"2022-09-11"},{"lineNumber":11,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-11"},{"lineNumber":12,"author":{"gitId":"wcwy"},"content":"REM delete tasks.txt from previous run","lastModifiedDate":"2022-09-18"},{"lineNumber":13,"author":{"gitId":"wcwy"},"content":"if exist tasks.txt del tasks.txt","lastModifiedDate":"2022-09-18"},{"lineNumber":14,"author":{"gitId":"wcwy"},"content":"","lastModifiedDate":"2022-09-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"wcwy"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\command\\*.java ..\\src\\main\\java\\duke\\common\\*.java ..\\src\\main\\java\\duke\\data\\*.java ..\\src\\main\\java\\duke\\data\\task\\*.java ..\\src\\main\\java\\duke\\exception\\*.java ..\\src\\main\\java\\duke\\parser\\*.java ..\\src\\main\\java\\duke\\storage\\*.java  ..\\src\\main\\java\\duke\\ui\\*.java","lastModifiedDate":"2022-09-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"wcwy"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2022-09-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"wcwy":8,"-":19}}]
